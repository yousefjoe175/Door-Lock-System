
IMT project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f8  00800060  000005c6  0000065a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000051  00800158  00800158  00000752  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000752  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000784  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e08  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077d  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005de  00000000  00000000  00001de5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  000023c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045e  00000000  00000000  0000257c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000059d  00000000  00000000  000029da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002f77  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 35       	cpi	r26, 0x58	; 88
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a8 e5       	ldi	r26, 0x58	; 88
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3a       	cpi	r26, 0xA9	; 169
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "MCAL/UART.h"



int main (void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	u8 choose;
	UART_voidInit();
  9c:	0e 94 6e 00 	call	0xdc	; 0xdc <UART_voidInit>
	while(1){
		UART_voidSendStringSynch("Choose a choice: ");
  a0:	80 e6       	ldi	r24, 0x60	; 96
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 83 00 	call	0x106	; 0x106 <UART_voidSendStringSynch>
		UART_u8ReceiveDataSynch(&choose);
  a8:	ce 01       	movw	r24, r28
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_u8ReceiveDataSynch>
		UART_voidSendDataSynch(choose);
  b0:	89 81       	ldd	r24, Y+1	; 0x01
  b2:	0e 94 75 00 	call	0xea	; 0xea <UART_voidSendDataSynch>
		UART_voidSendDataSynch(' ');
  b6:	80 e2       	ldi	r24, 0x20	; 32
  b8:	0e 94 75 00 	call	0xea	; 0xea <UART_voidSendDataSynch>
		switch(choose){
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	83 33       	cpi	r24, 0x33	; 51
  c0:	39 f0       	breq	.+14     	; 0xd0 <main+0x3e>
  c2:	84 33       	cpi	r24, 0x34	; 52
  c4:	41 f0       	breq	.+16     	; 0xd6 <main+0x44>
  c6:	81 33       	cpi	r24, 0x31	; 49
  c8:	59 f7       	brne	.-42     	; 0xa0 <main+0xe>
			case '1':
				new();
  ca:	0e 94 8e 01 	call	0x31c	; 0x31c <new>
				break;
  ce:	e8 cf       	rjmp	.-48     	; 0xa0 <main+0xe>
			case '2':
				//SignIn();
				break;
			case '3':
				Edit();
  d0:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <Edit>
				break;
  d4:	e5 cf       	rjmp	.-54     	; 0xa0 <main+0xe>
			case '4':
				Show();
  d6:	0e 94 81 02 	call	0x502	; 0x502 <Show>
  da:	e2 cf       	rjmp	.-60     	; 0xa0 <main+0xe>

000000dc <UART_voidInit>:
void UART_voidInit(void){
	u8  ucsrb, ucsrc;	
	ucsrb = ucsrb |(1<<TXEN | 1<<RXEN);		//Enable TX and RX.    //we didn't set the interrupts yet
	ucsrc = ucsrc |(1<<URSEL| 3<<UCSZ);		//select UCSRC and set the character size to 8 bit.
	
	UBRRL = 51;		//baudrate 9600 for 8MHz
  dc:	83 e3       	ldi	r24, 0x33	; 51
  de:	89 b9       	out	0x09, r24	; 9
	
	UCSRB = ucsrb;	//Enable RX , TX only without interrupts
  e0:	88 e1       	ldi	r24, 0x18	; 24
  e2:	8a b9       	out	0x0a, r24	; 10
	UCSRC = ucsrc;	//8-bit data
  e4:	86 e8       	ldi	r24, 0x86	; 134
  e6:	80 bd       	out	0x20, r24	; 32
  e8:	08 95       	ret

000000ea <UART_voidSendDataSynch>:


//For Polling transmission and reception
void UART_voidSendDataSynch(u8 Copy_u8Data){
	
	while(GET_BIT(UCSRA,UDRE) == 0);	//wait until the Data Registe Embty is set
  ea:	5d 9b       	sbis	0x0b, 5	; 11
  ec:	fe cf       	rjmp	.-4      	; 0xea <UART_voidSendDataSynch>
	UDR = Copy_u8Data;
  ee:	8c b9       	out	0x0c, r24	; 12
	while(GET_BIT(UCSRA,TXC) == 0);	//wait until data is transmitted
  f0:	5e 9b       	sbis	0x0b, 6	; 11
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <UART_voidSendDataSynch+0x6>
	SET_BIT(UCSRA,TXC);	//clear the flag of TX complete
  f4:	5e 9a       	sbi	0x0b, 6	; 11
  f6:	08 95       	ret

000000f8 <UART_u8ReceiveDataSynch>:
}

void UART_u8ReceiveDataSynch(u8 *Copy_pu8Data){
	while(GET_BIT(UCSRA,RXC)==0);	//wait until there's data to be read in the receive buffer
  f8:	5f 9b       	sbis	0x0b, 7	; 11
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <UART_u8ReceiveDataSynch>
	SET_BIT(UCSRA,RXC);				//clear the receive flag 
  fc:	5f 9a       	sbi	0x0b, 7	; 11
	*Copy_pu8Data = UDR;			//send the received character to the addressed variable
  fe:	2c b1       	in	r18, 0x0c	; 12
 100:	fc 01       	movw	r30, r24
 102:	20 83       	st	Z, r18
 104:	08 95       	ret

00000106 <UART_voidSendStringSynch>:
}

void UART_voidSendStringSynch(u8* Copy_pu8String){
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	fc 01       	movw	r30, r24
	u8 counter = 0;
		while(Copy_pu8String[counter] != '\0'){
 10e:	80 81       	ld	r24, Z
 110:	88 23       	and	r24, r24
 112:	59 f0       	breq	.+22     	; 0x12a <UART_voidSendStringSynch+0x24>
 114:	8f 01       	movw	r16, r30
 116:	c0 e0       	ldi	r28, 0x00	; 0
			
			UART_voidSendDataSynch(Copy_pu8String[counter]);
 118:	0e 94 75 00 	call	0xea	; 0xea <UART_voidSendDataSynch>
			counter++;
 11c:	cf 5f       	subi	r28, 0xFF	; 255
	*Copy_pu8Data = UDR;			//send the received character to the addressed variable
}

void UART_voidSendStringSynch(u8* Copy_pu8String){
	u8 counter = 0;
		while(Copy_pu8String[counter] != '\0'){
 11e:	f8 01       	movw	r30, r16
 120:	ec 0f       	add	r30, r28
 122:	f1 1d       	adc	r31, r1
 124:	80 81       	ld	r24, Z
 126:	81 11       	cpse	r24, r1
 128:	f7 cf       	rjmp	.-18     	; 0x118 <UART_voidSendStringSynch+0x12>
			UART_voidSendDataSynch(Copy_pu8String[counter]);
			counter++;
		}
		
	
}
 12a:	cf 91       	pop	r28
 12c:	1f 91       	pop	r17
 12e:	0f 91       	pop	r16
 130:	08 95       	ret

00000132 <UART_voidSendNumberSynch>:

void UART_voidSendNumberSynch(u32 Copy_u32Number){
 132:	0f 93       	push	r16
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	fc 01       	movw	r30, r24
	u8 SentChar;
	u32 y = 1;
 13c:	c1 e0       	ldi	r28, 0x01	; 1
 13e:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(Copy_u32Number/(10*y) !=0){
 140:	01 c0       	rjmp	.+2      	; 0x144 <UART_voidSendNumberSynch+0x12>
		y*=10;
 142:	e9 01       	movw	r28, r18

void UART_voidSendNumberSynch(u32 Copy_u32Number){
	u8 SentChar;
	u32 y = 1;
	
	while(Copy_u32Number/(10*y) !=0){
 144:	ce 01       	movw	r24, r28
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	9e 01       	movw	r18, r28
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	28 0f       	add	r18, r24
 15a:	39 1f       	adc	r19, r25
 15c:	cf 01       	movw	r24, r30
 15e:	b9 01       	movw	r22, r18
 160:	0e 94 be 02 	call	0x57c	; 0x57c <__udivmodhi4>
 164:	67 2b       	or	r22, r23
 166:	69 f7       	brne	.-38     	; 0x142 <UART_voidSendNumberSynch+0x10>
		y*=10;
	}
	while(Copy_u32Number !=0){
 168:	30 97       	sbiw	r30, 0x00	; 0
 16a:	d1 f0       	breq	.+52     	; 0x1a0 <UART_voidSendNumberSynch+0x6e>
		SentChar = (Copy_u32Number/y)+'0';
		UART_voidSendDataSynch(SentChar);
 16c:	cf 01       	movw	r24, r30
 16e:	be 01       	movw	r22, r28
 170:	0e 94 be 02 	call	0x57c	; 0x57c <__udivmodhi4>
 174:	08 2f       	mov	r16, r24
 176:	19 2f       	mov	r17, r25
 178:	80 e3       	ldi	r24, 0x30	; 48
 17a:	86 0f       	add	r24, r22
 17c:	0e 94 75 00 	call	0xea	; 0xea <UART_voidSendDataSynch>
		Copy_u32Number %=y;
 180:	e0 2f       	mov	r30, r16
 182:	f1 2f       	mov	r31, r17
		y/=10;
 184:	9e 01       	movw	r18, r28
 186:	ad ec       	ldi	r26, 0xCD	; 205
 188:	bc ec       	ldi	r27, 0xCC	; 204
 18a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__umulhisi3>
 18e:	ec 01       	movw	r28, r24
 190:	d6 95       	lsr	r29
 192:	c7 95       	ror	r28
 194:	d6 95       	lsr	r29
 196:	c7 95       	ror	r28
 198:	d6 95       	lsr	r29
 19a:	c7 95       	ror	r28
	u32 y = 1;
	
	while(Copy_u32Number/(10*y) !=0){
		y*=10;
	}
	while(Copy_u32Number !=0){
 19c:	30 97       	sbiw	r30, 0x00	; 0
 19e:	31 f7       	brne	.-52     	; 0x16c <UART_voidSendNumberSynch+0x3a>
		SentChar = (Copy_u32Number/y)+'0';
		UART_voidSendDataSynch(SentChar);
		Copy_u32Number %=y;
		y/=10;
	}
}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	08 95       	ret

000001aa <UART_voidReceiveStringSynch>:

void UART_voidReceiveStringSynch(u8* Copy_pu8Data , u8 BufferSize){
 1aa:	cf 92       	push	r12
 1ac:	df 92       	push	r13
 1ae:	ef 92       	push	r14
 1b0:	ff 92       	push	r15
 1b2:	1f 93       	push	r17
 1b4:	cf 93       	push	r28
 1b6:	df 93       	push	r29
 1b8:	6c 01       	movw	r12, r24
	
	u8 counter = -1;
 1ba:	1f ef       	ldi	r17, 0xFF	; 255
	do{
		counter++;
		UART_u8ReceiveDataSynch(Copy_pu8Data+counter);
		UART_voidSendDataSynch(Copy_pu8Data[counter]);
	}while(Copy_pu8Data[counter] != '+' && counter < BufferSize-1 );				//loop until Enter is pressed and is less than the last element of the buffer
 1bc:	e6 2e       	mov	r14, r22
 1be:	f1 2c       	mov	r15, r1
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	e8 1a       	sub	r14, r24
 1c4:	f1 08       	sbc	r15, r1

void UART_voidReceiveStringSynch(u8* Copy_pu8Data , u8 BufferSize){
	
	u8 counter = -1;
	do{
		counter++;
 1c6:	1f 5f       	subi	r17, 0xFF	; 255
		UART_u8ReceiveDataSynch(Copy_pu8Data+counter);
 1c8:	e6 01       	movw	r28, r12
 1ca:	c1 0f       	add	r28, r17
 1cc:	d1 1d       	adc	r29, r1
 1ce:	ce 01       	movw	r24, r28
 1d0:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_u8ReceiveDataSynch>
		UART_voidSendDataSynch(Copy_pu8Data[counter]);
 1d4:	88 81       	ld	r24, Y
 1d6:	0e 94 75 00 	call	0xea	; 0xea <UART_voidSendDataSynch>
	}while(Copy_pu8Data[counter] != '+' && counter < BufferSize-1 );				//loop until Enter is pressed and is less than the last element of the buffer
 1da:	88 81       	ld	r24, Y
 1dc:	8b 32       	cpi	r24, 0x2B	; 43
 1de:	29 f0       	breq	.+10     	; 0x1ea <UART_voidReceiveStringSynch+0x40>
 1e0:	81 2f       	mov	r24, r17
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	8e 15       	cp	r24, r14
 1e6:	9f 05       	cpc	r25, r15
 1e8:	74 f3       	brlt	.-36     	; 0x1c6 <UART_voidReceiveStringSynch+0x1c>
	Copy_pu8Data[counter] = '\0';			//put the null character at the last element of the buffer
 1ea:	18 82       	st	Y, r1
}
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	df 90       	pop	r13
 1f8:	cf 90       	pop	r12
 1fa:	08 95       	ret

000001fc <UART_voidReceiveNumberSynch>:

void UART_voidReceiveNumberSynch(u32 *Copy_pu32Number){
 1fc:	5f 92       	push	r5
 1fe:	6f 92       	push	r6
 200:	7f 92       	push	r7
 202:	8f 92       	push	r8
 204:	9f 92       	push	r9
 206:	af 92       	push	r10
 208:	bf 92       	push	r11
 20a:	cf 92       	push	r12
 20c:	df 92       	push	r13
 20e:	ef 92       	push	r14
 210:	ff 92       	push	r15
 212:	0f 93       	push	r16
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	cd b7       	in	r28, 0x3d	; 61
 21c:	de b7       	in	r29, 0x3e	; 62
 21e:	2a 97       	sbiw	r28, 0x0a	; 10
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	f8 94       	cli
 224:	de bf       	out	0x3e, r29	; 62
 226:	0f be       	out	0x3f, r0	; 63
 228:	cd bf       	out	0x3d, r28	; 61
 22a:	3c 01       	movw	r6, r24
 22c:	ae 01       	movw	r20, r28
 22e:	4f 5f       	subi	r20, 0xFF	; 255
 230:	5f 4f       	sbci	r21, 0xFF	; 255
 232:	7a 01       	movw	r14, r20
 234:	6a 01       	movw	r12, r20
 236:	00 e0       	ldi	r16, 0x00	; 0
 238:	10 e0       	ldi	r17, 0x00	; 0
	u8 counter = 0;
	u32 number = 0;
	u32 decimal = 1;
	u8 temp;
	do{		//receive the number and put it into a buffer
		numlen++;
 23a:	50 2e       	mov	r5, r16
		UART_u8ReceiveDataSynch(&(Buffer[numlen]));
 23c:	58 01       	movw	r10, r16
 23e:	46 01       	movw	r8, r12
 240:	c6 01       	movw	r24, r12
 242:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_u8ReceiveDataSynch>
		UART_voidSendDataSynch(Buffer[numlen]);
 246:	d6 01       	movw	r26, r12
 248:	8d 91       	ld	r24, X+
 24a:	6d 01       	movw	r12, r26
 24c:	0e 94 75 00 	call	0xea	; 0xea <UART_voidSendDataSynch>
		
	}while(Buffer[numlen] != '+' && numlen< 10);		//the last element storing Enter char.
 250:	f4 01       	movw	r30, r8
 252:	80 81       	ld	r24, Z
 254:	8b 32       	cpi	r24, 0x2B	; 43
 256:	09 f4       	brne	.+2      	; 0x25a <UART_voidReceiveNumberSynch+0x5e>
 258:	47 c0       	rjmp	.+142    	; 0x2e8 <UART_voidReceiveNumberSynch+0xec>
 25a:	0f 5f       	subi	r16, 0xFF	; 255
 25c:	1f 4f       	sbci	r17, 0xFF	; 255
 25e:	0b 30       	cpi	r16, 0x0B	; 11
 260:	11 05       	cpc	r17, r1
 262:	59 f7       	brne	.-42     	; 0x23a <UART_voidReceiveNumberSynch+0x3e>
 264:	41 c0       	rjmp	.+130    	; 0x2e8 <UART_voidReceiveNumberSynch+0xec>
	
	for( ;counter<=numlen/2;counter++){	//swap the buffer element	as it is stored inversely
		temp = Buffer[numlen - counter-1];
 266:	a8 2f       	mov	r26, r24
 268:	b0 e0       	ldi	r27, 0x00	; 0
 26a:	f5 01       	movw	r30, r10
 26c:	ea 1b       	sub	r30, r26
 26e:	fb 0b       	sbc	r31, r27
 270:	31 97       	sbiw	r30, 0x01	; 1
 272:	41 e0       	ldi	r20, 0x01	; 1
 274:	50 e0       	ldi	r21, 0x00	; 0
 276:	4c 0f       	add	r20, r28
 278:	5d 1f       	adc	r21, r29
 27a:	e4 0f       	add	r30, r20
 27c:	f5 1f       	adc	r31, r21
 27e:	90 81       	ld	r25, Z
		Buffer[numlen - counter - 1] = Buffer[counter] - '0';
 280:	a4 0f       	add	r26, r20
 282:	b5 1f       	adc	r27, r21
 284:	2c 91       	ld	r18, X
 286:	20 53       	subi	r18, 0x30	; 48
 288:	20 83       	st	Z, r18
		Buffer[counter] = temp - '0';
 28a:	90 53       	subi	r25, 0x30	; 48
 28c:	9c 93       	st	X, r25
		UART_u8ReceiveDataSynch(&(Buffer[numlen]));
		UART_voidSendDataSynch(Buffer[numlen]);
		
	}while(Buffer[numlen] != '+' && numlen< 10);		//the last element storing Enter char.
	
	for( ;counter<=numlen/2;counter++){	//swap the buffer element	as it is stored inversely
 28e:	8f 5f       	subi	r24, 0xFF	; 255
 290:	38 17       	cp	r19, r24
 292:	48 f7       	brcc	.-46     	; 0x266 <UART_voidReceiveNumberSynch+0x6a>
		temp = Buffer[numlen - counter-1];
		Buffer[numlen - counter - 1] = Buffer[counter] - '0';
		Buffer[counter] = temp - '0';
		
	}
	for(counter = 0; counter<numlen; counter++){
 294:	55 20       	and	r5, r5
 296:	11 f1       	breq	.+68     	; 0x2dc <UART_voidReceiveNumberSynch+0xe0>
 298:	5a 94       	dec	r5
 29a:	fe 01       	movw	r30, r28
 29c:	e5 0d       	add	r30, r5
 29e:	f1 1d       	adc	r31, r1
 2a0:	32 96       	adiw	r30, 0x02	; 2
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	20 e0       	ldi	r18, 0x00	; 0
 2a8:	30 e0       	ldi	r19, 0x00	; 0
		number = number + Buffer[counter]*decimal;
 2aa:	d7 01       	movw	r26, r14
 2ac:	6d 91       	ld	r22, X+
 2ae:	7d 01       	movw	r14, r26
 2b0:	68 9f       	mul	r22, r24
 2b2:	a0 01       	movw	r20, r0
 2b4:	69 9f       	mul	r22, r25
 2b6:	50 0d       	add	r21, r0
 2b8:	11 24       	eor	r1, r1
 2ba:	24 0f       	add	r18, r20
 2bc:	35 1f       	adc	r19, r21
		decimal *= 10;
 2be:	ac 01       	movw	r20, r24
 2c0:	44 0f       	add	r20, r20
 2c2:	55 1f       	adc	r21, r21
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	84 0f       	add	r24, r20
 2d2:	95 1f       	adc	r25, r21
		temp = Buffer[numlen - counter-1];
		Buffer[numlen - counter - 1] = Buffer[counter] - '0';
		Buffer[counter] = temp - '0';
		
	}
	for(counter = 0; counter<numlen; counter++){
 2d4:	ae 17       	cp	r26, r30
 2d6:	bf 07       	cpc	r27, r31
 2d8:	41 f7       	brne	.-48     	; 0x2aa <UART_voidReceiveNumberSynch+0xae>
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <UART_voidReceiveNumberSynch+0xe4>
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
		number = number + Buffer[counter]*decimal;
		decimal *= 10;
		//UART_voidSendNumberSynch(number);	
	}
	
	*Copy_pu32Number = number;
 2e0:	f3 01       	movw	r30, r6
 2e2:	31 83       	std	Z+1, r19	; 0x01
 2e4:	20 83       	st	Z, r18
	
}
 2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <UART_voidReceiveNumberSynch+0xf4>
		UART_u8ReceiveDataSynch(&(Buffer[numlen]));
		UART_voidSendDataSynch(Buffer[numlen]);
		
	}while(Buffer[numlen] != '+' && numlen< 10);		//the last element storing Enter char.
	
	for( ;counter<=numlen/2;counter++){	//swap the buffer element	as it is stored inversely
 2e8:	35 2d       	mov	r19, r5
 2ea:	36 95       	lsr	r19
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	bb cf       	rjmp	.-138    	; 0x266 <UART_voidReceiveNumberSynch+0x6a>
		//UART_voidSendNumberSynch(number);	
	}
	
	*Copy_pu32Number = number;
	
}
 2f0:	2a 96       	adiw	r28, 0x0a	; 10
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	cd bf       	out	0x3d, r28	; 61
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	1f 91       	pop	r17
 302:	0f 91       	pop	r16
 304:	ff 90       	pop	r15
 306:	ef 90       	pop	r14
 308:	df 90       	pop	r13
 30a:	cf 90       	pop	r12
 30c:	bf 90       	pop	r11
 30e:	af 90       	pop	r10
 310:	9f 90       	pop	r9
 312:	8f 90       	pop	r8
 314:	7f 90       	pop	r7
 316:	6f 90       	pop	r6
 318:	5f 90       	pop	r5
 31a:	08 95       	ret

0000031c <new>:
u32 pass[10];

void new(void){
	//UART_voidSendDataSynch('\n');
	
	UART_voidSendStringSynch("Enter Your User Name: ");
 31c:	82 e7       	ldi	r24, 0x72	; 114
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 83 00 	call	0x106	; 0x106 <UART_voidSendStringSynch>
	UART_voidReceiveStringSynch(*(Buffer+counter), MAX_NAME_SIZE);
 324:	e0 91 58 01 	lds	r30, 0x0158	; 0x800158 <__data_end>
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	ee 0f       	add	r30, r30
 32c:	ff 1f       	adc	r31, r31
 32e:	eb 56       	subi	r30, 0x6B	; 107
 330:	fe 4f       	sbci	r31, 0xFE	; 254
 332:	64 e1       	ldi	r22, 0x14	; 20
 334:	80 81       	ld	r24, Z
 336:	91 81       	ldd	r25, Z+1	; 0x01
 338:	0e 94 d5 00 	call	0x1aa	; 0x1aa <UART_voidReceiveStringSynch>
	users[counter].name = *(Buffer+counter);
 33c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	dc 01       	movw	r26, r24
 344:	aa 0f       	add	r26, r26
 346:	bb 1f       	adc	r27, r27
 348:	aa 0f       	add	r26, r26
 34a:	bb 1f       	adc	r27, r27
 34c:	a7 5a       	subi	r26, 0xA7	; 167
 34e:	be 4f       	sbci	r27, 0xFE	; 254
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	fc 01       	movw	r30, r24
 356:	eb 56       	subi	r30, 0x6B	; 107
 358:	fe 4f       	sbci	r31, 0xFE	; 254
 35a:	80 81       	ld	r24, Z
 35c:	91 81       	ldd	r25, Z+1	; 0x01
 35e:	8d 93       	st	X+, r24
 360:	9c 93       	st	X, r25
	UART_voidSendDataSynch(' ');
 362:	80 e2       	ldi	r24, 0x20	; 32
 364:	0e 94 75 00 	call	0xea	; 0xea <UART_voidSendDataSynch>
	
	UART_voidSendStringSynch("Enter Your Password: ");
 368:	89 e8       	ldi	r24, 0x89	; 137
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 83 00 	call	0x106	; 0x106 <UART_voidSendStringSynch>
	UART_voidReceiveNumberSynch(pass+counter);
 370:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	8f 57       	subi	r24, 0x7F	; 127
 37c:	9e 4f       	sbci	r25, 0xFE	; 254
 37e:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UART_voidReceiveNumberSynch>
	users[counter].password = pass[counter];
 382:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	dc 01       	movw	r26, r24
 38a:	aa 0f       	add	r26, r26
 38c:	bb 1f       	adc	r27, r27
 38e:	aa 0f       	add	r26, r26
 390:	bb 1f       	adc	r27, r27
 392:	a7 5a       	subi	r26, 0xA7	; 167
 394:	be 4f       	sbci	r27, 0xFE	; 254
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	fc 01       	movw	r30, r24
 39c:	ef 57       	subi	r30, 0x7F	; 127
 39e:	fe 4f       	sbci	r31, 0xFE	; 254
 3a0:	80 81       	ld	r24, Z
 3a2:	91 81       	ldd	r25, Z+1	; 0x01
 3a4:	13 96       	adiw	r26, 0x03	; 3
 3a6:	9c 93       	st	X, r25
 3a8:	8e 93       	st	-X, r24
 3aa:	12 97       	sbiw	r26, 0x02	; 2
	UART_voidSendDataSynch(' ');
 3ac:	80 e2       	ldi	r24, 0x20	; 32
 3ae:	0e 94 75 00 	call	0xea	; 0xea <UART_voidSendDataSynch>
	
	UART_voidSendStringSynch("Your ID is ");
 3b2:	8f e9       	ldi	r24, 0x9F	; 159
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 83 00 	call	0x106	; 0x106 <UART_voidSendStringSynch>
	UART_voidSendDataSynch(counter + '0');
 3ba:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
 3be:	80 5d       	subi	r24, 0xD0	; 208
 3c0:	0e 94 75 00 	call	0xea	; 0xea <UART_voidSendDataSynch>
	UART_voidSendDataSynch(' ');
 3c4:	80 e2       	ldi	r24, 0x20	; 32
 3c6:	0e 94 75 00 	call	0xea	; 0xea <UART_voidSendDataSynch>
	
	counter++;
 3ca:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <__data_end>
 3ce:	8f 5f       	subi	r24, 0xFF	; 255
 3d0:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <__data_end>
 3d4:	08 95       	ret

000003d6 <Edit>:
}
void SignIn(void);
void Light();
void Edit(){
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	00 d0       	rcall	.+0      	; 0x3dc <Edit+0x6>
 3dc:	cd b7       	in	r28, 0x3d	; 61
 3de:	de b7       	in	r29, 0x3e	; 62
	u8 id, choose;
	//u32 pass;
	
	UART_voidSendStringSynch("Enter Your ID ");
 3e0:	8b ea       	ldi	r24, 0xAB	; 171
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 83 00 	call	0x106	; 0x106 <UART_voidSendStringSynch>
	UART_u8ReceiveDataSynch(&id);
 3e8:	ce 01       	movw	r24, r28
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_u8ReceiveDataSynch>
	id -= '0';
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	80 53       	subi	r24, 0x30	; 48
 3f4:	89 83       	std	Y+1, r24	; 0x01
	UART_voidSendDataSynch(' ');
 3f6:	80 e2       	ldi	r24, 0x20	; 32
 3f8:	0e 94 75 00 	call	0xea	; 0xea <UART_voidSendDataSynch>
	
	UART_voidSendStringSynch("Enter the Password: ");
 3fc:	8a eb       	ldi	r24, 0xBA	; 186
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	0e 94 83 00 	call	0x106	; 0x106 <UART_voidSendStringSynch>
	UART_voidReceiveNumberSynch(&pass);
 404:	81 e8       	ldi	r24, 0x81	; 129
 406:	91 e0       	ldi	r25, 0x01	; 1
 408:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UART_voidReceiveNumberSynch>
	UART_voidSendDataSynch(' ');
 40c:	80 e2       	ldi	r24, 0x20	; 32
 40e:	0e 94 75 00 	call	0xea	; 0xea <UART_voidSendDataSynch>
	
	if(pass == users[id].password)
 412:	e9 81       	ldd	r30, Y+1	; 0x01
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	ee 0f       	add	r30, r30
 418:	ff 1f       	adc	r31, r31
 41a:	ee 0f       	add	r30, r30
 41c:	ff 1f       	adc	r31, r31
 41e:	e7 5a       	subi	r30, 0xA7	; 167
 420:	fe 4f       	sbci	r31, 0xFE	; 254
 422:	82 81       	ldd	r24, Z+2	; 0x02
 424:	93 81       	ldd	r25, Z+3	; 0x03
 426:	81 58       	subi	r24, 0x81	; 129
 428:	91 40       	sbci	r25, 0x01	; 1
 42a:	09 f0       	breq	.+2      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42c:	61 c0       	rjmp	.+194    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
	{
		UART_voidSendStringSynch("1. Edit Your User Name.	2. Edit Your Password.	 3. exit the edit. ");
 42e:	8f ec       	ldi	r24, 0xCF	; 207
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 83 00 	call	0x106	; 0x106 <UART_voidSendStringSynch>
		UART_voidSendStringSynch("Choose a choice: ");
 436:	80 e6       	ldi	r24, 0x60	; 96
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 83 00 	call	0x106	; 0x106 <UART_voidSendStringSynch>
		UART_u8ReceiveDataSynch(&choose);
 43e:	ce 01       	movw	r24, r28
 440:	02 96       	adiw	r24, 0x02	; 2
 442:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_u8ReceiveDataSynch>
		UART_voidSendDataSynch(' ');
 446:	80 e2       	ldi	r24, 0x20	; 32
 448:	0e 94 75 00 	call	0xea	; 0xea <UART_voidSendDataSynch>
		
		switch(choose){
 44c:	8a 81       	ldd	r24, Y+2	; 0x02
 44e:	82 33       	cpi	r24, 0x32	; 50
 450:	59 f1       	breq	.+86     	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
 452:	83 33       	cpi	r24, 0x33	; 51
 454:	09 f4       	brne	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 456:	50 c0       	rjmp	.+160    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 458:	81 33       	cpi	r24, 0x31	; 49
 45a:	09 f0       	breq	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 45c:	4d c0       	rjmp	.+154    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
			case '1':
				UART_voidSendStringSynch("Enter Your New User Name: ");
 45e:	82 e1       	ldi	r24, 0x12	; 18
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	0e 94 83 00 	call	0x106	; 0x106 <UART_voidSendStringSynch>
				UART_voidReceiveStringSynch(*(Buffer+id), MAX_NAME_SIZE);
 466:	e9 81       	ldd	r30, Y+1	; 0x01
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	ee 0f       	add	r30, r30
 46c:	ff 1f       	adc	r31, r31
 46e:	eb 56       	subi	r30, 0x6B	; 107
 470:	fe 4f       	sbci	r31, 0xFE	; 254
 472:	64 e1       	ldi	r22, 0x14	; 20
 474:	80 81       	ld	r24, Z
 476:	91 81       	ldd	r25, Z+1	; 0x01
 478:	0e 94 d5 00 	call	0x1aa	; 0x1aa <UART_voidReceiveStringSynch>
				users[id].name = *(Buffer+id);
 47c:	89 81       	ldd	r24, Y+1	; 0x01
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	dc 01       	movw	r26, r24
 482:	aa 0f       	add	r26, r26
 484:	bb 1f       	adc	r27, r27
 486:	aa 0f       	add	r26, r26
 488:	bb 1f       	adc	r27, r27
 48a:	a7 5a       	subi	r26, 0xA7	; 167
 48c:	be 4f       	sbci	r27, 0xFE	; 254
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	fc 01       	movw	r30, r24
 494:	eb 56       	subi	r30, 0x6B	; 107
 496:	fe 4f       	sbci	r31, 0xFE	; 254
 498:	80 81       	ld	r24, Z
 49a:	91 81       	ldd	r25, Z+1	; 0x01
 49c:	8d 93       	st	X+, r24
 49e:	9c 93       	st	X, r25
				UART_voidSendDataSynch(' ');
 4a0:	80 e2       	ldi	r24, 0x20	; 32
 4a2:	0e 94 75 00 	call	0xea	; 0xea <UART_voidSendDataSynch>
				break;
 4a6:	28 c0       	rjmp	.+80     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
			case '2':
				UART_voidSendStringSynch("Enter Your New Password: ");
 4a8:	8d e2       	ldi	r24, 0x2D	; 45
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	0e 94 83 00 	call	0x106	; 0x106 <UART_voidSendStringSynch>
				UART_voidReceiveNumberSynch(pass+id);
 4b0:	89 81       	ldd	r24, Y+1	; 0x01
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	8f 57       	subi	r24, 0x7F	; 127
 4ba:	9e 4f       	sbci	r25, 0xFE	; 254
 4bc:	0e 94 fe 00 	call	0x1fc	; 0x1fc <UART_voidReceiveNumberSynch>
				users[id].password = pass[id];
 4c0:	89 81       	ldd	r24, Y+1	; 0x01
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	dc 01       	movw	r26, r24
 4c6:	aa 0f       	add	r26, r26
 4c8:	bb 1f       	adc	r27, r27
 4ca:	aa 0f       	add	r26, r26
 4cc:	bb 1f       	adc	r27, r27
 4ce:	a7 5a       	subi	r26, 0xA7	; 167
 4d0:	be 4f       	sbci	r27, 0xFE	; 254
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	fc 01       	movw	r30, r24
 4d8:	ef 57       	subi	r30, 0x7F	; 127
 4da:	fe 4f       	sbci	r31, 0xFE	; 254
 4dc:	80 81       	ld	r24, Z
 4de:	91 81       	ldd	r25, Z+1	; 0x01
 4e0:	13 96       	adiw	r26, 0x03	; 3
 4e2:	9c 93       	st	X, r25
 4e4:	8e 93       	st	-X, r24
 4e6:	12 97       	sbiw	r26, 0x02	; 2
				UART_voidSendDataSynch(' ');
 4e8:	80 e2       	ldi	r24, 0x20	; 32
 4ea:	0e 94 75 00 	call	0xea	; 0xea <UART_voidSendDataSynch>
				break;
 4ee:	04 c0       	rjmp	.+8      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
				return;
		}
	}
	else
	{
		UART_voidSendStringSynch("Wrong Password!");
 4f0:	87 e4       	ldi	r24, 0x47	; 71
 4f2:	91 e0       	ldi	r25, 0x01	; 1
 4f4:	0e 94 83 00 	call	0x106	; 0x106 <UART_voidSendStringSynch>
	}
	
}
 4f8:	0f 90       	pop	r0
 4fa:	0f 90       	pop	r0
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	08 95       	ret

00000502 <Show>:
void Show(){
 502:	cf 93       	push	r28
 504:	df 93       	push	r29
 506:	1f 92       	push	r1
 508:	cd b7       	in	r28, 0x3d	; 61
 50a:	de b7       	in	r29, 0x3e	; 62
	u8 id;
	//UART_voidSendDataSynch('\n');
	
	UART_voidSendStringSynch("Enter Your ID ");
 50c:	8b ea       	ldi	r24, 0xAB	; 171
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 83 00 	call	0x106	; 0x106 <UART_voidSendStringSynch>
	UART_u8ReceiveDataSynch(&id);
 514:	ce 01       	movw	r24, r28
 516:	01 96       	adiw	r24, 0x01	; 1
 518:	0e 94 7c 00 	call	0xf8	; 0xf8 <UART_u8ReceiveDataSynch>
	id -= '0';
 51c:	89 81       	ldd	r24, Y+1	; 0x01
 51e:	80 53       	subi	r24, 0x30	; 48
 520:	89 83       	std	Y+1, r24	; 0x01
	UART_voidSendDataSynch(' ');
 522:	80 e2       	ldi	r24, 0x20	; 32
 524:	0e 94 75 00 	call	0xea	; 0xea <UART_voidSendDataSynch>
	
	UART_voidSendStringSynch("Your User Name: ");
 528:	88 e7       	ldi	r24, 0x78	; 120
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	0e 94 83 00 	call	0x106	; 0x106 <UART_voidSendStringSynch>
	UART_voidSendStringSynch(users[id].name);
 530:	e9 81       	ldd	r30, Y+1	; 0x01
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	ee 0f       	add	r30, r30
 536:	ff 1f       	adc	r31, r31
 538:	ee 0f       	add	r30, r30
 53a:	ff 1f       	adc	r31, r31
 53c:	e7 5a       	subi	r30, 0xA7	; 167
 53e:	fe 4f       	sbci	r31, 0xFE	; 254
 540:	80 81       	ld	r24, Z
 542:	91 81       	ldd	r25, Z+1	; 0x01
 544:	0e 94 83 00 	call	0x106	; 0x106 <UART_voidSendStringSynch>
	UART_voidSendDataSynch(' ');
 548:	80 e2       	ldi	r24, 0x20	; 32
 54a:	0e 94 75 00 	call	0xea	; 0xea <UART_voidSendDataSynch>
	
	UART_voidSendStringSynch("Your Password: ");
 54e:	8f e8       	ldi	r24, 0x8F	; 143
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	0e 94 83 00 	call	0x106	; 0x106 <UART_voidSendStringSynch>
	UART_voidSendNumberSynch(users[id].password);
 556:	e9 81       	ldd	r30, Y+1	; 0x01
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	ee 0f       	add	r30, r30
 55c:	ff 1f       	adc	r31, r31
 55e:	ee 0f       	add	r30, r30
 560:	ff 1f       	adc	r31, r31
 562:	e7 5a       	subi	r30, 0xA7	; 167
 564:	fe 4f       	sbci	r31, 0xFE	; 254
 566:	82 81       	ldd	r24, Z+2	; 0x02
 568:	93 81       	ldd	r25, Z+3	; 0x03
 56a:	0e 94 99 00 	call	0x132	; 0x132 <UART_voidSendNumberSynch>
	UART_voidSendDataSynch(' ');
 56e:	80 e2       	ldi	r24, 0x20	; 32
 570:	0e 94 75 00 	call	0xea	; 0xea <UART_voidSendDataSynch>
	
 574:	0f 90       	pop	r0
 576:	df 91       	pop	r29
 578:	cf 91       	pop	r28
 57a:	08 95       	ret

0000057c <__udivmodhi4>:
 57c:	aa 1b       	sub	r26, r26
 57e:	bb 1b       	sub	r27, r27
 580:	51 e1       	ldi	r21, 0x11	; 17
 582:	07 c0       	rjmp	.+14     	; 0x592 <__udivmodhi4_ep>

00000584 <__udivmodhi4_loop>:
 584:	aa 1f       	adc	r26, r26
 586:	bb 1f       	adc	r27, r27
 588:	a6 17       	cp	r26, r22
 58a:	b7 07       	cpc	r27, r23
 58c:	10 f0       	brcs	.+4      	; 0x592 <__udivmodhi4_ep>
 58e:	a6 1b       	sub	r26, r22
 590:	b7 0b       	sbc	r27, r23

00000592 <__udivmodhi4_ep>:
 592:	88 1f       	adc	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	5a 95       	dec	r21
 598:	a9 f7       	brne	.-22     	; 0x584 <__udivmodhi4_loop>
 59a:	80 95       	com	r24
 59c:	90 95       	com	r25
 59e:	bc 01       	movw	r22, r24
 5a0:	cd 01       	movw	r24, r26
 5a2:	08 95       	ret

000005a4 <__umulhisi3>:
 5a4:	a2 9f       	mul	r26, r18
 5a6:	b0 01       	movw	r22, r0
 5a8:	b3 9f       	mul	r27, r19
 5aa:	c0 01       	movw	r24, r0
 5ac:	a3 9f       	mul	r26, r19
 5ae:	70 0d       	add	r23, r0
 5b0:	81 1d       	adc	r24, r1
 5b2:	11 24       	eor	r1, r1
 5b4:	91 1d       	adc	r25, r1
 5b6:	b2 9f       	mul	r27, r18
 5b8:	70 0d       	add	r23, r0
 5ba:	81 1d       	adc	r24, r1
 5bc:	11 24       	eor	r1, r1
 5be:	91 1d       	adc	r25, r1
 5c0:	08 95       	ret

000005c2 <_exit>:
 5c2:	f8 94       	cli

000005c4 <__stop_program>:
 5c4:	ff cf       	rjmp	.-2      	; 0x5c4 <__stop_program>
