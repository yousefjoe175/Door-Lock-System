
IMT project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000035a  00800060  00000f02  00000f96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000108  008003ba  008003ba  000012f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  0000135c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000218e  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c9c  00000000  00000000  000036fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001320  00000000  00000000  00004396  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000510  00000000  00000000  000056b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000087b  00000000  00000000  00005bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012f2  00000000  00000000  00006443  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00007735  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3b       	cpi	r26, 0xBA	; 186
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	24 e0       	ldi	r18, 0x04	; 4
  78:	aa eb       	ldi	r26, 0xBA	; 186
  7a:	b3 e0       	ldi	r27, 0x03	; 3
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3c       	cpi	r26, 0xC2	; 194
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <main>
  8a:	0c 94 7f 07 	jmp	0xefe	; 0xefe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EEPROM_voidInit>:

#include "eeprom.h"

void EEPROM_voidInit(void)
{
	i2c_init_master();
  92:	0e 94 92 00 	call	0x124	; 0x124 <i2c_init_master>
  96:	08 95       	ret

00000098 <EEPROM_voidSendDataByte>:
}



void EEPROM_voidSendDataByte(u16 address, u8 data)
{
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	ec 01       	movw	r28, r24
  a0:	16 2f       	mov	r17, r22
    i2c_start();
  a2:	0e 94 9a 00 	call	0x134	; 0x134 <i2c_start>
	i2c_send_slave_address_with_write_req( 0b01010000 | A2<<2 | ((address & 0x0300)>>8)  );
  a6:	ce 01       	movw	r24, r28
  a8:	88 27       	eor	r24, r24
  aa:	93 70       	andi	r25, 0x03	; 3
  ac:	89 2f       	mov	r24, r25
  ae:	80 65       	ori	r24, 0x50	; 80
  b0:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_send_slave_address_with_write_req>
	i2c_write_byte((u8)address);
  b4:	8c 2f       	mov	r24, r28
  b6:	0e 94 c7 00 	call	0x18e	; 0x18e <i2c_write_byte>
	i2c_write_byte(data);
  ba:	81 2f       	mov	r24, r17
  bc:	0e 94 c7 00 	call	0x18e	; 0x18e <i2c_write_byte>
	i2c_stop();
  c0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c4:	8f e1       	ldi	r24, 0x1F	; 31
  c6:	9e e4       	ldi	r25, 0x4E	; 78
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <EEPROM_voidSendDataByte+0x30>
  cc:	00 c0       	rjmp	.+0      	; 0xce <EEPROM_voidSendDataByte+0x36>
  ce:	00 00       	nop
	_delay_ms(10);
    return;
}
  d0:	df 91       	pop	r29
  d2:	cf 91       	pop	r28
  d4:	1f 91       	pop	r17
  d6:	08 95       	ret

000000d8 <EEPROM_u8ReadDataByte>:



u8 EEPROM_u8ReadDataByte(u16 address)
{
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	8c 01       	movw	r16, r24
	u8 data;
	i2c_start();
  e0:	0e 94 9a 00 	call	0x134	; 0x134 <i2c_start>
	i2c_send_slave_address_with_write_req( 0b01010000 | A2<<2 | ((address & 0x0300)>>8)  );
  e4:	c8 01       	movw	r24, r16
  e6:	88 27       	eor	r24, r24
  e8:	93 70       	andi	r25, 0x03	; 3
  ea:	c9 2f       	mov	r28, r25
  ec:	c0 65       	ori	r28, 0x50	; 80
  ee:	8c 2f       	mov	r24, r28
  f0:	0e 94 ae 00 	call	0x15c	; 0x15c <i2c_send_slave_address_with_write_req>
    i2c_write_byte((u8)address);
  f4:	80 2f       	mov	r24, r16
  f6:	0e 94 c7 00 	call	0x18e	; 0x18e <i2c_write_byte>
	i2c_repeated_start();
  fa:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_repeated_start>
	i2c_send_slave_address_with_read_req( 0b01010000 | A2<<2 | ((address & 0x0300)>>8)  );
  fe:	8c 2f       	mov	r24, r28
 100:	0e 94 ba 00 	call	0x174	; 0x174 <i2c_send_slave_address_with_read_req>
	data = i2c_read_byte();
 104:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <i2c_read_byte>
 108:	c8 2f       	mov	r28, r24
	i2c_stop();
 10a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <i2c_stop>
 10e:	8f e1       	ldi	r24, 0x1F	; 31
 110:	9e e4       	ldi	r25, 0x4E	; 78
 112:	01 97       	sbiw	r24, 0x01	; 1
 114:	f1 f7       	brne	.-4      	; 0x112 <EEPROM_u8ReadDataByte+0x3a>
 116:	00 c0       	rjmp	.+0      	; 0x118 <EEPROM_u8ReadDataByte+0x40>
 118:	00 00       	nop
	_delay_ms(10);
    return data;
}
 11a:	8c 2f       	mov	r24, r28
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	08 95       	ret

00000124 <i2c_init_master>:
}

void i2c_init_slave(void)
{
	TWAR = (1<< 1);          // my address = 0x01
	TWCR = (1<< TWEN);       //enable I2C
 124:	87 e0       	ldi	r24, 0x07	; 7
 126:	80 b9       	out	0x00, r24	; 0
 128:	81 b1       	in	r24, 0x01	; 1
 12a:	8c 7f       	andi	r24, 0xFC	; 252
 12c:	81 b9       	out	0x01, r24	; 1
 12e:	84 e0       	ldi	r24, 0x04	; 4
 130:	86 bf       	out	0x36, r24	; 54
 132:	08 95       	ret

00000134 <i2c_start>:
}


void i2c_start(void)
{
	TWCR = (1<< TWINT) | (1<< TWSTA) | (1<< TWEN);   // Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
 134:	84 ea       	ldi	r24, 0xA4	; 164
 136:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));                     // Wait till start condition is transmitted
 138:	06 b6       	in	r0, 0x36	; 54
 13a:	07 fe       	sbrs	r0, 7
 13c:	fd cf       	rjmp	.-6      	; 0x138 <i2c_start+0x4>
	while((TWSR & 0xF8) != START_ACK);               // Check for the acknowledgment
 13e:	81 b1       	in	r24, 0x01	; 1
 140:	88 7f       	andi	r24, 0xF8	; 248
 142:	88 30       	cpi	r24, 0x08	; 8
 144:	e1 f7       	brne	.-8      	; 0x13e <i2c_start+0xa>
	return;
}
 146:	08 95       	ret

00000148 <i2c_repeated_start>:



void i2c_repeated_start(void)
{
	TWCR = (1<< TWINT) | (1<< TWSTA) | (1<< TWEN);      // Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
 148:	84 ea       	ldi	r24, 0xA4	; 164
 14a:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<< TWINT)));                       // wait till restart condition is transmitted
 14c:	06 b6       	in	r0, 0x36	; 54
 14e:	07 fe       	sbrs	r0, 7
 150:	fd cf       	rjmp	.-6      	; 0x14c <i2c_repeated_start+0x4>
	while((TWSR & 0xF8) != REP_START_ACK);              // Check for the acknowledgment
 152:	81 b1       	in	r24, 0x01	; 1
 154:	88 7f       	andi	r24, 0xF8	; 248
 156:	80 31       	cpi	r24, 0x10	; 16
 158:	e1 f7       	brne	.-8      	; 0x152 <i2c_repeated_start+0xa>
	return;
}
 15a:	08 95       	ret

0000015c <i2c_send_slave_address_with_write_req>:



void i2c_send_slave_address_with_write_req(unsigned char slave_address)
{
	TWDR = (slave_address<< 1);                    //Address and write instruction
 15c:	88 0f       	add	r24, r24
 15e:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);                 // Clear TWI interrupt flag, Enable TWI
 160:	84 e8       	ldi	r24, 0x84	; 132
 162:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));                  // Wait till complete TWDR byte transmitted
 164:	06 b6       	in	r0, 0x36	; 54
 166:	07 fe       	sbrs	r0, 7
 168:	fd cf       	rjmp	.-6      	; 0x164 <i2c_send_slave_address_with_write_req+0x8>
	while((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK);  // Check for the acknowledgment
 16a:	81 b1       	in	r24, 0x01	; 1
 16c:	88 7f       	andi	r24, 0xF8	; 248
 16e:	88 31       	cpi	r24, 0x18	; 24
 170:	e1 f7       	brne	.-8      	; 0x16a <i2c_send_slave_address_with_write_req+0xe>
	return;
}
 172:	08 95       	ret

00000174 <i2c_send_slave_address_with_read_req>:



void i2c_send_slave_address_with_read_req(unsigned char slave_address)
{
	TWDR = (slave_address<< 1);                     // Address
 174:	88 0f       	add	r24, r24
 176:	83 b9       	out	0x03, r24	; 3
	TWDR |= (1<< 0);                                // read instruction
 178:	18 9a       	sbi	0x03, 0	; 3
	TWCR = (1<< TWINT) | (1<< TWEN);                // Clear TWI interrupt flag,Enable TWI
 17a:	84 e8       	ldi	r24, 0x84	; 132
 17c:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<< TWINT)));                  // Wait till complete TWDR byte received
 17e:	06 b6       	in	r0, 0x36	; 54
 180:	07 fe       	sbrs	r0, 7
 182:	fd cf       	rjmp	.-6      	; 0x17e <i2c_send_slave_address_with_read_req+0xa>
	while((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK);   // Check for the acknowledgment
 184:	81 b1       	in	r24, 0x01	; 1
 186:	88 7f       	andi	r24, 0xF8	; 248
 188:	80 34       	cpi	r24, 0x40	; 64
 18a:	e1 f7       	brne	.-8      	; 0x184 <i2c_send_slave_address_with_read_req+0x10>
}
 18c:	08 95       	ret

0000018e <i2c_write_byte>:



void i2c_write_byte(unsigned char byte)
{
	TWDR = byte;                            // put data in TWDR
 18e:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<< TWINT) | (1<< TWEN);        // Clear TWI interrupt flag,Enable TWI
 190:	84 e8       	ldi	r24, 0x84	; 132
 192:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<< TWINT)));          // Wait till complete TWDR byte transmitted
 194:	06 b6       	in	r0, 0x36	; 54
 196:	07 fe       	sbrs	r0, 7
 198:	fd cf       	rjmp	.-6      	; 0x194 <i2c_write_byte+0x6>
	while((TWSR & 0xF8) != WR_BYTE_ACK);    // Check for the acknowledgment
 19a:	81 b1       	in	r24, 0x01	; 1
 19c:	88 7f       	andi	r24, 0xF8	; 248
 19e:	88 32       	cpi	r24, 0x28	; 40
 1a0:	e1 f7       	brne	.-8      	; 0x19a <i2c_write_byte+0xc>
	return;
}
 1a2:	08 95       	ret

000001a4 <i2c_read_byte>:



unsigned char i2c_read_byte(void)
{
	TWCR = (1<< TWINT) | (1<< TWEN);             // Clear TWI interrupt flag,Enable TWI
 1a4:	84 e8       	ldi	r24, 0x84	; 132
 1a6:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<< TWINT)));                // Wait till complete TWDR byte transmitted
 1a8:	06 b6       	in	r0, 0x36	; 54
 1aa:	07 fe       	sbrs	r0, 7
 1ac:	fd cf       	rjmp	.-6      	; 0x1a8 <i2c_read_byte+0x4>
	while((TWSR & 0xF8) != RD_BYTE_WITH_NACK);   // Check for the acknowledgment
 1ae:	81 b1       	in	r24, 0x01	; 1
 1b0:	88 7f       	andi	r24, 0xF8	; 248
 1b2:	88 35       	cpi	r24, 0x58	; 88
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <i2c_read_byte+0xa>
	return TWDR;
 1b6:	83 b1       	in	r24, 0x03	; 3
}
 1b8:	08 95       	ret

000001ba <i2c_stop>:



void i2c_stop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Clear TWI interrupt flag, Put stop condition on SDA,Enable TWI
 1ba:	84 e9       	ldi	r24, 0x94	; 148
 1bc:	86 bf       	out	0x36, r24	; 54
 1be:	08 95       	ret

000001c0 <main>:

int main (void)
{
	extern u8 choose;
	
	UART_voidInit();
 1c0:	0e 94 cc 02 	call	0x598	; 0x598 <UART_voidInit>
	DIO_voidSetPortDirection(DIO_PORTA, DIO_OUTPUT);
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 78 02 	call	0x4f0	; 0x4f0 <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(FAN_PORT,FAN_PIN,DIO_OUTPUT);
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	63 e0       	ldi	r22, 0x03	; 3
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <DIO_voidSetPinDirection>
	EEPROM_voidInit();
 1d6:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_voidInit>
    
	//check for previous data
	if(EEPROM_u8ReadDataByte(0) == 0){	//if there's a user stored in eeprom then get the number of users from the last address
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 6c 00 	call	0xd8	; 0xd8 <EEPROM_u8ReadDataByte>
 1e2:	89 2b       	or	r24, r25
 1e4:	c1 f4       	brne	.+48     	; 0x216 <main+0x56>
		
		counter = EEPROM_u8ReadDataByte(0x03FF);
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	93 e0       	ldi	r25, 0x03	; 3
 1ea:	0e 94 6c 00 	call	0xd8	; 0xd8 <EEPROM_u8ReadDataByte>
 1ee:	80 93 bc 03 	sts	0x03BC, r24	; 0x8003bc <counter>
		MovToStruct();
 1f2:	0e 94 1b 07 	call	0xe36	; 0xe36 <MovToStruct>
		UART_voidSendStringSynch("***** ");
 1f6:	80 e6       	ldi	r24, 0x60	; 96
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
		UART_voidSendStringSynch("The number of current users: ");
 1fe:	87 e6       	ldi	r24, 0x67	; 103
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
		UART_voidSendNumberSynch(counter);
 206:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <counter>
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <UART_voidSendNumberSynch>
		UART_voidSendDataSynch(' ');
 210:	80 e2       	ldi	r24, 0x20	; 32
 212:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_voidSendDataSynch>
	}


	
	while(1){
		UART_voidSendStringSynch("1. Enter new user name. ");
 216:	85 e8       	ldi	r24, 0x85	; 133
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
		UART_voidSendStringSynch("2. Sign In. ");
 21e:	8e e9       	ldi	r24, 0x9E	; 158
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
		UART_voidSendStringSynch("3. Edit current data. ");
 226:	8b ea       	ldi	r24, 0xAB	; 171
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
		UART_voidSendStringSynch("4. Show current data. ");
 22e:	82 ec       	ldi	r24, 0xC2	; 194
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
		UART_voidSendStringSynch("5. Exit the program. ");
 236:	89 ed       	ldi	r24, 0xD9	; 217
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
		UART_voidSendStringSynch("Choose a choice: ");
 23e:	8f ee       	ldi	r24, 0xEF	; 239
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
		UART_u8ReceiveDataSynch(&choose);			//enter '+' after you insert your choice
 246:	8d ea       	ldi	r24, 0xAD	; 173
 248:	94 e0       	ldi	r25, 0x04	; 4
 24a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <UART_u8ReceiveDataSynch>
		UART_voidSendDataSynch(choose);
 24e:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <choose>
 252:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_voidSendDataSynch>
		UART_voidSendDataSynch(' ');
 256:	80 e2       	ldi	r24, 0x20	; 32
 258:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_voidSendDataSynch>
		switch(choose){
 25c:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <choose>
 260:	83 33       	cpi	r24, 0x33	; 51
 262:	b9 f0       	breq	.+46     	; 0x292 <main+0xd2>
 264:	28 f4       	brcc	.+10     	; 0x270 <main+0xb0>
 266:	81 33       	cpi	r24, 0x31	; 49
 268:	41 f0       	breq	.+16     	; 0x27a <main+0xba>
 26a:	82 33       	cpi	r24, 0x32	; 50
 26c:	49 f0       	breq	.+18     	; 0x280 <main+0xc0>
 26e:	d3 cf       	rjmp	.-90     	; 0x216 <main+0x56>
 270:	84 33       	cpi	r24, 0x34	; 52
 272:	91 f0       	breq	.+36     	; 0x298 <main+0xd8>
 274:	85 33       	cpi	r24, 0x35	; 53
 276:	99 f0       	breq	.+38     	; 0x29e <main+0xde>
 278:	ce cf       	rjmp	.-100    	; 0x216 <main+0x56>
			case '1':
				new();
 27a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <new>
				break;
 27e:	cb cf       	rjmp	.-106    	; 0x216 <main+0x56>
			case '2':
				SignIn();
 280:	0e 94 3c 05 	call	0xa78	; 0xa78 <SignIn>
				if(lock == 2)
					break;
				if(lock == 1)
 284:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <lock>
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	29 f6       	brne	.-118    	; 0x216 <main+0x56>
					Light();
 28c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <Light>
 290:	c2 cf       	rjmp	.-124    	; 0x216 <main+0x56>
				break;
			case '3':
				Edit();
 292:	0e 94 b2 05 	call	0xb64	; 0xb64 <Edit>
				break;
 296:	bf cf       	rjmp	.-130    	; 0x216 <main+0x56>
			case '4':
				Show();
 298:	0e 94 57 06 	call	0xcae	; 0xcae <Show>
				break;
 29c:	bc cf       	rjmp	.-136    	; 0x216 <main+0x56>
			case '5':
				UART_voidSendStringSynch("OK, See You Later! ");
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>

		}
	}
	return 0;

}
 2a6:	08 95       	ret

000002a8 <DIO_voidSetPinDirection>:
		}

		return Local_u8PinValue;

	}
}
 2a8:	84 30       	cpi	r24, 0x04	; 4
 2aa:	08 f0       	brcs	.+2      	; 0x2ae <DIO_voidSetPinDirection+0x6>
 2ac:	73 c0       	rjmp	.+230    	; 0x394 <DIO_voidSetPinDirection+0xec>
 2ae:	68 30       	cpi	r22, 0x08	; 8
 2b0:	08 f0       	brcs	.+2      	; 0x2b4 <DIO_voidSetPinDirection+0xc>
 2b2:	70 c0       	rjmp	.+224    	; 0x394 <DIO_voidSetPinDirection+0xec>
 2b4:	44 23       	and	r20, r20
 2b6:	19 f0       	breq	.+6      	; 0x2be <DIO_voidSetPinDirection+0x16>
 2b8:	41 30       	cpi	r20, 0x01	; 1
 2ba:	c9 f1       	breq	.+114    	; 0x32e <DIO_voidSetPinDirection+0x86>
 2bc:	08 95       	ret
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	91 f0       	breq	.+36     	; 0x2e6 <DIO_voidSetPinDirection+0x3e>
 2c2:	28 f0       	brcs	.+10     	; 0x2ce <DIO_voidSetPinDirection+0x26>
 2c4:	82 30       	cpi	r24, 0x02	; 2
 2c6:	d9 f0       	breq	.+54     	; 0x2fe <DIO_voidSetPinDirection+0x56>
 2c8:	83 30       	cpi	r24, 0x03	; 3
 2ca:	29 f1       	breq	.+74     	; 0x316 <DIO_voidSetPinDirection+0x6e>
 2cc:	08 95       	ret
 2ce:	2a b3       	in	r18, 0x1a	; 26
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_voidSetPinDirection+0x32>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	6a 95       	dec	r22
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_voidSetPinDirection+0x2e>
 2de:	80 95       	com	r24
 2e0:	82 23       	and	r24, r18
 2e2:	8a bb       	out	0x1a, r24	; 26
 2e4:	08 95       	ret
 2e6:	27 b3       	in	r18, 0x17	; 23
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_voidSetPinDirection+0x4a>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	6a 95       	dec	r22
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_voidSetPinDirection+0x46>
 2f6:	80 95       	com	r24
 2f8:	82 23       	and	r24, r18
 2fa:	87 bb       	out	0x17, r24	; 23
 2fc:	08 95       	ret
 2fe:	24 b3       	in	r18, 0x14	; 20
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_voidSetPinDirection+0x62>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_voidSetPinDirection+0x5e>
 30e:	80 95       	com	r24
 310:	82 23       	and	r24, r18
 312:	84 bb       	out	0x14, r24	; 20
 314:	08 95       	ret
 316:	21 b3       	in	r18, 0x11	; 17
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	02 c0       	rjmp	.+4      	; 0x322 <DIO_voidSetPinDirection+0x7a>
 31e:	88 0f       	add	r24, r24
 320:	99 1f       	adc	r25, r25
 322:	6a 95       	dec	r22
 324:	e2 f7       	brpl	.-8      	; 0x31e <DIO_voidSetPinDirection+0x76>
 326:	80 95       	com	r24
 328:	82 23       	and	r24, r18
 32a:	81 bb       	out	0x11, r24	; 17
 32c:	08 95       	ret
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	89 f0       	breq	.+34     	; 0x354 <DIO_voidSetPinDirection+0xac>
 332:	28 f0       	brcs	.+10     	; 0x33e <DIO_voidSetPinDirection+0x96>
 334:	82 30       	cpi	r24, 0x02	; 2
 336:	c9 f0       	breq	.+50     	; 0x36a <DIO_voidSetPinDirection+0xc2>
 338:	83 30       	cpi	r24, 0x03	; 3
 33a:	11 f1       	breq	.+68     	; 0x380 <DIO_voidSetPinDirection+0xd8>
 33c:	08 95       	ret
 33e:	2a b3       	in	r18, 0x1a	; 26
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_voidSetPinDirection+0xa2>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_voidSetPinDirection+0x9e>
 34e:	82 2b       	or	r24, r18
 350:	8a bb       	out	0x1a, r24	; 26
 352:	08 95       	ret
 354:	27 b3       	in	r18, 0x17	; 23
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_voidSetPinDirection+0xb8>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	6a 95       	dec	r22
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_voidSetPinDirection+0xb4>
 364:	82 2b       	or	r24, r18
 366:	87 bb       	out	0x17, r24	; 23
 368:	08 95       	ret
 36a:	24 b3       	in	r18, 0x14	; 20
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	02 c0       	rjmp	.+4      	; 0x376 <DIO_voidSetPinDirection+0xce>
 372:	88 0f       	add	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	6a 95       	dec	r22
 378:	e2 f7       	brpl	.-8      	; 0x372 <DIO_voidSetPinDirection+0xca>
 37a:	82 2b       	or	r24, r18
 37c:	84 bb       	out	0x14, r24	; 20
 37e:	08 95       	ret
 380:	21 b3       	in	r18, 0x11	; 17
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_voidSetPinDirection+0xe4>
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_voidSetPinDirection+0xe0>
 390:	82 2b       	or	r24, r18
 392:	81 bb       	out	0x11, r24	; 17
 394:	08 95       	ret

00000396 <DIO_voidSetPinValue>:
 396:	84 30       	cpi	r24, 0x04	; 4
 398:	08 f0       	brcs	.+2      	; 0x39c <DIO_voidSetPinValue+0x6>
 39a:	a9 c0       	rjmp	.+338    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 39c:	68 30       	cpi	r22, 0x08	; 8
 39e:	08 f0       	brcs	.+2      	; 0x3a2 <DIO_voidSetPinValue+0xc>
 3a0:	a6 c0       	rjmp	.+332    	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 3a2:	41 30       	cpi	r20, 0x01	; 1
 3a4:	e9 f1       	breq	.+122    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3a6:	20 f0       	brcs	.+8      	; 0x3b0 <DIO_voidSetPinValue+0x1a>
 3a8:	42 30       	cpi	r20, 0x02	; 2
 3aa:	09 f4       	brne	.+2      	; 0x3ae <DIO_voidSetPinValue+0x18>
 3ac:	6d c0       	rjmp	.+218    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 3ae:	08 95       	ret
 3b0:	81 30       	cpi	r24, 0x01	; 1
 3b2:	91 f0       	breq	.+36     	; 0x3d8 <DIO_voidSetPinValue+0x42>
 3b4:	28 f0       	brcs	.+10     	; 0x3c0 <DIO_voidSetPinValue+0x2a>
 3b6:	82 30       	cpi	r24, 0x02	; 2
 3b8:	d9 f0       	breq	.+54     	; 0x3f0 <DIO_voidSetPinValue+0x5a>
 3ba:	83 30       	cpi	r24, 0x03	; 3
 3bc:	29 f1       	breq	.+74     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3be:	08 95       	ret
 3c0:	2b b3       	in	r18, 0x1b	; 27
 3c2:	81 e0       	ldi	r24, 0x01	; 1
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_voidSetPinValue+0x36>
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	6a 95       	dec	r22
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_voidSetPinValue+0x32>
 3d0:	80 95       	com	r24
 3d2:	82 23       	and	r24, r18
 3d4:	8b bb       	out	0x1b, r24	; 27
 3d6:	08 95       	ret
 3d8:	28 b3       	in	r18, 0x18	; 24
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_voidSetPinValue+0x4e>
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	6a 95       	dec	r22
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_voidSetPinValue+0x4a>
 3e8:	80 95       	com	r24
 3ea:	82 23       	and	r24, r18
 3ec:	88 bb       	out	0x18, r24	; 24
 3ee:	08 95       	ret
 3f0:	25 b3       	in	r18, 0x15	; 21
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	02 c0       	rjmp	.+4      	; 0x3fc <DIO_voidSetPinValue+0x66>
 3f8:	88 0f       	add	r24, r24
 3fa:	99 1f       	adc	r25, r25
 3fc:	6a 95       	dec	r22
 3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <DIO_voidSetPinValue+0x62>
 400:	80 95       	com	r24
 402:	82 23       	and	r24, r18
 404:	85 bb       	out	0x15, r24	; 21
 406:	08 95       	ret
 408:	22 b3       	in	r18, 0x12	; 18
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 418:	80 95       	com	r24
 41a:	82 23       	and	r24, r18
 41c:	82 bb       	out	0x12, r24	; 18
 41e:	08 95       	ret
 420:	81 30       	cpi	r24, 0x01	; 1
 422:	89 f0       	breq	.+34     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 424:	28 f0       	brcs	.+10     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 426:	82 30       	cpi	r24, 0x02	; 2
 428:	c9 f0       	breq	.+50     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 42a:	83 30       	cpi	r24, 0x03	; 3
 42c:	11 f1       	breq	.+68     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 42e:	08 95       	ret
 430:	2b b3       	in	r18, 0x1b	; 27
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	02 c0       	rjmp	.+4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	6a 95       	dec	r22
 43e:	e2 f7       	brpl	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 440:	82 2b       	or	r24, r18
 442:	8b bb       	out	0x1b, r24	; 27
 444:	08 95       	ret
 446:	28 b3       	in	r18, 0x18	; 24
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	6a 95       	dec	r22
 454:	e2 f7       	brpl	.-8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 456:	82 2b       	or	r24, r18
 458:	88 bb       	out	0x18, r24	; 24
 45a:	08 95       	ret
 45c:	25 b3       	in	r18, 0x15	; 21
 45e:	81 e0       	ldi	r24, 0x01	; 1
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	02 c0       	rjmp	.+4      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 464:	88 0f       	add	r24, r24
 466:	99 1f       	adc	r25, r25
 468:	6a 95       	dec	r22
 46a:	e2 f7       	brpl	.-8      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 46c:	82 2b       	or	r24, r18
 46e:	85 bb       	out	0x15, r24	; 21
 470:	08 95       	ret
 472:	22 b3       	in	r18, 0x12	; 18
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	02 c0       	rjmp	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	6a 95       	dec	r22
 480:	e2 f7       	brpl	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 482:	82 2b       	or	r24, r18
 484:	82 bb       	out	0x12, r24	; 18
 486:	08 95       	ret
 488:	81 30       	cpi	r24, 0x01	; 1
 48a:	89 f0       	breq	.+34     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 48c:	28 f0       	brcs	.+10     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
 48e:	82 30       	cpi	r24, 0x02	; 2
 490:	c9 f0       	breq	.+50     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 492:	83 30       	cpi	r24, 0x03	; 3
 494:	11 f1       	breq	.+68     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
 496:	08 95       	ret
 498:	2b b3       	in	r18, 0x1b	; 27
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	6a 95       	dec	r22
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 4a8:	82 27       	eor	r24, r18
 4aa:	8b bb       	out	0x1b, r24	; 27
 4ac:	08 95       	ret
 4ae:	28 b3       	in	r18, 0x18	; 24
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	6a 95       	dec	r22
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4be:	82 27       	eor	r24, r18
 4c0:	88 bb       	out	0x18, r24	; 24
 4c2:	08 95       	ret
 4c4:	25 b3       	in	r18, 0x15	; 21
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	6a 95       	dec	r22
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4d4:	82 27       	eor	r24, r18
 4d6:	85 bb       	out	0x15, r24	; 21
 4d8:	08 95       	ret
 4da:	22 b3       	in	r18, 0x12	; 18
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	6a 95       	dec	r22
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
 4ea:	82 27       	eor	r24, r18
 4ec:	82 bb       	out	0x12, r24	; 18
 4ee:	08 95       	ret

000004f0 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8PortNB,u8 Copy_u8PortDirection){
	/* input validation */
	if(Copy_u8PortNB>DIO_PORTD ){
 4f0:	84 30       	cpi	r24, 0x04	; 4
 4f2:	38 f5       	brcc	.+78     	; 0x542 <DIO_voidSetPortDirection+0x52>
		#warning "You Entered invalid inputs"
		return;
	}
	else
	{
		switch(Copy_u8PortDirection){
 4f4:	66 23       	and	r22, r22
 4f6:	b1 f0       	breq	.+44     	; 0x524 <DIO_voidSetPortDirection+0x34>
 4f8:	61 30       	cpi	r22, 0x01	; 1
 4fa:	19 f5       	brne	.+70     	; 0x542 <DIO_voidSetPortDirection+0x52>
			case DIO_OUTPUT:
			switch (Copy_u8PortNB){
 4fc:	81 30       	cpi	r24, 0x01	; 1
 4fe:	49 f0       	breq	.+18     	; 0x512 <DIO_voidSetPortDirection+0x22>
 500:	28 f0       	brcs	.+10     	; 0x50c <DIO_voidSetPortDirection+0x1c>
 502:	82 30       	cpi	r24, 0x02	; 2
 504:	49 f0       	breq	.+18     	; 0x518 <DIO_voidSetPortDirection+0x28>
 506:	83 30       	cpi	r24, 0x03	; 3
 508:	51 f0       	breq	.+20     	; 0x51e <DIO_voidSetPortDirection+0x2e>
 50a:	08 95       	ret
				case DIO_PORTA: DDRA = 0xff; break;
 50c:	8f ef       	ldi	r24, 0xFF	; 255
 50e:	8a bb       	out	0x1a, r24	; 26
 510:	08 95       	ret
				case DIO_PORTB: DDRB = 0xff; break;
 512:	8f ef       	ldi	r24, 0xFF	; 255
 514:	87 bb       	out	0x17, r24	; 23
 516:	08 95       	ret
				case DIO_PORTC: DDRC = 0xff; break;
 518:	8f ef       	ldi	r24, 0xFF	; 255
 51a:	84 bb       	out	0x14, r24	; 20
 51c:	08 95       	ret
				case DIO_PORTD: DDRD = 0xff; break;
 51e:	8f ef       	ldi	r24, 0xFF	; 255
 520:	81 bb       	out	0x11, r24	; 17
 522:	08 95       	ret
			}
			break;

			case  DIO_INPUT:
			switch (Copy_u8PortNB){
 524:	81 30       	cpi	r24, 0x01	; 1
 526:	41 f0       	breq	.+16     	; 0x538 <DIO_voidSetPortDirection+0x48>
 528:	28 f0       	brcs	.+10     	; 0x534 <DIO_voidSetPortDirection+0x44>
 52a:	82 30       	cpi	r24, 0x02	; 2
 52c:	39 f0       	breq	.+14     	; 0x53c <DIO_voidSetPortDirection+0x4c>
 52e:	83 30       	cpi	r24, 0x03	; 3
 530:	39 f0       	breq	.+14     	; 0x540 <DIO_voidSetPortDirection+0x50>
 532:	08 95       	ret
				case DIO_PORTA: DDRA = 0x00; break;
 534:	1a ba       	out	0x1a, r1	; 26
 536:	08 95       	ret
				case DIO_PORTB: DDRB = 0x00; break;
 538:	17 ba       	out	0x17, r1	; 23
 53a:	08 95       	ret
				case DIO_PORTC: DDRC = 0x00; break;
 53c:	14 ba       	out	0x14, r1	; 20
 53e:	08 95       	ret
				case DIO_PORTD: DDRD = 0x00; break;
 540:	11 ba       	out	0x11, r1	; 17
 542:	08 95       	ret

00000544 <DIO_voidSetPortValue>:
}

/* set the value of a port chosen by the user */
void DIO_voidSetPortValue(u8 Copy_u8PortNB, u8 Copy_u8Value){
/* input validation */
	if(Copy_u8PortNB>DIO_PORTD ){
 544:	84 30       	cpi	r24, 0x04	; 4
 546:	38 f5       	brcc	.+78     	; 0x596 <DIO_voidSetPortValue+0x52>
		#warning "You Entered invalid inputs"
		return;
	}
	else
	{
		switch(Copy_u8Value){
 548:	66 23       	and	r22, r22
 54a:	b1 f0       	breq	.+44     	; 0x578 <DIO_voidSetPortValue+0x34>
 54c:	61 30       	cpi	r22, 0x01	; 1
 54e:	19 f5       	brne	.+70     	; 0x596 <DIO_voidSetPortValue+0x52>
			case DIO_HIGH:
			switch (Copy_u8PortNB){
 550:	81 30       	cpi	r24, 0x01	; 1
 552:	49 f0       	breq	.+18     	; 0x566 <DIO_voidSetPortValue+0x22>
 554:	28 f0       	brcs	.+10     	; 0x560 <DIO_voidSetPortValue+0x1c>
 556:	82 30       	cpi	r24, 0x02	; 2
 558:	49 f0       	breq	.+18     	; 0x56c <DIO_voidSetPortValue+0x28>
 55a:	83 30       	cpi	r24, 0x03	; 3
 55c:	51 f0       	breq	.+20     	; 0x572 <DIO_voidSetPortValue+0x2e>
 55e:	08 95       	ret
				case DIO_PORTA: PORTA = 0xff; break;
 560:	8f ef       	ldi	r24, 0xFF	; 255
 562:	8b bb       	out	0x1b, r24	; 27
 564:	08 95       	ret
				case DIO_PORTB: PORTB = 0xff; break;
 566:	8f ef       	ldi	r24, 0xFF	; 255
 568:	88 bb       	out	0x18, r24	; 24
 56a:	08 95       	ret
				case DIO_PORTC: PORTC = 0xff; break;
 56c:	8f ef       	ldi	r24, 0xFF	; 255
 56e:	85 bb       	out	0x15, r24	; 21
 570:	08 95       	ret
				case DIO_PORTD: PORTD = 0xff; break;
 572:	8f ef       	ldi	r24, 0xFF	; 255
 574:	82 bb       	out	0x12, r24	; 18
 576:	08 95       	ret
			}
			break;

			case  DIO_LOW:
			switch (Copy_u8PortNB){
 578:	81 30       	cpi	r24, 0x01	; 1
 57a:	41 f0       	breq	.+16     	; 0x58c <DIO_voidSetPortValue+0x48>
 57c:	28 f0       	brcs	.+10     	; 0x588 <DIO_voidSetPortValue+0x44>
 57e:	82 30       	cpi	r24, 0x02	; 2
 580:	39 f0       	breq	.+14     	; 0x590 <DIO_voidSetPortValue+0x4c>
 582:	83 30       	cpi	r24, 0x03	; 3
 584:	39 f0       	breq	.+14     	; 0x594 <DIO_voidSetPortValue+0x50>
 586:	08 95       	ret
				case DIO_PORTA: PORTA = 0x00; break;
 588:	1b ba       	out	0x1b, r1	; 27
 58a:	08 95       	ret
				case DIO_PORTB: PORTB = 0x00; break;
 58c:	18 ba       	out	0x18, r1	; 24
 58e:	08 95       	ret
				case DIO_PORTC: PORTC = 0x00; break;
 590:	15 ba       	out	0x15, r1	; 21
 592:	08 95       	ret
				case DIO_PORTD: PORTD = 0x00; break;
 594:	12 ba       	out	0x12, r1	; 18
 596:	08 95       	ret

00000598 <UART_voidInit>:
void UART_voidInit(void){
	u8  ucsrb, ucsrc;	
	ucsrb = ucsrb |(1<<TXEN | 1<<RXEN);		//Enable TX and RX.    //we didn't set the interrupts yet
	ucsrc = ucsrc |(1<<URSEL| 3<<UCSZ);		//select UCSRC and set the character size to 8 bit.
	
	UBRRL = 51;		//baudrate 9600 for 8MHz
 598:	83 e3       	ldi	r24, 0x33	; 51
 59a:	89 b9       	out	0x09, r24	; 9
	
	UCSRB = ucsrb;	//Enable RX , TX only without interrupts
 59c:	88 e1       	ldi	r24, 0x18	; 24
 59e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = ucsrc;	//8-bit data
 5a0:	86 e8       	ldi	r24, 0x86	; 134
 5a2:	80 bd       	out	0x20, r24	; 32
 5a4:	08 95       	ret

000005a6 <UART_voidSendDataSynch>:


//For Polling transmission and reception
void UART_voidSendDataSynch(u8 Copy_u8Data){
	
	while(GET_BIT(UCSRA,UDRE) == 0);	//wait until the Data Registe Embty is set
 5a6:	5d 9b       	sbis	0x0b, 5	; 11
 5a8:	fe cf       	rjmp	.-4      	; 0x5a6 <UART_voidSendDataSynch>
	UDR = Copy_u8Data;
 5aa:	8c b9       	out	0x0c, r24	; 12
	while(GET_BIT(UCSRA,TXC) == 0);	//wait until data is transmitted
 5ac:	5e 9b       	sbis	0x0b, 6	; 11
 5ae:	fe cf       	rjmp	.-4      	; 0x5ac <UART_voidSendDataSynch+0x6>
	SET_BIT(UCSRA,TXC);	//clear the flag of TX complete
 5b0:	5e 9a       	sbi	0x0b, 6	; 11
 5b2:	08 95       	ret

000005b4 <UART_u8ReceiveDataSynch>:
}

void UART_u8ReceiveDataSynch(u8 *Copy_pu8Data){
	while(GET_BIT(UCSRA,RXC)==0);	//wait until there's data to be read in the receive buffer
 5b4:	5f 9b       	sbis	0x0b, 7	; 11
 5b6:	fe cf       	rjmp	.-4      	; 0x5b4 <UART_u8ReceiveDataSynch>
	SET_BIT(UCSRA,RXC);				//clear the receive flag 
 5b8:	5f 9a       	sbi	0x0b, 7	; 11
	*Copy_pu8Data = UDR;			//send the received character to the addressed variable
 5ba:	2c b1       	in	r18, 0x0c	; 12
 5bc:	fc 01       	movw	r30, r24
 5be:	20 83       	st	Z, r18
 5c0:	08 95       	ret

000005c2 <UART_voidSendStringSynch>:
}

void UART_voidSendStringSynch(u8* Copy_pu8String){
 5c2:	0f 93       	push	r16
 5c4:	1f 93       	push	r17
 5c6:	cf 93       	push	r28
 5c8:	fc 01       	movw	r30, r24
	u8 counter = 0;
		while(Copy_pu8String[counter] != '\0'){
 5ca:	80 81       	ld	r24, Z
 5cc:	88 23       	and	r24, r24
 5ce:	59 f0       	breq	.+22     	; 0x5e6 <UART_voidSendStringSynch+0x24>
 5d0:	8f 01       	movw	r16, r30
 5d2:	c0 e0       	ldi	r28, 0x00	; 0
			
			UART_voidSendDataSynch(Copy_pu8String[counter]);
 5d4:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_voidSendDataSynch>
			counter++;
 5d8:	cf 5f       	subi	r28, 0xFF	; 255
	*Copy_pu8Data = UDR;			//send the received character to the addressed variable
}

void UART_voidSendStringSynch(u8* Copy_pu8String){
	u8 counter = 0;
		while(Copy_pu8String[counter] != '\0'){
 5da:	f8 01       	movw	r30, r16
 5dc:	ec 0f       	add	r30, r28
 5de:	f1 1d       	adc	r31, r1
 5e0:	80 81       	ld	r24, Z
 5e2:	81 11       	cpse	r24, r1
 5e4:	f7 cf       	rjmp	.-18     	; 0x5d4 <UART_voidSendStringSynch+0x12>
			UART_voidSendDataSynch(Copy_pu8String[counter]);
			counter++;
		}
		
	
}
 5e6:	cf 91       	pop	r28
 5e8:	1f 91       	pop	r17
 5ea:	0f 91       	pop	r16
 5ec:	08 95       	ret

000005ee <UART_voidSendNumberSynch>:

void UART_voidSendNumberSynch(u32 Copy_u32Number){
 5ee:	0f 93       	push	r16
 5f0:	1f 93       	push	r17
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	fc 01       	movw	r30, r24
	u8 SentChar;
	u32 y = 1;
 5f8:	c1 e0       	ldi	r28, 0x01	; 1
 5fa:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(Copy_u32Number/(10*y) !=0){
 5fc:	01 c0       	rjmp	.+2      	; 0x600 <UART_voidSendNumberSynch+0x12>
		y*=10;
 5fe:	e9 01       	movw	r28, r18

void UART_voidSendNumberSynch(u32 Copy_u32Number){
	u8 SentChar;
	u32 y = 1;
	
	while(Copy_u32Number/(10*y) !=0){
 600:	ce 01       	movw	r24, r28
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	9e 01       	movw	r18, r28
 610:	22 0f       	add	r18, r18
 612:	33 1f       	adc	r19, r19
 614:	28 0f       	add	r18, r24
 616:	39 1f       	adc	r19, r25
 618:	cf 01       	movw	r24, r30
 61a:	b9 01       	movw	r22, r18
 61c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__udivmodhi4>
 620:	67 2b       	or	r22, r23
 622:	69 f7       	brne	.-38     	; 0x5fe <UART_voidSendNumberSynch+0x10>
		y*=10;
	}
	while(Copy_u32Number !=0){
 624:	30 97       	sbiw	r30, 0x00	; 0
 626:	d1 f0       	breq	.+52     	; 0x65c <UART_voidSendNumberSynch+0x6e>
		SentChar = (Copy_u32Number/y)+'0';
		UART_voidSendDataSynch(SentChar);
 628:	cf 01       	movw	r24, r30
 62a:	be 01       	movw	r22, r28
 62c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__udivmodhi4>
 630:	08 2f       	mov	r16, r24
 632:	19 2f       	mov	r17, r25
 634:	80 e3       	ldi	r24, 0x30	; 48
 636:	86 0f       	add	r24, r22
 638:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_voidSendDataSynch>
		Copy_u32Number %=y;
 63c:	e0 2f       	mov	r30, r16
 63e:	f1 2f       	mov	r31, r17
		y/=10;
 640:	9e 01       	movw	r18, r28
 642:	ad ec       	ldi	r26, 0xCD	; 205
 644:	bc ec       	ldi	r27, 0xCC	; 204
 646:	0e 94 70 07 	call	0xee0	; 0xee0 <__umulhisi3>
 64a:	ec 01       	movw	r28, r24
 64c:	d6 95       	lsr	r29
 64e:	c7 95       	ror	r28
 650:	d6 95       	lsr	r29
 652:	c7 95       	ror	r28
 654:	d6 95       	lsr	r29
 656:	c7 95       	ror	r28
	u32 y = 1;
	
	while(Copy_u32Number/(10*y) !=0){
		y*=10;
	}
	while(Copy_u32Number !=0){
 658:	30 97       	sbiw	r30, 0x00	; 0
 65a:	31 f7       	brne	.-52     	; 0x628 <UART_voidSendNumberSynch+0x3a>
		SentChar = (Copy_u32Number/y)+'0';
		UART_voidSendDataSynch(SentChar);
		Copy_u32Number %=y;
		y/=10;
	}
}
 65c:	df 91       	pop	r29
 65e:	cf 91       	pop	r28
 660:	1f 91       	pop	r17
 662:	0f 91       	pop	r16
 664:	08 95       	ret

00000666 <UART_voidReceiveStringSynch>:

void UART_voidReceiveStringSynch(u8* Copy_pu8Data , u8 BufferSize){
 666:	cf 92       	push	r12
 668:	df 92       	push	r13
 66a:	ef 92       	push	r14
 66c:	ff 92       	push	r15
 66e:	1f 93       	push	r17
 670:	cf 93       	push	r28
 672:	df 93       	push	r29
 674:	6c 01       	movw	r12, r24
	
	u8 counter = -1;
 676:	1f ef       	ldi	r17, 0xFF	; 255
	do{
		counter++;
		UART_u8ReceiveDataSynch(Copy_pu8Data+counter);
		UART_voidSendDataSynch(Copy_pu8Data[counter]);
	}while(Copy_pu8Data[counter] != '+' && counter < BufferSize-1 );				//loop until Enter is pressed and is less than the last element of the buffer
 678:	e6 2e       	mov	r14, r22
 67a:	f1 2c       	mov	r15, r1
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	e8 1a       	sub	r14, r24
 680:	f1 08       	sbc	r15, r1

void UART_voidReceiveStringSynch(u8* Copy_pu8Data , u8 BufferSize){
	
	u8 counter = -1;
	do{
		counter++;
 682:	1f 5f       	subi	r17, 0xFF	; 255
		UART_u8ReceiveDataSynch(Copy_pu8Data+counter);
 684:	e6 01       	movw	r28, r12
 686:	c1 0f       	add	r28, r17
 688:	d1 1d       	adc	r29, r1
 68a:	ce 01       	movw	r24, r28
 68c:	0e 94 da 02 	call	0x5b4	; 0x5b4 <UART_u8ReceiveDataSynch>
		UART_voidSendDataSynch(Copy_pu8Data[counter]);
 690:	88 81       	ld	r24, Y
 692:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_voidSendDataSynch>
	}while(Copy_pu8Data[counter] != '+' && counter < BufferSize-1 );				//loop until Enter is pressed and is less than the last element of the buffer
 696:	88 81       	ld	r24, Y
 698:	8b 32       	cpi	r24, 0x2B	; 43
 69a:	29 f0       	breq	.+10     	; 0x6a6 <UART_voidReceiveStringSynch+0x40>
 69c:	81 2f       	mov	r24, r17
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	8e 15       	cp	r24, r14
 6a2:	9f 05       	cpc	r25, r15
 6a4:	74 f3       	brlt	.-36     	; 0x682 <UART_voidReceiveStringSynch+0x1c>
	Copy_pu8Data[counter] = '\0';			//put the null character at the last element of the buffer
 6a6:	18 82       	st	Y, r1
}
 6a8:	df 91       	pop	r29
 6aa:	cf 91       	pop	r28
 6ac:	1f 91       	pop	r17
 6ae:	ff 90       	pop	r15
 6b0:	ef 90       	pop	r14
 6b2:	df 90       	pop	r13
 6b4:	cf 90       	pop	r12
 6b6:	08 95       	ret

000006b8 <UART_voidReceiveNumberSynch>:

void UART_voidReceiveNumberSynch(u32 *Copy_pu32Number){
 6b8:	5f 92       	push	r5
 6ba:	6f 92       	push	r6
 6bc:	7f 92       	push	r7
 6be:	8f 92       	push	r8
 6c0:	9f 92       	push	r9
 6c2:	af 92       	push	r10
 6c4:	bf 92       	push	r11
 6c6:	cf 92       	push	r12
 6c8:	df 92       	push	r13
 6ca:	ef 92       	push	r14
 6cc:	ff 92       	push	r15
 6ce:	0f 93       	push	r16
 6d0:	1f 93       	push	r17
 6d2:	cf 93       	push	r28
 6d4:	df 93       	push	r29
 6d6:	cd b7       	in	r28, 0x3d	; 61
 6d8:	de b7       	in	r29, 0x3e	; 62
 6da:	2a 97       	sbiw	r28, 0x0a	; 10
 6dc:	0f b6       	in	r0, 0x3f	; 63
 6de:	f8 94       	cli
 6e0:	de bf       	out	0x3e, r29	; 62
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	cd bf       	out	0x3d, r28	; 61
 6e6:	3c 01       	movw	r6, r24
 6e8:	ae 01       	movw	r20, r28
 6ea:	4f 5f       	subi	r20, 0xFF	; 255
 6ec:	5f 4f       	sbci	r21, 0xFF	; 255
 6ee:	7a 01       	movw	r14, r20
 6f0:	6a 01       	movw	r12, r20
 6f2:	00 e0       	ldi	r16, 0x00	; 0
 6f4:	10 e0       	ldi	r17, 0x00	; 0
	u8 counter = 0;
	u32 number = 0;
	u32 decimal = 1;
	u8 temp;
	do{		//receive the number and put it into a buffer
		numlen++;
 6f6:	50 2e       	mov	r5, r16
		UART_u8ReceiveDataSynch(&(Buffer[numlen]));
 6f8:	58 01       	movw	r10, r16
 6fa:	46 01       	movw	r8, r12
 6fc:	c6 01       	movw	r24, r12
 6fe:	0e 94 da 02 	call	0x5b4	; 0x5b4 <UART_u8ReceiveDataSynch>
		UART_voidSendDataSynch(Buffer[numlen]);
 702:	d6 01       	movw	r26, r12
 704:	8d 91       	ld	r24, X+
 706:	6d 01       	movw	r12, r26
 708:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_voidSendDataSynch>
		
	}while(Buffer[numlen] != '+' && numlen< 10);		//the last element storing Enter char.
 70c:	f4 01       	movw	r30, r8
 70e:	80 81       	ld	r24, Z
 710:	8b 32       	cpi	r24, 0x2B	; 43
 712:	09 f4       	brne	.+2      	; 0x716 <UART_voidReceiveNumberSynch+0x5e>
 714:	47 c0       	rjmp	.+142    	; 0x7a4 <UART_voidReceiveNumberSynch+0xec>
 716:	0f 5f       	subi	r16, 0xFF	; 255
 718:	1f 4f       	sbci	r17, 0xFF	; 255
 71a:	0b 30       	cpi	r16, 0x0B	; 11
 71c:	11 05       	cpc	r17, r1
 71e:	59 f7       	brne	.-42     	; 0x6f6 <UART_voidReceiveNumberSynch+0x3e>
 720:	41 c0       	rjmp	.+130    	; 0x7a4 <UART_voidReceiveNumberSynch+0xec>
	
	for( ;counter<=numlen/2;counter++){	//swap the buffer element	as it is stored inversely
		temp = Buffer[numlen - counter-1];
 722:	a8 2f       	mov	r26, r24
 724:	b0 e0       	ldi	r27, 0x00	; 0
 726:	f5 01       	movw	r30, r10
 728:	ea 1b       	sub	r30, r26
 72a:	fb 0b       	sbc	r31, r27
 72c:	31 97       	sbiw	r30, 0x01	; 1
 72e:	41 e0       	ldi	r20, 0x01	; 1
 730:	50 e0       	ldi	r21, 0x00	; 0
 732:	4c 0f       	add	r20, r28
 734:	5d 1f       	adc	r21, r29
 736:	e4 0f       	add	r30, r20
 738:	f5 1f       	adc	r31, r21
 73a:	90 81       	ld	r25, Z
		Buffer[numlen - counter - 1] = Buffer[counter] - '0';
 73c:	a4 0f       	add	r26, r20
 73e:	b5 1f       	adc	r27, r21
 740:	2c 91       	ld	r18, X
 742:	20 53       	subi	r18, 0x30	; 48
 744:	20 83       	st	Z, r18
		Buffer[counter] = temp - '0';
 746:	90 53       	subi	r25, 0x30	; 48
 748:	9c 93       	st	X, r25
		UART_u8ReceiveDataSynch(&(Buffer[numlen]));
		UART_voidSendDataSynch(Buffer[numlen]);
		
	}while(Buffer[numlen] != '+' && numlen< 10);		//the last element storing Enter char.
	
	for( ;counter<=numlen/2;counter++){	//swap the buffer element	as it is stored inversely
 74a:	8f 5f       	subi	r24, 0xFF	; 255
 74c:	38 17       	cp	r19, r24
 74e:	48 f7       	brcc	.-46     	; 0x722 <UART_voidReceiveNumberSynch+0x6a>
		temp = Buffer[numlen - counter-1];
		Buffer[numlen - counter - 1] = Buffer[counter] - '0';
		Buffer[counter] = temp - '0';
		
	}
	for(counter = 0; counter<numlen; counter++){
 750:	55 20       	and	r5, r5
 752:	11 f1       	breq	.+68     	; 0x798 <UART_voidReceiveNumberSynch+0xe0>
 754:	5a 94       	dec	r5
 756:	fe 01       	movw	r30, r28
 758:	e5 0d       	add	r30, r5
 75a:	f1 1d       	adc	r31, r1
 75c:	32 96       	adiw	r30, 0x02	; 2
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	20 e0       	ldi	r18, 0x00	; 0
 764:	30 e0       	ldi	r19, 0x00	; 0
		number = number + Buffer[counter]*decimal;
 766:	d7 01       	movw	r26, r14
 768:	6d 91       	ld	r22, X+
 76a:	7d 01       	movw	r14, r26
 76c:	68 9f       	mul	r22, r24
 76e:	a0 01       	movw	r20, r0
 770:	69 9f       	mul	r22, r25
 772:	50 0d       	add	r21, r0
 774:	11 24       	eor	r1, r1
 776:	24 0f       	add	r18, r20
 778:	35 1f       	adc	r19, r21
		decimal *= 10;
 77a:	ac 01       	movw	r20, r24
 77c:	44 0f       	add	r20, r20
 77e:	55 1f       	adc	r21, r21
 780:	88 0f       	add	r24, r24
 782:	99 1f       	adc	r25, r25
 784:	88 0f       	add	r24, r24
 786:	99 1f       	adc	r25, r25
 788:	88 0f       	add	r24, r24
 78a:	99 1f       	adc	r25, r25
 78c:	84 0f       	add	r24, r20
 78e:	95 1f       	adc	r25, r21
		temp = Buffer[numlen - counter-1];
		Buffer[numlen - counter - 1] = Buffer[counter] - '0';
		Buffer[counter] = temp - '0';
		
	}
	for(counter = 0; counter<numlen; counter++){
 790:	ae 17       	cp	r26, r30
 792:	bf 07       	cpc	r27, r31
 794:	41 f7       	brne	.-48     	; 0x766 <UART_voidReceiveNumberSynch+0xae>
 796:	02 c0       	rjmp	.+4      	; 0x79c <UART_voidReceiveNumberSynch+0xe4>
 798:	20 e0       	ldi	r18, 0x00	; 0
 79a:	30 e0       	ldi	r19, 0x00	; 0
		number = number + Buffer[counter]*decimal;
		decimal *= 10;
		//UART_voidSendNumberSynch(number);	
	}
	
	*Copy_pu32Number = number;
 79c:	f3 01       	movw	r30, r6
 79e:	31 83       	std	Z+1, r19	; 0x01
 7a0:	20 83       	st	Z, r18
	
}
 7a2:	04 c0       	rjmp	.+8      	; 0x7ac <UART_voidReceiveNumberSynch+0xf4>
		UART_u8ReceiveDataSynch(&(Buffer[numlen]));
		UART_voidSendDataSynch(Buffer[numlen]);
		
	}while(Buffer[numlen] != '+' && numlen< 10);		//the last element storing Enter char.
	
	for( ;counter<=numlen/2;counter++){	//swap the buffer element	as it is stored inversely
 7a4:	35 2d       	mov	r19, r5
 7a6:	36 95       	lsr	r19
 7a8:	80 e0       	ldi	r24, 0x00	; 0
 7aa:	bb cf       	rjmp	.-138    	; 0x722 <UART_voidReceiveNumberSynch+0x6a>
		//UART_voidSendNumberSynch(number);	
	}
	
	*Copy_pu32Number = number;
	
}
 7ac:	2a 96       	adiw	r28, 0x0a	; 10
 7ae:	0f b6       	in	r0, 0x3f	; 63
 7b0:	f8 94       	cli
 7b2:	de bf       	out	0x3e, r29	; 62
 7b4:	0f be       	out	0x3f, r0	; 63
 7b6:	cd bf       	out	0x3d, r28	; 61
 7b8:	df 91       	pop	r29
 7ba:	cf 91       	pop	r28
 7bc:	1f 91       	pop	r17
 7be:	0f 91       	pop	r16
 7c0:	ff 90       	pop	r15
 7c2:	ef 90       	pop	r14
 7c4:	df 90       	pop	r13
 7c6:	cf 90       	pop	r12
 7c8:	bf 90       	pop	r11
 7ca:	af 90       	pop	r10
 7cc:	9f 90       	pop	r9
 7ce:	8f 90       	pop	r8
 7d0:	7f 90       	pop	r7
 7d2:	6f 90       	pop	r6
 7d4:	5f 90       	pop	r5
 7d6:	08 95       	ret

000007d8 <EEPROM_voidWriteName>:


void Unlock(){
	DIO_voidSetPinValue(DIO_PORTC, DIO_PIN2, DIO_HIGH);
	_delay_ms(3000);
	DIO_voidSetPinValue(DIO_PORTC, DIO_PIN2, DIO_LOW);
 7d8:	ef 92       	push	r14
 7da:	ff 92       	push	r15
 7dc:	0f 93       	push	r16
 7de:	1f 93       	push	r17
 7e0:	cf 93       	push	r28
 7e2:	df 93       	push	r29
 7e4:	7c 01       	movw	r14, r24
 7e6:	d6 2f       	mov	r29, r22
 7e8:	fc 01       	movw	r30, r24
 7ea:	60 81       	ld	r22, Z
 7ec:	66 23       	and	r22, r22
 7ee:	c9 f0       	breq	.+50     	; 0x822 <EEPROM_voidWriteName+0x4a>
 7f0:	f2 e3       	ldi	r31, 0x32	; 50
 7f2:	df 9f       	mul	r29, r31
 7f4:	80 01       	movw	r16, r0
 7f6:	11 24       	eor	r1, r1
 7f8:	0b 5f       	subi	r16, 0xFB	; 251
 7fa:	1f 4f       	sbci	r17, 0xFF	; 255
 7fc:	c0 e0       	ldi	r28, 0x00	; 0
 7fe:	c8 01       	movw	r24, r16
 800:	8c 0f       	add	r24, r28
 802:	91 1d       	adc	r25, r1
 804:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_voidSendDataByte>
 808:	cf 5f       	subi	r28, 0xFF	; 255
 80a:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <__data_end>
 80e:	8f 5f       	subi	r24, 0xFF	; 255
 810:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <__data_end>
 814:	f7 01       	movw	r30, r14
 816:	ec 0f       	add	r30, r28
 818:	f1 1d       	adc	r31, r1
 81a:	60 81       	ld	r22, Z
 81c:	61 11       	cpse	r22, r1
 81e:	ef cf       	rjmp	.-34     	; 0x7fe <EEPROM_voidWriteName+0x26>
 820:	01 c0       	rjmp	.+2      	; 0x824 <EEPROM_voidWriteName+0x4c>
 822:	c0 e0       	ldi	r28, 0x00	; 0
 824:	22 e3       	ldi	r18, 0x32	; 50
 826:	d2 9f       	mul	r29, r18
 828:	c0 01       	movw	r24, r0
 82a:	11 24       	eor	r1, r1
 82c:	05 96       	adiw	r24, 0x05	; 5
 82e:	60 e0       	ldi	r22, 0x00	; 0
 830:	8c 0f       	add	r24, r28
 832:	91 1d       	adc	r25, r1
 834:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_voidSendDataByte>
 838:	df 91       	pop	r29
 83a:	cf 91       	pop	r28
 83c:	1f 91       	pop	r17
 83e:	0f 91       	pop	r16
 840:	ff 90       	pop	r15
 842:	ef 90       	pop	r14
 844:	08 95       	ret

00000846 <EEPROM_voidWriteId>:
 846:	68 2f       	mov	r22, r24
 848:	22 e3       	ldi	r18, 0x32	; 50
 84a:	82 9f       	mul	r24, r18
 84c:	c0 01       	movw	r24, r0
 84e:	11 24       	eor	r1, r1
 850:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_voidSendDataByte>
 854:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <__data_end>
 858:	8f 5f       	subi	r24, 0xFF	; 255
 85a:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <__data_end>
 85e:	08 95       	ret

00000860 <EEPROM_voidWritePassword>:
 860:	ef 92       	push	r14
 862:	ff 92       	push	r15
 864:	0f 93       	push	r16
 866:	1f 93       	push	r17
 868:	cf 93       	push	r28
 86a:	df 93       	push	r29
 86c:	7c 01       	movw	r14, r24
 86e:	82 e3       	ldi	r24, 0x32	; 50
 870:	68 9f       	mul	r22, r24
 872:	80 01       	movw	r16, r0
 874:	11 24       	eor	r1, r1
 876:	0f 5f       	subi	r16, 0xFF	; 255
 878:	1f 4f       	sbci	r17, 0xFF	; 255
 87a:	c0 e0       	ldi	r28, 0x00	; 0
 87c:	d0 e0       	ldi	r29, 0x00	; 0
 87e:	b7 01       	movw	r22, r14
 880:	0c 2e       	mov	r0, r28
 882:	02 c0       	rjmp	.+4      	; 0x888 <EEPROM_voidWritePassword+0x28>
 884:	76 95       	lsr	r23
 886:	67 95       	ror	r22
 888:	0a 94       	dec	r0
 88a:	e2 f7       	brpl	.-8      	; 0x884 <EEPROM_voidWritePassword+0x24>
 88c:	c8 01       	movw	r24, r16
 88e:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_voidSendDataByte>
 892:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <__data_end>
 896:	8f 5f       	subi	r24, 0xFF	; 255
 898:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <__data_end>
 89c:	28 96       	adiw	r28, 0x08	; 8
 89e:	0f 5f       	subi	r16, 0xFF	; 255
 8a0:	1f 4f       	sbci	r17, 0xFF	; 255
 8a2:	c0 32       	cpi	r28, 0x20	; 32
 8a4:	d1 05       	cpc	r29, r1
 8a6:	59 f7       	brne	.-42     	; 0x87e <EEPROM_voidWritePassword+0x1e>
 8a8:	df 91       	pop	r29
 8aa:	cf 91       	pop	r28
 8ac:	1f 91       	pop	r17
 8ae:	0f 91       	pop	r16
 8b0:	ff 90       	pop	r15
 8b2:	ef 90       	pop	r14
 8b4:	08 95       	ret

000008b6 <new>:
 8b6:	cf 93       	push	r28
 8b8:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <counter>
 8bc:	8a 30       	cpi	r24, 0x0A	; 10
 8be:	08 f0       	brcs	.+2      	; 0x8c2 <new+0xc>
 8c0:	75 c0       	rjmp	.+234    	; 0x9ac <new+0xf6>
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	fc 01       	movw	r30, r24
 8c6:	ee 0f       	add	r30, r30
 8c8:	ff 1f       	adc	r31, r31
 8ca:	e2 55       	subi	r30, 0x52	; 82
 8cc:	fb 4f       	sbci	r31, 0xFB	; 251
 8ce:	c6 e1       	ldi	r28, 0x16	; 22
 8d0:	c8 9f       	mul	r28, r24
 8d2:	90 01       	movw	r18, r0
 8d4:	c9 9f       	mul	r28, r25
 8d6:	30 0d       	add	r19, r0
 8d8:	11 24       	eor	r1, r1
 8da:	c9 01       	movw	r24, r18
 8dc:	81 54       	subi	r24, 0x41	; 65
 8de:	9c 4f       	sbci	r25, 0xFC	; 252
 8e0:	91 83       	std	Z+1, r25	; 0x01
 8e2:	80 83       	st	Z, r24
 8e4:	85 e1       	ldi	r24, 0x15	; 21
 8e6:	91 e0       	ldi	r25, 0x01	; 1
 8e8:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 8ec:	e0 91 bc 03 	lds	r30, 0x03BC	; 0x8003bc <counter>
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	ee 0f       	add	r30, r30
 8f4:	ff 1f       	adc	r31, r31
 8f6:	e2 55       	subi	r30, 0x52	; 82
 8f8:	fb 4f       	sbci	r31, 0xFB	; 251
 8fa:	64 e1       	ldi	r22, 0x14	; 20
 8fc:	80 81       	ld	r24, Z
 8fe:	91 81       	ldd	r25, Z+1	; 0x01
 900:	0e 94 33 03 	call	0x666	; 0x666 <UART_voidReceiveStringSynch>
 904:	80 e2       	ldi	r24, 0x20	; 32
 906:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_voidSendDataSynch>
 90a:	8c e2       	ldi	r24, 0x2C	; 44
 90c:	91 e0       	ldi	r25, 0x01	; 1
 90e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 912:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <counter>
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	88 0f       	add	r24, r24
 91a:	99 1f       	adc	r25, r25
 91c:	87 56       	subi	r24, 0x67	; 103
 91e:	9b 4f       	sbci	r25, 0xFB	; 251
 920:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <UART_voidReceiveNumberSynch>
 924:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <counter>
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	c8 9f       	mul	r28, r24
 92c:	d0 01       	movw	r26, r0
 92e:	c9 9f       	mul	r28, r25
 930:	b0 0d       	add	r27, r0
 932:	11 24       	eor	r1, r1
 934:	a3 54       	subi	r26, 0x43	; 67
 936:	bc 4f       	sbci	r27, 0xFC	; 252
 938:	88 0f       	add	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	fc 01       	movw	r30, r24
 93e:	e7 56       	subi	r30, 0x67	; 103
 940:	fb 4f       	sbci	r31, 0xFB	; 251
 942:	80 81       	ld	r24, Z
 944:	91 81       	ldd	r25, Z+1	; 0x01
 946:	8d 93       	st	X+, r24
 948:	9c 93       	st	X, r25
 94a:	80 e2       	ldi	r24, 0x20	; 32
 94c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_voidSendDataSynch>
 950:	82 e4       	ldi	r24, 0x42	; 66
 952:	91 e0       	ldi	r25, 0x01	; 1
 954:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 958:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <counter>
 95c:	80 5d       	subi	r24, 0xD0	; 208
 95e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_voidSendDataSynch>
 962:	80 e2       	ldi	r24, 0x20	; 32
 964:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_voidSendDataSynch>
 968:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <counter>
 96c:	0e 94 23 04 	call	0x846	; 0x846 <EEPROM_voidWriteId>
 970:	60 91 bc 03 	lds	r22, 0x03BC	; 0x8003bc <counter>
 974:	80 91 ae 04 	lds	r24, 0x04AE	; 0x8004ae <Buffer>
 978:	90 91 af 04 	lds	r25, 0x04AF	; 0x8004af <Buffer+0x1>
 97c:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <EEPROM_voidWriteName>
 980:	60 91 bc 03 	lds	r22, 0x03BC	; 0x8003bc <counter>
 984:	e6 2f       	mov	r30, r22
 986:	f0 e0       	ldi	r31, 0x00	; 0
 988:	ee 0f       	add	r30, r30
 98a:	ff 1f       	adc	r31, r31
 98c:	e7 56       	subi	r30, 0x67	; 103
 98e:	fb 4f       	sbci	r31, 0xFB	; 251
 990:	80 81       	ld	r24, Z
 992:	91 81       	ldd	r25, Z+1	; 0x01
 994:	0e 94 30 04 	call	0x860	; 0x860 <EEPROM_voidWritePassword>
 998:	60 91 bc 03 	lds	r22, 0x03BC	; 0x8003bc <counter>
 99c:	6f 5f       	subi	r22, 0xFF	; 255
 99e:	60 93 bc 03 	sts	0x03BC, r22	; 0x8003bc <counter>
 9a2:	8f ef       	ldi	r24, 0xFF	; 255
 9a4:	93 e0       	ldi	r25, 0x03	; 3
 9a6:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_voidSendDataByte>
 9aa:	08 c0       	rjmp	.+16     	; 0x9bc <new+0x106>
 9ac:	8e e4       	ldi	r24, 0x4E	; 78
 9ae:	91 e0       	ldi	r25, 0x01	; 1
 9b0:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 9b4:	8e e6       	ldi	r24, 0x6E	; 110
 9b6:	91 e0       	ldi	r25, 0x01	; 1
 9b8:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 9bc:	cf 91       	pop	r28
 9be:	08 95       	ret

000009c0 <EEPROM_u8SearchForPassword>:
 9c0:	ff 92       	push	r15
 9c2:	0f 93       	push	r16
 9c4:	1f 93       	push	r17
 9c6:	cf 93       	push	r28
 9c8:	df 93       	push	r29
 9ca:	22 e3       	ldi	r18, 0x32	; 50
 9cc:	82 9f       	mul	r24, r18
 9ce:	c0 01       	movw	r24, r0
 9d0:	11 24       	eor	r1, r1
 9d2:	01 96       	adiw	r24, 0x01	; 1
 9d4:	c8 2f       	mov	r28, r24
 9d6:	68 94       	set
 9d8:	ff 24       	eor	r15, r15
 9da:	f2 f8       	bld	r15, 2
 9dc:	f8 0e       	add	r15, r24
 9de:	f8 16       	cp	r15, r24
 9e0:	c0 f0       	brcs	.+48     	; 0xa12 <EEPROM_u8SearchForPassword+0x52>
 9e2:	d0 e0       	ldi	r29, 0x00	; 0
 9e4:	00 e0       	ldi	r16, 0x00	; 0
 9e6:	10 e0       	ldi	r17, 0x00	; 0
 9e8:	8c 2f       	mov	r24, r28
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	0e 94 6c 00 	call	0xd8	; 0xd8 <EEPROM_u8ReadDataByte>
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	2d 2f       	mov	r18, r29
 9f4:	22 0f       	add	r18, r18
 9f6:	22 0f       	add	r18, r18
 9f8:	22 0f       	add	r18, r18
 9fa:	02 c0       	rjmp	.+4      	; 0xa00 <EEPROM_u8SearchForPassword+0x40>
 9fc:	88 0f       	add	r24, r24
 9fe:	99 1f       	adc	r25, r25
 a00:	2a 95       	dec	r18
 a02:	e2 f7       	brpl	.-8      	; 0x9fc <EEPROM_u8SearchForPassword+0x3c>
 a04:	08 0f       	add	r16, r24
 a06:	19 1f       	adc	r17, r25
 a08:	df 5f       	subi	r29, 0xFF	; 255
 a0a:	cf 5f       	subi	r28, 0xFF	; 255
 a0c:	fc 16       	cp	r15, r28
 a0e:	60 f7       	brcc	.-40     	; 0x9e8 <EEPROM_u8SearchForPassword+0x28>
 a10:	02 c0       	rjmp	.+4      	; 0xa16 <EEPROM_u8SearchForPassword+0x56>
 a12:	00 e0       	ldi	r16, 0x00	; 0
 a14:	10 e0       	ldi	r17, 0x00	; 0
 a16:	c8 01       	movw	r24, r16
 a18:	df 91       	pop	r29
 a1a:	cf 91       	pop	r28
 a1c:	1f 91       	pop	r17
 a1e:	0f 91       	pop	r16
 a20:	ff 90       	pop	r15
 a22:	08 95       	ret

00000a24 <EEPROM_u8SearchForName>:
 a24:	0f 93       	push	r16
 a26:	1f 93       	push	r17
 a28:	cf 93       	push	r28
 a2a:	df 93       	push	r29
 a2c:	8c 01       	movw	r16, r24
 a2e:	c2 e3       	ldi	r28, 0x32	; 50
 a30:	6c 9f       	mul	r22, r28
 a32:	c0 2d       	mov	r28, r0
 a34:	11 24       	eor	r1, r1
 a36:	cb 5f       	subi	r28, 0xFB	; 251
 a38:	8c 2f       	mov	r24, r28
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	0e 94 6c 00 	call	0xd8	; 0xd8 <EEPROM_u8ReadDataByte>
 a40:	88 23       	and	r24, r24
 a42:	79 f0       	breq	.+30     	; 0xa62 <EEPROM_u8SearchForName+0x3e>
 a44:	d0 e0       	ldi	r29, 0x00	; 0
 a46:	f8 01       	movw	r30, r16
 a48:	ed 0f       	add	r30, r29
 a4a:	f1 1d       	adc	r31, r1
 a4c:	80 83       	st	Z, r24
 a4e:	8c 2f       	mov	r24, r28
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	01 96       	adiw	r24, 0x01	; 1
 a54:	0e 94 6c 00 	call	0xd8	; 0xd8 <EEPROM_u8ReadDataByte>
 a58:	df 5f       	subi	r29, 0xFF	; 255
 a5a:	cf 5f       	subi	r28, 0xFF	; 255
 a5c:	81 11       	cpse	r24, r1
 a5e:	f3 cf       	rjmp	.-26     	; 0xa46 <EEPROM_u8SearchForName+0x22>
 a60:	01 c0       	rjmp	.+2      	; 0xa64 <EEPROM_u8SearchForName+0x40>
 a62:	d0 e0       	ldi	r29, 0x00	; 0
 a64:	f8 01       	movw	r30, r16
 a66:	ed 0f       	add	r30, r29
 a68:	f1 1d       	adc	r31, r1
 a6a:	10 82       	st	Z, r1
 a6c:	8d 2f       	mov	r24, r29
 a6e:	df 91       	pop	r29
 a70:	cf 91       	pop	r28
 a72:	1f 91       	pop	r17
 a74:	0f 91       	pop	r16
 a76:	08 95       	ret

00000a78 <SignIn>:
 a78:	1f 93       	push	r17
 a7a:	cf 93       	push	r28
 a7c:	df 93       	push	r29
 a7e:	00 d0       	rcall	.+0      	; 0xa80 <SignIn+0x8>
 a80:	1f 92       	push	r1
 a82:	cd b7       	in	r28, 0x3d	; 61
 a84:	de b7       	in	r29, 0x3e	; 62
 a86:	89 e9       	ldi	r24, 0x99	; 153
 a88:	91 e0       	ldi	r25, 0x01	; 1
 a8a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 a8e:	ce 01       	movw	r24, r28
 a90:	01 96       	adiw	r24, 0x01	; 1
 a92:	0e 94 da 02 	call	0x5b4	; 0x5b4 <UART_u8ReceiveDataSynch>
 a96:	89 81       	ldd	r24, Y+1	; 0x01
 a98:	80 53       	subi	r24, 0x30	; 48
 a9a:	89 83       	std	Y+1, r24	; 0x01
 a9c:	16 e1       	ldi	r17, 0x16	; 22
 a9e:	45 c0       	rjmp	.+138    	; 0xb2a <SignIn+0xb2>
 aa0:	8e ea       	ldi	r24, 0xAE	; 174
 aa2:	91 e0       	ldi	r25, 0x01	; 1
 aa4:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 aa8:	40 e0       	ldi	r20, 0x00	; 0
 aaa:	62 e0       	ldi	r22, 0x02	; 2
 aac:	80 e0       	ldi	r24, 0x00	; 0
 aae:	0e 94 cb 01 	call	0x396	; 0x396 <DIO_voidSetPinValue>
 ab2:	40 e0       	ldi	r20, 0x00	; 0
 ab4:	61 e0       	ldi	r22, 0x01	; 1
 ab6:	80 e0       	ldi	r24, 0x00	; 0
 ab8:	0e 94 cb 01 	call	0x396	; 0x396 <DIO_voidSetPinValue>
 abc:	41 e0       	ldi	r20, 0x01	; 1
 abe:	60 e0       	ldi	r22, 0x00	; 0
 ac0:	80 e0       	ldi	r24, 0x00	; 0
 ac2:	0e 94 cb 01 	call	0x396	; 0x396 <DIO_voidSetPinValue>
 ac6:	2f ef       	ldi	r18, 0xFF	; 255
 ac8:	81 e1       	ldi	r24, 0x11	; 17
 aca:	9a e7       	ldi	r25, 0x7A	; 122
 acc:	21 50       	subi	r18, 0x01	; 1
 ace:	80 40       	sbci	r24, 0x00	; 0
 ad0:	90 40       	sbci	r25, 0x00	; 0
 ad2:	e1 f7       	brne	.-8      	; 0xacc <SignIn+0x54>
 ad4:	00 c0       	rjmp	.+0      	; 0xad6 <SignIn+0x5e>
 ad6:	00 00       	nop
 ad8:	40 e0       	ldi	r20, 0x00	; 0
 ada:	60 e0       	ldi	r22, 0x00	; 0
 adc:	80 e0       	ldi	r24, 0x00	; 0
 ade:	0e 94 cb 01 	call	0x396	; 0x396 <DIO_voidSetPinValue>
 ae2:	81 e0       	ldi	r24, 0x01	; 1
 ae4:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <lock>
 ae8:	36 c0       	rjmp	.+108    	; 0xb56 <SignIn+0xde>
 aea:	89 ec       	ldi	r24, 0xC9	; 201
 aec:	91 e0       	ldi	r25, 0x01	; 1
 aee:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 af2:	41 e0       	ldi	r20, 0x01	; 1
 af4:	61 e0       	ldi	r22, 0x01	; 1
 af6:	80 e0       	ldi	r24, 0x00	; 0
 af8:	0e 94 cb 01 	call	0x396	; 0x396 <DIO_voidSetPinValue>
 afc:	87 ed       	ldi	r24, 0xD7	; 215
 afe:	91 e0       	ldi	r25, 0x01	; 1
 b00:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 b04:	86 ee       	ldi	r24, 0xE6	; 230
 b06:	91 e0       	ldi	r25, 0x01	; 1
 b08:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 b0c:	8d ea       	ldi	r24, 0xAD	; 173
 b0e:	94 e0       	ldi	r25, 0x04	; 4
 b10:	0e 94 da 02 	call	0x5b4	; 0x5b4 <UART_u8ReceiveDataSynch>
 b14:	80 91 ad 04 	lds	r24, 0x04AD	; 0x8004ad <choose>
 b18:	81 33       	cpi	r24, 0x31	; 49
 b1a:	39 f0       	breq	.+14     	; 0xb2a <SignIn+0xb2>
 b1c:	82 33       	cpi	r24, 0x32	; 50
 b1e:	d9 f0       	breq	.+54     	; 0xb56 <SignIn+0xde>
 b20:	88 ef       	ldi	r24, 0xF8	; 248
 b22:	91 e0       	ldi	r25, 0x01	; 1
 b24:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 b28:	e9 cf       	rjmp	.-46     	; 0xafc <SignIn+0x84>
 b2a:	8c e2       	ldi	r24, 0x2C	; 44
 b2c:	91 e0       	ldi	r25, 0x01	; 1
 b2e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 b32:	ce 01       	movw	r24, r28
 b34:	02 96       	adiw	r24, 0x02	; 2
 b36:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <UART_voidReceiveNumberSynch>
 b3a:	e9 81       	ldd	r30, Y+1	; 0x01
 b3c:	1e 9f       	mul	r17, r30
 b3e:	f0 01       	movw	r30, r0
 b40:	11 24       	eor	r1, r1
 b42:	e3 54       	subi	r30, 0x43	; 67
 b44:	fc 4f       	sbci	r31, 0xFC	; 252
 b46:	20 81       	ld	r18, Z
 b48:	31 81       	ldd	r19, Z+1	; 0x01
 b4a:	8a 81       	ldd	r24, Y+2	; 0x02
 b4c:	9b 81       	ldd	r25, Y+3	; 0x03
 b4e:	28 17       	cp	r18, r24
 b50:	39 07       	cpc	r19, r25
 b52:	59 f6       	brne	.-106    	; 0xaea <SignIn+0x72>
 b54:	a5 cf       	rjmp	.-182    	; 0xaa0 <SignIn+0x28>
 b56:	0f 90       	pop	r0
 b58:	0f 90       	pop	r0
 b5a:	0f 90       	pop	r0
 b5c:	df 91       	pop	r29
 b5e:	cf 91       	pop	r28
 b60:	1f 91       	pop	r17
 b62:	08 95       	ret

00000b64 <Edit>:
 b64:	1f 93       	push	r17
 b66:	cf 93       	push	r28
 b68:	df 93       	push	r29
 b6a:	00 d0       	rcall	.+0      	; 0xb6c <Edit+0x8>
 b6c:	00 d0       	rcall	.+0      	; 0xb6e <Edit+0xa>
 b6e:	cd b7       	in	r28, 0x3d	; 61
 b70:	de b7       	in	r29, 0x3e	; 62
 b72:	81 e1       	ldi	r24, 0x11	; 17
 b74:	92 e0       	ldi	r25, 0x02	; 2
 b76:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 b7a:	ce 01       	movw	r24, r28
 b7c:	01 96       	adiw	r24, 0x01	; 1
 b7e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <UART_u8ReceiveDataSynch>
 b82:	89 81       	ldd	r24, Y+1	; 0x01
 b84:	80 53       	subi	r24, 0x30	; 48
 b86:	89 83       	std	Y+1, r24	; 0x01
 b88:	80 e2       	ldi	r24, 0x20	; 32
 b8a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_voidSendDataSynch>
 b8e:	99 81       	ldd	r25, Y+1	; 0x01
 b90:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <counter>
 b94:	98 17       	cp	r25, r24
 b96:	08 f0       	brcs	.+2      	; 0xb9a <Edit+0x36>
 b98:	7e c0       	rjmp	.+252    	; 0xc96 <Edit+0x132>
 b9a:	80 e2       	ldi	r24, 0x20	; 32
 b9c:	92 e0       	ldi	r25, 0x02	; 2
 b9e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 ba2:	ce 01       	movw	r24, r28
 ba4:	03 96       	adiw	r24, 0x03	; 3
 ba6:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <UART_voidReceiveNumberSynch>
 baa:	80 e2       	ldi	r24, 0x20	; 32
 bac:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_voidSendDataSynch>
 bb0:	e9 81       	ldd	r30, Y+1	; 0x01
 bb2:	86 e1       	ldi	r24, 0x16	; 22
 bb4:	e8 9f       	mul	r30, r24
 bb6:	f0 01       	movw	r30, r0
 bb8:	11 24       	eor	r1, r1
 bba:	e3 54       	subi	r30, 0x43	; 67
 bbc:	fc 4f       	sbci	r31, 0xFC	; 252
 bbe:	20 81       	ld	r18, Z
 bc0:	31 81       	ldd	r19, Z+1	; 0x01
 bc2:	8b 81       	ldd	r24, Y+3	; 0x03
 bc4:	9c 81       	ldd	r25, Y+4	; 0x04
 bc6:	28 17       	cp	r18, r24
 bc8:	39 07       	cpc	r19, r25
 bca:	09 f0       	breq	.+2      	; 0xbce <Edit+0x6a>
 bcc:	5f c0       	rjmp	.+190    	; 0xc8c <Edit+0x128>
 bce:	16 e1       	ldi	r17, 0x16	; 22
 bd0:	85 e3       	ldi	r24, 0x35	; 53
 bd2:	92 e0       	ldi	r25, 0x02	; 2
 bd4:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 bd8:	8f ee       	ldi	r24, 0xEF	; 239
 bda:	90 e0       	ldi	r25, 0x00	; 0
 bdc:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 be0:	ce 01       	movw	r24, r28
 be2:	02 96       	adiw	r24, 0x02	; 2
 be4:	0e 94 da 02 	call	0x5b4	; 0x5b4 <UART_u8ReceiveDataSynch>
 be8:	80 e2       	ldi	r24, 0x20	; 32
 bea:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_voidSendDataSynch>
 bee:	8a 81       	ldd	r24, Y+2	; 0x02
 bf0:	82 33       	cpi	r24, 0x32	; 50
 bf2:	a1 f1       	breq	.+104    	; 0xc5c <Edit+0xf8>
 bf4:	83 33       	cpi	r24, 0x33	; 51
 bf6:	09 f4       	brne	.+2      	; 0xbfa <Edit+0x96>
 bf8:	52 c0       	rjmp	.+164    	; 0xc9e <Edit+0x13a>
 bfa:	81 33       	cpi	r24, 0x31	; 49
 bfc:	49 f7       	brne	.-46     	; 0xbd0 <Edit+0x6c>
 bfe:	89 81       	ldd	r24, Y+1	; 0x01
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	fc 01       	movw	r30, r24
 c04:	ee 0f       	add	r30, r30
 c06:	ff 1f       	adc	r31, r31
 c08:	e2 55       	subi	r30, 0x52	; 82
 c0a:	fb 4f       	sbci	r31, 0xFB	; 251
 c0c:	18 9f       	mul	r17, r24
 c0e:	90 01       	movw	r18, r0
 c10:	19 9f       	mul	r17, r25
 c12:	30 0d       	add	r19, r0
 c14:	11 24       	eor	r1, r1
 c16:	c9 01       	movw	r24, r18
 c18:	81 54       	subi	r24, 0x41	; 65
 c1a:	9c 4f       	sbci	r25, 0xFC	; 252
 c1c:	91 83       	std	Z+1, r25	; 0x01
 c1e:	80 83       	st	Z, r24
 c20:	88 e7       	ldi	r24, 0x78	; 120
 c22:	92 e0       	ldi	r25, 0x02	; 2
 c24:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 c28:	e9 81       	ldd	r30, Y+1	; 0x01
 c2a:	f0 e0       	ldi	r31, 0x00	; 0
 c2c:	ee 0f       	add	r30, r30
 c2e:	ff 1f       	adc	r31, r31
 c30:	e2 55       	subi	r30, 0x52	; 82
 c32:	fb 4f       	sbci	r31, 0xFB	; 251
 c34:	64 e1       	ldi	r22, 0x14	; 20
 c36:	80 81       	ld	r24, Z
 c38:	91 81       	ldd	r25, Z+1	; 0x01
 c3a:	0e 94 33 03 	call	0x666	; 0x666 <UART_voidReceiveStringSynch>
 c3e:	69 81       	ldd	r22, Y+1	; 0x01
 c40:	e6 2f       	mov	r30, r22
 c42:	f0 e0       	ldi	r31, 0x00	; 0
 c44:	ee 0f       	add	r30, r30
 c46:	ff 1f       	adc	r31, r31
 c48:	e2 55       	subi	r30, 0x52	; 82
 c4a:	fb 4f       	sbci	r31, 0xFB	; 251
 c4c:	80 81       	ld	r24, Z
 c4e:	91 81       	ldd	r25, Z+1	; 0x01
 c50:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <EEPROM_voidWriteName>
 c54:	80 e2       	ldi	r24, 0x20	; 32
 c56:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_voidSendDataSynch>
 c5a:	ba cf       	rjmp	.-140    	; 0xbd0 <Edit+0x6c>
 c5c:	83 e9       	ldi	r24, 0x93	; 147
 c5e:	92 e0       	ldi	r25, 0x02	; 2
 c60:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 c64:	ce 01       	movw	r24, r28
 c66:	03 96       	adiw	r24, 0x03	; 3
 c68:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <UART_voidReceiveNumberSynch>
 c6c:	69 81       	ldd	r22, Y+1	; 0x01
 c6e:	8b 81       	ldd	r24, Y+3	; 0x03
 c70:	9c 81       	ldd	r25, Y+4	; 0x04
 c72:	16 9f       	mul	r17, r22
 c74:	f0 01       	movw	r30, r0
 c76:	11 24       	eor	r1, r1
 c78:	e3 54       	subi	r30, 0x43	; 67
 c7a:	fc 4f       	sbci	r31, 0xFC	; 252
 c7c:	91 83       	std	Z+1, r25	; 0x01
 c7e:	80 83       	st	Z, r24
 c80:	0e 94 30 04 	call	0x860	; 0x860 <EEPROM_voidWritePassword>
 c84:	80 e2       	ldi	r24, 0x20	; 32
 c86:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_voidSendDataSynch>
 c8a:	a2 cf       	rjmp	.-188    	; 0xbd0 <Edit+0x6c>
 c8c:	8d ea       	ldi	r24, 0xAD	; 173
 c8e:	92 e0       	ldi	r25, 0x02	; 2
 c90:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 c94:	04 c0       	rjmp	.+8      	; 0xc9e <Edit+0x13a>
 c96:	8d eb       	ldi	r24, 0xBD	; 189
 c98:	92 e0       	ldi	r25, 0x02	; 2
 c9a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 c9e:	0f 90       	pop	r0
 ca0:	0f 90       	pop	r0
 ca2:	0f 90       	pop	r0
 ca4:	0f 90       	pop	r0
 ca6:	df 91       	pop	r29
 ca8:	cf 91       	pop	r28
 caa:	1f 91       	pop	r17
 cac:	08 95       	ret

00000cae <Show>:
 cae:	0f 93       	push	r16
 cb0:	1f 93       	push	r17
 cb2:	cf 93       	push	r28
 cb4:	df 93       	push	r29
 cb6:	1f 92       	push	r1
 cb8:	cd b7       	in	r28, 0x3d	; 61
 cba:	de b7       	in	r29, 0x3e	; 62
 cbc:	81 e1       	ldi	r24, 0x11	; 17
 cbe:	92 e0       	ldi	r25, 0x02	; 2
 cc0:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 cc4:	ce 01       	movw	r24, r28
 cc6:	01 96       	adiw	r24, 0x01	; 1
 cc8:	0e 94 da 02 	call	0x5b4	; 0x5b4 <UART_u8ReceiveDataSynch>
 ccc:	89 81       	ldd	r24, Y+1	; 0x01
 cce:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_voidSendDataSynch>
 cd2:	89 81       	ldd	r24, Y+1	; 0x01
 cd4:	80 53       	subi	r24, 0x30	; 48
 cd6:	89 83       	std	Y+1, r24	; 0x01
 cd8:	80 e2       	ldi	r24, 0x20	; 32
 cda:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_voidSendDataSynch>
 cde:	99 81       	ldd	r25, Y+1	; 0x01
 ce0:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <counter>
 ce4:	98 17       	cp	r25, r24
 ce6:	68 f5       	brcc	.+90     	; 0xd42 <Show+0x94>
 ce8:	85 ed       	ldi	r24, 0xD5	; 213
 cea:	92 e0       	ldi	r25, 0x02	; 2
 cec:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 cf0:	89 81       	ldd	r24, Y+1	; 0x01
 cf2:	16 e1       	ldi	r17, 0x16	; 22
 cf4:	18 9f       	mul	r17, r24
 cf6:	c0 01       	movw	r24, r0
 cf8:	11 24       	eor	r1, r1
 cfa:	81 54       	subi	r24, 0x41	; 65
 cfc:	9c 4f       	sbci	r25, 0xFC	; 252
 cfe:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 d02:	80 e2       	ldi	r24, 0x20	; 32
 d04:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_voidSendDataSynch>
 d08:	82 e3       	ldi	r24, 0x32	; 50
 d0a:	91 e0       	ldi	r25, 0x01	; 1
 d0c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 d10:	09 81       	ldd	r16, Y+1	; 0x01
 d12:	80 2f       	mov	r24, r16
 d14:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <EEPROM_u8SearchForPassword>
 d18:	10 9f       	mul	r17, r16
 d1a:	f0 01       	movw	r30, r0
 d1c:	11 24       	eor	r1, r1
 d1e:	e3 54       	subi	r30, 0x43	; 67
 d20:	fc 4f       	sbci	r31, 0xFC	; 252
 d22:	91 83       	std	Z+1, r25	; 0x01
 d24:	80 83       	st	Z, r24
 d26:	e9 81       	ldd	r30, Y+1	; 0x01
 d28:	1e 9f       	mul	r17, r30
 d2a:	f0 01       	movw	r30, r0
 d2c:	11 24       	eor	r1, r1
 d2e:	e3 54       	subi	r30, 0x43	; 67
 d30:	fc 4f       	sbci	r31, 0xFC	; 252
 d32:	80 81       	ld	r24, Z
 d34:	91 81       	ldd	r25, Z+1	; 0x01
 d36:	0e 94 f7 02 	call	0x5ee	; 0x5ee <UART_voidSendNumberSynch>
 d3a:	80 e2       	ldi	r24, 0x20	; 32
 d3c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <UART_voidSendDataSynch>
 d40:	04 c0       	rjmp	.+8      	; 0xd4a <Show+0x9c>
 d42:	86 ee       	ldi	r24, 0xE6	; 230
 d44:	92 e0       	ldi	r25, 0x02	; 2
 d46:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
 d4a:	0f 90       	pop	r0
 d4c:	df 91       	pop	r29
 d4e:	cf 91       	pop	r28
 d50:	1f 91       	pop	r17
 d52:	0f 91       	pop	r16
 d54:	08 95       	ret

00000d56 <fan>:
		}
	}
	
}

void fan(void){
 d56:	cf 93       	push	r28
 d58:	df 93       	push	r29
 d5a:	1f 92       	push	r1
 d5c:	cd b7       	in	r28, 0x3d	; 61
 d5e:	de b7       	in	r29, 0x3e	; 62
	u8 choose;
	TIMER0_VidPWMInit();
 d60:	0e 94 44 07 	call	0xe88	; 0xe88 <TIMER0_VidPWMInit>
	while(1){
		UART_voidSendStringSynch("1.speed max .		2. speed 50% .		3. speed 25%.		4.stop.			5. back to menu. ");
 d64:	8d ef       	ldi	r24, 0xFD	; 253
 d66:	92 e0       	ldi	r25, 0x02	; 2
 d68:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
		UART_voidSendStringSynch("Your Choice: ");
 d6c:	87 e4       	ldi	r24, 0x47	; 71
 d6e:	93 e0       	ldi	r25, 0x03	; 3
 d70:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
		UART_u8ReceiveDataSynch(&choose);
 d74:	ce 01       	movw	r24, r28
 d76:	01 96       	adiw	r24, 0x01	; 1
 d78:	0e 94 da 02 	call	0x5b4	; 0x5b4 <UART_u8ReceiveDataSynch>
		switch(choose)
 d7c:	89 81       	ldd	r24, Y+1	; 0x01
 d7e:	83 33       	cpi	r24, 0x33	; 51
 d80:	99 f0       	breq	.+38     	; 0xda8 <fan+0x52>
 d82:	28 f4       	brcc	.+10     	; 0xd8e <fan+0x38>
 d84:	81 33       	cpi	r24, 0x31	; 49
 d86:	41 f0       	breq	.+16     	; 0xd98 <fan+0x42>
 d88:	82 33       	cpi	r24, 0x32	; 50
 d8a:	51 f0       	breq	.+20     	; 0xda0 <fan+0x4a>
 d8c:	eb cf       	rjmp	.-42     	; 0xd64 <fan+0xe>
 d8e:	84 33       	cpi	r24, 0x34	; 52
 d90:	79 f0       	breq	.+30     	; 0xdb0 <fan+0x5a>
 d92:	85 33       	cpi	r24, 0x35	; 53
 d94:	89 f0       	breq	.+34     	; 0xdb8 <fan+0x62>
 d96:	e6 cf       	rjmp	.-52     	; 0xd64 <fan+0xe>
		{
			case '1':
			TIMER0_VidPWMDutyCycle(SPEED_MAX);
 d98:	8f ef       	ldi	r24, 0xFF	; 255
 d9a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <TIMER0_VidPWMDutyCycle>
			break;
 d9e:	e2 cf       	rjmp	.-60     	; 0xd64 <fan+0xe>
			case '2':
			TIMER0_VidPWMDutyCycle(SPEED_50);
 da0:	80 e8       	ldi	r24, 0x80	; 128
 da2:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <TIMER0_VidPWMDutyCycle>
			break;
 da6:	de cf       	rjmp	.-68     	; 0xd64 <fan+0xe>
			case '3':
			TIMER0_VidPWMDutyCycle(SPEED_25);
 da8:	80 e4       	ldi	r24, 0x40	; 64
 daa:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <TIMER0_VidPWMDutyCycle>
			break;
 dae:	da cf       	rjmp	.-76     	; 0xd64 <fan+0xe>
			case '4':
			TIMER0_VidPWMDutyCycle(STOP);
 db0:	80 e0       	ldi	r24, 0x00	; 0
 db2:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <TIMER0_VidPWMDutyCycle>
			break;
 db6:	d6 cf       	rjmp	.-84     	; 0xd64 <fan+0xe>
			case '5':
			return;
		}
	}
}
 db8:	0f 90       	pop	r0
 dba:	df 91       	pop	r29
 dbc:	cf 91       	pop	r28
 dbe:	08 95       	ret

00000dc0 <Light>:





void Light(){
 dc0:	cf 93       	push	r28
 dc2:	df 93       	push	r29
 dc4:	1f 92       	push	r1
 dc6:	cd b7       	in	r28, 0x3d	; 61
 dc8:	de b7       	in	r29, 0x3e	; 62
	u8 choose;
	
	UART_voidSendStringSynch("Welcome to our system! ");
 dca:	85 e5       	ldi	r24, 0x55	; 85
 dcc:	93 e0       	ldi	r25, 0x03	; 3
 dce:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
	while(1)
	{
		UART_voidSendStringSynch("1. Toggle Red Light.		2. Toggle Blue Light.		3. Control the Fan.		4. Exit. ");
 dd2:	8d e6       	ldi	r24, 0x6D	; 109
 dd4:	93 e0       	ldi	r25, 0x03	; 3
 dd6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
		UART_voidSendStringSynch("Your Choice: ");
 dda:	87 e4       	ldi	r24, 0x47	; 71
 ddc:	93 e0       	ldi	r25, 0x03	; 3
 dde:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <UART_voidSendStringSynch>
		UART_u8ReceiveDataSynch(&choose);
 de2:	ce 01       	movw	r24, r28
 de4:	01 96       	adiw	r24, 0x01	; 1
 de6:	0e 94 da 02 	call	0x5b4	; 0x5b4 <UART_u8ReceiveDataSynch>

		switch(choose){
 dea:	89 81       	ldd	r24, Y+1	; 0x01
 dec:	82 33       	cpi	r24, 0x32	; 50
 dee:	79 f0       	breq	.+30     	; 0xe0e <Light+0x4e>
 df0:	18 f4       	brcc	.+6      	; 0xdf8 <Light+0x38>
 df2:	81 33       	cpi	r24, 0x31	; 49
 df4:	31 f0       	breq	.+12     	; 0xe02 <Light+0x42>
 df6:	ed cf       	rjmp	.-38     	; 0xdd2 <Light+0x12>
 df8:	83 33       	cpi	r24, 0x33	; 51
 dfa:	79 f0       	breq	.+30     	; 0xe1a <Light+0x5a>
 dfc:	84 33       	cpi	r24, 0x34	; 52
 dfe:	81 f0       	breq	.+32     	; 0xe20 <Light+0x60>
 e00:	e8 cf       	rjmp	.-48     	; 0xdd2 <Light+0x12>
	
			case '1':	
				DIO_voidSetPinValue(LED_PORT,RED_LED, DIO_TOGGLE);
 e02:	42 e0       	ldi	r20, 0x02	; 2
 e04:	63 e0       	ldi	r22, 0x03	; 3
 e06:	80 e0       	ldi	r24, 0x00	; 0
 e08:	0e 94 cb 01 	call	0x396	; 0x396 <DIO_voidSetPinValue>
				break;
 e0c:	e2 cf       	rjmp	.-60     	; 0xdd2 <Light+0x12>
			case '2':
				DIO_voidSetPinValue(LED_PORT,BLUE_LED, DIO_TOGGLE);
 e0e:	42 e0       	ldi	r20, 0x02	; 2
 e10:	64 e0       	ldi	r22, 0x04	; 4
 e12:	80 e0       	ldi	r24, 0x00	; 0
 e14:	0e 94 cb 01 	call	0x396	; 0x396 <DIO_voidSetPinValue>
				break;
 e18:	dc cf       	rjmp	.-72     	; 0xdd2 <Light+0x12>
			case '3':
				//case 3 edited
				fan();
 e1a:	0e 94 ab 06 	call	0xd56	; 0xd56 <fan>
				break;
 e1e:	d9 cf       	rjmp	.-78     	; 0xdd2 <Light+0x12>
			case '4':	
				DIO_voidSetPortValue(LED_PORT, 0x00);
 e20:	60 e0       	ldi	r22, 0x00	; 0
 e22:	80 e0       	ldi	r24, 0x00	; 0
 e24:	0e 94 a2 02 	call	0x544	; 0x544 <DIO_voidSetPortValue>
				TIMER0_VidPWMDutyCycle(STOP);	//turn off the DC fan
 e28:	80 e0       	ldi	r24, 0x00	; 0
 e2a:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <TIMER0_VidPWMDutyCycle>
				return;
		}
	}
	
}
 e2e:	0f 90       	pop	r0
 e30:	df 91       	pop	r29
 e32:	cf 91       	pop	r28
 e34:	08 95       	ret

00000e36 <MovToStruct>:
			return;
		}
	}
}

void MovToStruct(void){
 e36:	0f 93       	push	r16
 e38:	1f 93       	push	r17
 e3a:	cf 93       	push	r28
 e3c:	df 93       	push	r29
	u8 i = 0;
	for(i = 0; i<counter; i++){
 e3e:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <counter>
 e42:	88 23       	and	r24, r24
 e44:	e1 f0       	breq	.+56     	; 0xe7e <MovToStruct+0x48>
 e46:	c0 e0       	ldi	r28, 0x00	; 0
		users[i].password = EEPROM_u8SearchForPassword(i);
 e48:	d6 e1       	ldi	r29, 0x16	; 22
 e4a:	0c 2f       	mov	r16, r28
 e4c:	10 e0       	ldi	r17, 0x00	; 0
 e4e:	8c 2f       	mov	r24, r28
 e50:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <EEPROM_u8SearchForPassword>
 e54:	d0 9f       	mul	r29, r16
 e56:	90 01       	movw	r18, r0
 e58:	d1 9f       	mul	r29, r17
 e5a:	30 0d       	add	r19, r0
 e5c:	11 24       	eor	r1, r1
 e5e:	f9 01       	movw	r30, r18
 e60:	e3 54       	subi	r30, 0x43	; 67
 e62:	fc 4f       	sbci	r31, 0xFC	; 252
 e64:	91 83       	std	Z+1, r25	; 0x01
 e66:	80 83       	st	Z, r24
		EEPROM_u8SearchForName(users[i].name,i);
 e68:	6c 2f       	mov	r22, r28
 e6a:	c9 01       	movw	r24, r18
 e6c:	81 54       	subi	r24, 0x41	; 65
 e6e:	9c 4f       	sbci	r25, 0xFC	; 252
 e70:	0e 94 12 05 	call	0xa24	; 0xa24 <EEPROM_u8SearchForName>
	}
}

void MovToStruct(void){
	u8 i = 0;
	for(i = 0; i<counter; i++){
 e74:	cf 5f       	subi	r28, 0xFF	; 255
 e76:	80 91 bc 03 	lds	r24, 0x03BC	; 0x8003bc <counter>
 e7a:	c8 17       	cp	r28, r24
 e7c:	30 f3       	brcs	.-52     	; 0xe4a <MovToStruct+0x14>
		users[i].password = EEPROM_u8SearchForPassword(i);
		EEPROM_u8SearchForName(users[i].name,i);
	} 
}
 e7e:	df 91       	pop	r29
 e80:	cf 91       	pop	r28
 e82:	1f 91       	pop	r17
 e84:	0f 91       	pop	r16
 e86:	08 95       	ret

00000e88 <TIMER0_VidPWMInit>:
#include"LIB/STD_TYPES.h"
#include "TIMER_Register.h"
void TIMER0_VidPWMInit(void)
{
	//TIMER0 FAST PWM mode
	SET_BIT(TCCR0,6);
 e88:	83 b7       	in	r24, 0x33	; 51
 e8a:	80 64       	ori	r24, 0x40	; 64
 e8c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,3);
 e8e:	83 b7       	in	r24, 0x33	; 51
 e90:	88 60       	ori	r24, 0x08	; 8
 e92:	83 bf       	out	0x33, r24	; 51
	
	//TIMER0 FAST PWM CLEAR ON CTC
		CLR_BIT(TCCR0,4);
 e94:	83 b7       	in	r24, 0x33	; 51
 e96:	8f 7e       	andi	r24, 0xEF	; 239
 e98:	83 bf       	out	0x33, r24	; 51
		SET_BIT(TCCR0,5);
 e9a:	83 b7       	in	r24, 0x33	; 51
 e9c:	80 62       	ori	r24, 0x20	; 32
 e9e:	83 bf       	out	0x33, r24	; 51

	//TIMER0 prescaler 64
	SET_BIT(TCCR0,0);
 ea0:	83 b7       	in	r24, 0x33	; 51
 ea2:	81 60       	ori	r24, 0x01	; 1
 ea4:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,1);
 ea6:	83 b7       	in	r24, 0x33	; 51
 ea8:	82 60       	ori	r24, 0x02	; 2
 eaa:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0,2);
 eac:	83 b7       	in	r24, 0x33	; 51
 eae:	8b 7f       	andi	r24, 0xFB	; 251
 eb0:	83 bf       	out	0x33, r24	; 51
 eb2:	08 95       	ret

00000eb4 <TIMER0_VidPWMDutyCycle>:
}
void TIMER0_VidPWMDutyCycle(u8 u8_OCR0)
{
	OCR0=u8_OCR0;
 eb4:	8c bf       	out	0x3c, r24	; 60
 eb6:	08 95       	ret

00000eb8 <__udivmodhi4>:
 eb8:	aa 1b       	sub	r26, r26
 eba:	bb 1b       	sub	r27, r27
 ebc:	51 e1       	ldi	r21, 0x11	; 17
 ebe:	07 c0       	rjmp	.+14     	; 0xece <__udivmodhi4_ep>

00000ec0 <__udivmodhi4_loop>:
 ec0:	aa 1f       	adc	r26, r26
 ec2:	bb 1f       	adc	r27, r27
 ec4:	a6 17       	cp	r26, r22
 ec6:	b7 07       	cpc	r27, r23
 ec8:	10 f0       	brcs	.+4      	; 0xece <__udivmodhi4_ep>
 eca:	a6 1b       	sub	r26, r22
 ecc:	b7 0b       	sbc	r27, r23

00000ece <__udivmodhi4_ep>:
 ece:	88 1f       	adc	r24, r24
 ed0:	99 1f       	adc	r25, r25
 ed2:	5a 95       	dec	r21
 ed4:	a9 f7       	brne	.-22     	; 0xec0 <__udivmodhi4_loop>
 ed6:	80 95       	com	r24
 ed8:	90 95       	com	r25
 eda:	bc 01       	movw	r22, r24
 edc:	cd 01       	movw	r24, r26
 ede:	08 95       	ret

00000ee0 <__umulhisi3>:
 ee0:	a2 9f       	mul	r26, r18
 ee2:	b0 01       	movw	r22, r0
 ee4:	b3 9f       	mul	r27, r19
 ee6:	c0 01       	movw	r24, r0
 ee8:	a3 9f       	mul	r26, r19
 eea:	70 0d       	add	r23, r0
 eec:	81 1d       	adc	r24, r1
 eee:	11 24       	eor	r1, r1
 ef0:	91 1d       	adc	r25, r1
 ef2:	b2 9f       	mul	r27, r18
 ef4:	70 0d       	add	r23, r0
 ef6:	81 1d       	adc	r24, r1
 ef8:	11 24       	eor	r1, r1
 efa:	91 1d       	adc	r25, r1
 efc:	08 95       	ret

00000efe <_exit>:
 efe:	f8 94       	cli

00000f00 <__stop_program>:
 f00:	ff cf       	rjmp	.-2      	; 0xf00 <__stop_program>
