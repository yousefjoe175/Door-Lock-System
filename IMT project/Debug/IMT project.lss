
IMT project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000096c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000024c  00800060  0000096c  00000a00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a2  008002ac  008002ac  00000c4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015a4  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000955  00000000  00000000  0000235c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aea  00000000  00000000  00002cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000284  00000000  00000000  0000379c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ed  00000000  00000000  00003a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aef  00000000  00000000  0000400d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004afc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3a       	cpi	r26, 0xAC	; 172
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	ac ea       	ldi	r26, 0xAC	; 172
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 34       	cpi	r26, 0x4E	; 78
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 b4 04 	jmp	0x968	; 0x968 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "MCAL/UART.h"



int main (void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	u8 choose;
	UART_voidInit();
  9c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <UART_voidInit>
	while(1){
		UART_voidSendStringSynch("1. Enter new user name. ");
  a0:	80 e6       	ldi	r24, 0x60	; 96
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
		UART_voidSendStringSynch("2. Sign In. ");
  a8:	89 e7       	ldi	r24, 0x79	; 121
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
		UART_voidSendStringSynch("3. Edit current data. ");
  b0:	86 e8       	ldi	r24, 0x86	; 134
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
		UART_voidSendStringSynch("4. Show current data. ");
  b8:	8d e9       	ldi	r24, 0x9D	; 157
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
		UART_voidSendStringSynch("Choose a choice: ");
  c0:	84 eb       	ldi	r24, 0xB4	; 180
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
		UART_u8ReceiveDataSynch(&choose);			//enter '+' after you insert your choice
  c8:	ce 01       	movw	r24, r28
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	0e 94 8b 01 	call	0x316	; 0x316 <UART_u8ReceiveDataSynch>
		UART_voidSendDataSynch(choose);
  d0:	89 81       	ldd	r24, Y+1	; 0x01
  d2:	0e 94 84 01 	call	0x308	; 0x308 <UART_voidSendDataSynch>
		UART_voidSendDataSynch(' ');
  d6:	80 e2       	ldi	r24, 0x20	; 32
  d8:	0e 94 84 01 	call	0x308	; 0x308 <UART_voidSendDataSynch>
		switch(choose){
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	82 33       	cpi	r24, 0x32	; 50
  e0:	61 f0       	breq	.+24     	; 0xfa <main+0x68>
  e2:	18 f4       	brcc	.+6      	; 0xea <main+0x58>
  e4:	81 33       	cpi	r24, 0x31	; 49
  e6:	31 f0       	breq	.+12     	; 0xf4 <main+0x62>
  e8:	db cf       	rjmp	.-74     	; 0xa0 <main+0xe>
  ea:	83 33       	cpi	r24, 0x33	; 51
  ec:	89 f0       	breq	.+34     	; 0x110 <main+0x7e>
  ee:	84 33       	cpi	r24, 0x34	; 52
  f0:	91 f0       	breq	.+36     	; 0x116 <main+0x84>
  f2:	d6 cf       	rjmp	.-84     	; 0xa0 <main+0xe>
			case '1':
				new();
  f4:	0e 94 9d 02 	call	0x53a	; 0x53a <new>
				break;
  f8:	d3 cf       	rjmp	.-90     	; 0xa0 <main+0xe>
			case '2':
				SignIn();
  fa:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <SignIn>
				if(lock == 2)
  fe:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <__data_end>
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	59 f0       	breq	.+22     	; 0x11c <main+0x8a>
					return 0;
				if(lock == 1)
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	59 f6       	brne	.-106    	; 0xa0 <main+0xe>
					Light();
 10a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <Light>
 10e:	c8 cf       	rjmp	.-112    	; 0xa0 <main+0xe>
				break;
			case '3':
				Edit();
 110:	0e 94 5f 03 	call	0x6be	; 0x6be <Edit>
				break;
 114:	c5 cf       	rjmp	.-118    	; 0xa0 <main+0xe>
			case '4':
				Show();
 116:	0e 94 02 04 	call	0x804	; 0x804 <Show>
 11a:	c2 cf       	rjmp	.-124    	; 0xa0 <main+0xe>
			
		}
	}
	return 0;

}
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0f 90       	pop	r0
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <DIO_voidSetPinValue>:
		}

		return Local_u8PinValue;

	}
}
 128:	84 30       	cpi	r24, 0x04	; 4
 12a:	08 f0       	brcs	.+2      	; 0x12e <DIO_voidSetPinValue+0x6>
 12c:	a9 c0       	rjmp	.+338    	; 0x280 <DIO_voidSetPinValue+0x158>
 12e:	68 30       	cpi	r22, 0x08	; 8
 130:	08 f0       	brcs	.+2      	; 0x134 <DIO_voidSetPinValue+0xc>
 132:	a6 c0       	rjmp	.+332    	; 0x280 <DIO_voidSetPinValue+0x158>
 134:	41 30       	cpi	r20, 0x01	; 1
 136:	e9 f1       	breq	.+122    	; 0x1b2 <DIO_voidSetPinValue+0x8a>
 138:	20 f0       	brcs	.+8      	; 0x142 <DIO_voidSetPinValue+0x1a>
 13a:	42 30       	cpi	r20, 0x02	; 2
 13c:	09 f4       	brne	.+2      	; 0x140 <DIO_voidSetPinValue+0x18>
 13e:	6d c0       	rjmp	.+218    	; 0x21a <DIO_voidSetPinValue+0xf2>
 140:	08 95       	ret
 142:	81 30       	cpi	r24, 0x01	; 1
 144:	91 f0       	breq	.+36     	; 0x16a <DIO_voidSetPinValue+0x42>
 146:	28 f0       	brcs	.+10     	; 0x152 <DIO_voidSetPinValue+0x2a>
 148:	82 30       	cpi	r24, 0x02	; 2
 14a:	d9 f0       	breq	.+54     	; 0x182 <DIO_voidSetPinValue+0x5a>
 14c:	83 30       	cpi	r24, 0x03	; 3
 14e:	29 f1       	breq	.+74     	; 0x19a <DIO_voidSetPinValue+0x72>
 150:	08 95       	ret
 152:	2b b3       	in	r18, 0x1b	; 27
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_voidSetPinValue+0x36>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_voidSetPinValue+0x32>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	8b bb       	out	0x1b, r24	; 27
 168:	08 95       	ret
 16a:	28 b3       	in	r18, 0x18	; 24
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_voidSetPinValue+0x4e>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_voidSetPinValue+0x4a>
 17a:	80 95       	com	r24
 17c:	82 23       	and	r24, r18
 17e:	88 bb       	out	0x18, r24	; 24
 180:	08 95       	ret
 182:	25 b3       	in	r18, 0x15	; 21
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <DIO_voidSetPinValue+0x66>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <DIO_voidSetPinValue+0x62>
 192:	80 95       	com	r24
 194:	82 23       	and	r24, r18
 196:	85 bb       	out	0x15, r24	; 21
 198:	08 95       	ret
 19a:	22 b3       	in	r18, 0x12	; 18
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_voidSetPinValue+0x7e>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_voidSetPinValue+0x7a>
 1aa:	80 95       	com	r24
 1ac:	82 23       	and	r24, r18
 1ae:	82 bb       	out	0x12, r24	; 18
 1b0:	08 95       	ret
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	89 f0       	breq	.+34     	; 0x1d8 <DIO_voidSetPinValue+0xb0>
 1b6:	28 f0       	brcs	.+10     	; 0x1c2 <DIO_voidSetPinValue+0x9a>
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	c9 f0       	breq	.+50     	; 0x1ee <DIO_voidSetPinValue+0xc6>
 1bc:	83 30       	cpi	r24, 0x03	; 3
 1be:	11 f1       	breq	.+68     	; 0x204 <DIO_voidSetPinValue+0xdc>
 1c0:	08 95       	ret
 1c2:	2b b3       	in	r18, 0x1b	; 27
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_voidSetPinValue+0xa6>
 1ca:	88 0f       	add	r24, r24
 1cc:	99 1f       	adc	r25, r25
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_voidSetPinValue+0xa2>
 1d2:	82 2b       	or	r24, r18
 1d4:	8b bb       	out	0x1b, r24	; 27
 1d6:	08 95       	ret
 1d8:	28 b3       	in	r18, 0x18	; 24
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_voidSetPinValue+0xbc>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_voidSetPinValue+0xb8>
 1e8:	82 2b       	or	r24, r18
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	08 95       	ret
 1ee:	25 b3       	in	r18, 0x15	; 21
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_voidSetPinValue+0xd2>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_voidSetPinValue+0xce>
 1fe:	82 2b       	or	r24, r18
 200:	85 bb       	out	0x15, r24	; 21
 202:	08 95       	ret
 204:	22 b3       	in	r18, 0x12	; 18
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_voidSetPinValue+0xe8>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_voidSetPinValue+0xe4>
 214:	82 2b       	or	r24, r18
 216:	82 bb       	out	0x12, r24	; 18
 218:	08 95       	ret
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	89 f0       	breq	.+34     	; 0x240 <DIO_voidSetPinValue+0x118>
 21e:	28 f0       	brcs	.+10     	; 0x22a <DIO_voidSetPinValue+0x102>
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	c9 f0       	breq	.+50     	; 0x256 <DIO_voidSetPinValue+0x12e>
 224:	83 30       	cpi	r24, 0x03	; 3
 226:	11 f1       	breq	.+68     	; 0x26c <DIO_voidSetPinValue+0x144>
 228:	08 95       	ret
 22a:	2b b3       	in	r18, 0x1b	; 27
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_voidSetPinValue+0x10e>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_voidSetPinValue+0x10a>
 23a:	82 27       	eor	r24, r18
 23c:	8b bb       	out	0x1b, r24	; 27
 23e:	08 95       	ret
 240:	28 b3       	in	r18, 0x18	; 24
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_voidSetPinValue+0x124>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	6a 95       	dec	r22
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_voidSetPinValue+0x120>
 250:	82 27       	eor	r24, r18
 252:	88 bb       	out	0x18, r24	; 24
 254:	08 95       	ret
 256:	25 b3       	in	r18, 0x15	; 21
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_voidSetPinValue+0x13a>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_voidSetPinValue+0x136>
 266:	82 27       	eor	r24, r18
 268:	85 bb       	out	0x15, r24	; 21
 26a:	08 95       	ret
 26c:	22 b3       	in	r18, 0x12	; 18
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_voidSetPinValue+0x150>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_voidSetPinValue+0x14c>
 27c:	82 27       	eor	r24, r18
 27e:	82 bb       	out	0x12, r24	; 18
 280:	08 95       	ret

00000282 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8PortNB,u8 Copy_u8PortDirection){
	/* input validation */
	if(Copy_u8PortNB>DIO_PORTD ){
 282:	84 30       	cpi	r24, 0x04	; 4
 284:	38 f5       	brcc	.+78     	; 0x2d4 <DIO_voidSetPortDirection+0x52>
		#warning "You Entered invalid inputs"
		return;
	}
	else
	{
		switch(Copy_u8PortDirection){
 286:	66 23       	and	r22, r22
 288:	b1 f0       	breq	.+44     	; 0x2b6 <DIO_voidSetPortDirection+0x34>
 28a:	61 30       	cpi	r22, 0x01	; 1
 28c:	19 f5       	brne	.+70     	; 0x2d4 <DIO_voidSetPortDirection+0x52>
			case DIO_HIGH:
			switch (Copy_u8PortNB){
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	49 f0       	breq	.+18     	; 0x2a4 <DIO_voidSetPortDirection+0x22>
 292:	28 f0       	brcs	.+10     	; 0x29e <DIO_voidSetPortDirection+0x1c>
 294:	82 30       	cpi	r24, 0x02	; 2
 296:	49 f0       	breq	.+18     	; 0x2aa <DIO_voidSetPortDirection+0x28>
 298:	83 30       	cpi	r24, 0x03	; 3
 29a:	51 f0       	breq	.+20     	; 0x2b0 <DIO_voidSetPortDirection+0x2e>
 29c:	08 95       	ret
				case DIO_PORTA: DDRA = 0xff; break;
 29e:	8f ef       	ldi	r24, 0xFF	; 255
 2a0:	8a bb       	out	0x1a, r24	; 26
 2a2:	08 95       	ret
				case DIO_PORTB: DDRB = 0xff; break;
 2a4:	8f ef       	ldi	r24, 0xFF	; 255
 2a6:	87 bb       	out	0x17, r24	; 23
 2a8:	08 95       	ret
				case DIO_PORTC: DDRC = 0xff; break;
 2aa:	8f ef       	ldi	r24, 0xFF	; 255
 2ac:	84 bb       	out	0x14, r24	; 20
 2ae:	08 95       	ret
				case DIO_PORTD: DDRD = 0xff; break;
 2b0:	8f ef       	ldi	r24, 0xFF	; 255
 2b2:	81 bb       	out	0x11, r24	; 17
 2b4:	08 95       	ret
			}
			break;

			case  DIO_LOW:
			switch (Copy_u8PortNB){
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	41 f0       	breq	.+16     	; 0x2ca <DIO_voidSetPortDirection+0x48>
 2ba:	28 f0       	brcs	.+10     	; 0x2c6 <DIO_voidSetPortDirection+0x44>
 2bc:	82 30       	cpi	r24, 0x02	; 2
 2be:	39 f0       	breq	.+14     	; 0x2ce <DIO_voidSetPortDirection+0x4c>
 2c0:	83 30       	cpi	r24, 0x03	; 3
 2c2:	39 f0       	breq	.+14     	; 0x2d2 <DIO_voidSetPortDirection+0x50>
 2c4:	08 95       	ret
				case DIO_PORTA: DDRA = 0x00; break;
 2c6:	1a ba       	out	0x1a, r1	; 26
 2c8:	08 95       	ret
				case DIO_PORTB: DDRB = 0x00; break;
 2ca:	17 ba       	out	0x17, r1	; 23
 2cc:	08 95       	ret
				case DIO_PORTC: DDRC = 0x00; break;
 2ce:	14 ba       	out	0x14, r1	; 20
 2d0:	08 95       	ret
				case DIO_PORTD: DDRD = 0x00; break;
 2d2:	11 ba       	out	0x11, r1	; 17
 2d4:	08 95       	ret

000002d6 <DIO_voidSetPortValue>:
}

/* set the value of a port chosen by the user */
void DIO_voidSetPortValue(u8 Copy_u8PortNB, u8 Copy_u8PinValue){
/* input validation */
	if(Copy_u8PortNB>DIO_PORTD ){
 2d6:	84 30       	cpi	r24, 0x04	; 4
 2d8:	78 f4       	brcc	.+30     	; 0x2f8 <DIO_voidSetPortValue+0x22>
		#warning "You Entered invalid inputs"
		return;
	}
	else{
		switch(Copy_u8PortNB){
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	41 f0       	breq	.+16     	; 0x2ee <DIO_voidSetPortValue+0x18>
 2de:	28 f0       	brcs	.+10     	; 0x2ea <DIO_voidSetPortValue+0x14>
 2e0:	82 30       	cpi	r24, 0x02	; 2
 2e2:	39 f0       	breq	.+14     	; 0x2f2 <DIO_voidSetPortValue+0x1c>
 2e4:	83 30       	cpi	r24, 0x03	; 3
 2e6:	39 f0       	breq	.+14     	; 0x2f6 <DIO_voidSetPortValue+0x20>
 2e8:	08 95       	ret
			case DIO_PORTA: PORTA = Copy_u8PinValue; break;
 2ea:	6b bb       	out	0x1b, r22	; 27
 2ec:	08 95       	ret
			case DIO_PORTB: PORTB = Copy_u8PinValue; break;
 2ee:	68 bb       	out	0x18, r22	; 24
 2f0:	08 95       	ret
			case DIO_PORTC: PORTC = Copy_u8PinValue; break;
 2f2:	65 bb       	out	0x15, r22	; 21
 2f4:	08 95       	ret
			case DIO_PORTD: PORTD = Copy_u8PinValue; break;
 2f6:	62 bb       	out	0x12, r22	; 18
 2f8:	08 95       	ret

000002fa <UART_voidInit>:
void UART_voidInit(void){
	u8  ucsrb, ucsrc;	
	ucsrb = ucsrb |(1<<TXEN | 1<<RXEN);		//Enable TX and RX.    //we didn't set the interrupts yet
	ucsrc = ucsrc |(1<<URSEL| 3<<UCSZ);		//select UCSRC and set the character size to 8 bit.
	
	UBRRL = 51;		//baudrate 9600 for 8MHz
 2fa:	83 e3       	ldi	r24, 0x33	; 51
 2fc:	89 b9       	out	0x09, r24	; 9
	
	UCSRB = ucsrb;	//Enable RX , TX only without interrupts
 2fe:	88 e1       	ldi	r24, 0x18	; 24
 300:	8a b9       	out	0x0a, r24	; 10
	UCSRC = ucsrc;	//8-bit data
 302:	86 e8       	ldi	r24, 0x86	; 134
 304:	80 bd       	out	0x20, r24	; 32
 306:	08 95       	ret

00000308 <UART_voidSendDataSynch>:


//For Polling transmission and reception
void UART_voidSendDataSynch(u8 Copy_u8Data){
	
	while(GET_BIT(UCSRA,UDRE) == 0);	//wait until the Data Registe Embty is set
 308:	5d 9b       	sbis	0x0b, 5	; 11
 30a:	fe cf       	rjmp	.-4      	; 0x308 <UART_voidSendDataSynch>
	UDR = Copy_u8Data;
 30c:	8c b9       	out	0x0c, r24	; 12
	while(GET_BIT(UCSRA,TXC) == 0);	//wait until data is transmitted
 30e:	5e 9b       	sbis	0x0b, 6	; 11
 310:	fe cf       	rjmp	.-4      	; 0x30e <UART_voidSendDataSynch+0x6>
	SET_BIT(UCSRA,TXC);	//clear the flag of TX complete
 312:	5e 9a       	sbi	0x0b, 6	; 11
 314:	08 95       	ret

00000316 <UART_u8ReceiveDataSynch>:
}

void UART_u8ReceiveDataSynch(u8 *Copy_pu8Data){
	while(GET_BIT(UCSRA,RXC)==0);	//wait until there's data to be read in the receive buffer
 316:	5f 9b       	sbis	0x0b, 7	; 11
 318:	fe cf       	rjmp	.-4      	; 0x316 <UART_u8ReceiveDataSynch>
	SET_BIT(UCSRA,RXC);				//clear the receive flag 
 31a:	5f 9a       	sbi	0x0b, 7	; 11
	*Copy_pu8Data = UDR;			//send the received character to the addressed variable
 31c:	2c b1       	in	r18, 0x0c	; 12
 31e:	fc 01       	movw	r30, r24
 320:	20 83       	st	Z, r18
 322:	08 95       	ret

00000324 <UART_voidSendStringSynch>:
}

void UART_voidSendStringSynch(u8* Copy_pu8String){
 324:	0f 93       	push	r16
 326:	1f 93       	push	r17
 328:	cf 93       	push	r28
 32a:	fc 01       	movw	r30, r24
	u8 counter = 0;
		while(Copy_pu8String[counter] != '\0'){
 32c:	80 81       	ld	r24, Z
 32e:	88 23       	and	r24, r24
 330:	59 f0       	breq	.+22     	; 0x348 <UART_voidSendStringSynch+0x24>
 332:	8f 01       	movw	r16, r30
 334:	c0 e0       	ldi	r28, 0x00	; 0
			
			UART_voidSendDataSynch(Copy_pu8String[counter]);
 336:	0e 94 84 01 	call	0x308	; 0x308 <UART_voidSendDataSynch>
			counter++;
 33a:	cf 5f       	subi	r28, 0xFF	; 255
	*Copy_pu8Data = UDR;			//send the received character to the addressed variable
}

void UART_voidSendStringSynch(u8* Copy_pu8String){
	u8 counter = 0;
		while(Copy_pu8String[counter] != '\0'){
 33c:	f8 01       	movw	r30, r16
 33e:	ec 0f       	add	r30, r28
 340:	f1 1d       	adc	r31, r1
 342:	80 81       	ld	r24, Z
 344:	81 11       	cpse	r24, r1
 346:	f7 cf       	rjmp	.-18     	; 0x336 <UART_voidSendStringSynch+0x12>
			UART_voidSendDataSynch(Copy_pu8String[counter]);
			counter++;
		}
		
	
}
 348:	cf 91       	pop	r28
 34a:	1f 91       	pop	r17
 34c:	0f 91       	pop	r16
 34e:	08 95       	ret

00000350 <UART_voidSendNumberSynch>:

void UART_voidSendNumberSynch(u32 Copy_u32Number){
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	fc 01       	movw	r30, r24
	u8 SentChar;
	u32 y = 1;
 35a:	c1 e0       	ldi	r28, 0x01	; 1
 35c:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(Copy_u32Number/(10*y) !=0){
 35e:	01 c0       	rjmp	.+2      	; 0x362 <UART_voidSendNumberSynch+0x12>
		y*=10;
 360:	e9 01       	movw	r28, r18

void UART_voidSendNumberSynch(u32 Copy_u32Number){
	u8 SentChar;
	u32 y = 1;
	
	while(Copy_u32Number/(10*y) !=0){
 362:	ce 01       	movw	r24, r28
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	9e 01       	movw	r18, r28
 372:	22 0f       	add	r18, r18
 374:	33 1f       	adc	r19, r19
 376:	28 0f       	add	r18, r24
 378:	39 1f       	adc	r19, r25
 37a:	cf 01       	movw	r24, r30
 37c:	b9 01       	movw	r22, r18
 37e:	0e 94 91 04 	call	0x922	; 0x922 <__udivmodhi4>
 382:	67 2b       	or	r22, r23
 384:	69 f7       	brne	.-38     	; 0x360 <UART_voidSendNumberSynch+0x10>
		y*=10;
	}
	while(Copy_u32Number !=0){
 386:	30 97       	sbiw	r30, 0x00	; 0
 388:	d1 f0       	breq	.+52     	; 0x3be <UART_voidSendNumberSynch+0x6e>
		SentChar = (Copy_u32Number/y)+'0';
		UART_voidSendDataSynch(SentChar);
 38a:	cf 01       	movw	r24, r30
 38c:	be 01       	movw	r22, r28
 38e:	0e 94 91 04 	call	0x922	; 0x922 <__udivmodhi4>
 392:	08 2f       	mov	r16, r24
 394:	19 2f       	mov	r17, r25
 396:	80 e3       	ldi	r24, 0x30	; 48
 398:	86 0f       	add	r24, r22
 39a:	0e 94 84 01 	call	0x308	; 0x308 <UART_voidSendDataSynch>
		Copy_u32Number %=y;
 39e:	e0 2f       	mov	r30, r16
 3a0:	f1 2f       	mov	r31, r17
		y/=10;
 3a2:	9e 01       	movw	r18, r28
 3a4:	ad ec       	ldi	r26, 0xCD	; 205
 3a6:	bc ec       	ldi	r27, 0xCC	; 204
 3a8:	0e 94 a5 04 	call	0x94a	; 0x94a <__umulhisi3>
 3ac:	ec 01       	movw	r28, r24
 3ae:	d6 95       	lsr	r29
 3b0:	c7 95       	ror	r28
 3b2:	d6 95       	lsr	r29
 3b4:	c7 95       	ror	r28
 3b6:	d6 95       	lsr	r29
 3b8:	c7 95       	ror	r28
	u32 y = 1;
	
	while(Copy_u32Number/(10*y) !=0){
		y*=10;
	}
	while(Copy_u32Number !=0){
 3ba:	30 97       	sbiw	r30, 0x00	; 0
 3bc:	31 f7       	brne	.-52     	; 0x38a <UART_voidSendNumberSynch+0x3a>
		SentChar = (Copy_u32Number/y)+'0';
		UART_voidSendDataSynch(SentChar);
		Copy_u32Number %=y;
		y/=10;
	}
}
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	1f 91       	pop	r17
 3c4:	0f 91       	pop	r16
 3c6:	08 95       	ret

000003c8 <UART_voidReceiveStringSynch>:

void UART_voidReceiveStringSynch(u8* Copy_pu8Data , u8 BufferSize){
 3c8:	cf 92       	push	r12
 3ca:	df 92       	push	r13
 3cc:	ef 92       	push	r14
 3ce:	ff 92       	push	r15
 3d0:	1f 93       	push	r17
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
 3d6:	6c 01       	movw	r12, r24
	
	u8 counter = -1;
 3d8:	1f ef       	ldi	r17, 0xFF	; 255
	do{
		counter++;
		UART_u8ReceiveDataSynch(Copy_pu8Data+counter);
		UART_voidSendDataSynch(Copy_pu8Data[counter]);
	}while(Copy_pu8Data[counter] != '+' && counter < BufferSize-1 );				//loop until Enter is pressed and is less than the last element of the buffer
 3da:	e6 2e       	mov	r14, r22
 3dc:	f1 2c       	mov	r15, r1
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	e8 1a       	sub	r14, r24
 3e2:	f1 08       	sbc	r15, r1

void UART_voidReceiveStringSynch(u8* Copy_pu8Data , u8 BufferSize){
	
	u8 counter = -1;
	do{
		counter++;
 3e4:	1f 5f       	subi	r17, 0xFF	; 255
		UART_u8ReceiveDataSynch(Copy_pu8Data+counter);
 3e6:	e6 01       	movw	r28, r12
 3e8:	c1 0f       	add	r28, r17
 3ea:	d1 1d       	adc	r29, r1
 3ec:	ce 01       	movw	r24, r28
 3ee:	0e 94 8b 01 	call	0x316	; 0x316 <UART_u8ReceiveDataSynch>
		UART_voidSendDataSynch(Copy_pu8Data[counter]);
 3f2:	88 81       	ld	r24, Y
 3f4:	0e 94 84 01 	call	0x308	; 0x308 <UART_voidSendDataSynch>
	}while(Copy_pu8Data[counter] != '+' && counter < BufferSize-1 );				//loop until Enter is pressed and is less than the last element of the buffer
 3f8:	88 81       	ld	r24, Y
 3fa:	8b 32       	cpi	r24, 0x2B	; 43
 3fc:	29 f0       	breq	.+10     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fe:	81 2f       	mov	r24, r17
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	8e 15       	cp	r24, r14
 404:	9f 05       	cpc	r25, r15
 406:	74 f3       	brlt	.-36     	; 0x3e4 <UART_voidReceiveStringSynch+0x1c>
	Copy_pu8Data[counter] = '\0';			//put the null character at the last element of the buffer
 408:	18 82       	st	Y, r1
}
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	ff 90       	pop	r15
 412:	ef 90       	pop	r14
 414:	df 90       	pop	r13
 416:	cf 90       	pop	r12
 418:	08 95       	ret

0000041a <UART_voidReceiveNumberSynch>:

void UART_voidReceiveNumberSynch(u32 *Copy_pu32Number){
 41a:	5f 92       	push	r5
 41c:	6f 92       	push	r6
 41e:	7f 92       	push	r7
 420:	8f 92       	push	r8
 422:	9f 92       	push	r9
 424:	af 92       	push	r10
 426:	bf 92       	push	r11
 428:	cf 92       	push	r12
 42a:	df 92       	push	r13
 42c:	ef 92       	push	r14
 42e:	ff 92       	push	r15
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
 438:	cd b7       	in	r28, 0x3d	; 61
 43a:	de b7       	in	r29, 0x3e	; 62
 43c:	2a 97       	sbiw	r28, 0x0a	; 10
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	f8 94       	cli
 442:	de bf       	out	0x3e, r29	; 62
 444:	0f be       	out	0x3f, r0	; 63
 446:	cd bf       	out	0x3d, r28	; 61
 448:	3c 01       	movw	r6, r24
 44a:	ae 01       	movw	r20, r28
 44c:	4f 5f       	subi	r20, 0xFF	; 255
 44e:	5f 4f       	sbci	r21, 0xFF	; 255
 450:	7a 01       	movw	r14, r20
 452:	6a 01       	movw	r12, r20
 454:	00 e0       	ldi	r16, 0x00	; 0
 456:	10 e0       	ldi	r17, 0x00	; 0
	u8 counter = 0;
	u32 number = 0;
	u32 decimal = 1;
	u8 temp;
	do{		//receive the number and put it into a buffer
		numlen++;
 458:	50 2e       	mov	r5, r16
		UART_u8ReceiveDataSynch(&(Buffer[numlen]));
 45a:	58 01       	movw	r10, r16
 45c:	46 01       	movw	r8, r12
 45e:	c6 01       	movw	r24, r12
 460:	0e 94 8b 01 	call	0x316	; 0x316 <UART_u8ReceiveDataSynch>
		UART_voidSendDataSynch(Buffer[numlen]);
 464:	d6 01       	movw	r26, r12
 466:	8d 91       	ld	r24, X+
 468:	6d 01       	movw	r12, r26
 46a:	0e 94 84 01 	call	0x308	; 0x308 <UART_voidSendDataSynch>
		
	}while(Buffer[numlen] != '+' && numlen< 10);		//the last element storing Enter char.
 46e:	f4 01       	movw	r30, r8
 470:	80 81       	ld	r24, Z
 472:	8b 32       	cpi	r24, 0x2B	; 43
 474:	09 f4       	brne	.+2      	; 0x478 <UART_voidReceiveNumberSynch+0x5e>
 476:	47 c0       	rjmp	.+142    	; 0x506 <UART_voidReceiveNumberSynch+0xec>
 478:	0f 5f       	subi	r16, 0xFF	; 255
 47a:	1f 4f       	sbci	r17, 0xFF	; 255
 47c:	0b 30       	cpi	r16, 0x0B	; 11
 47e:	11 05       	cpc	r17, r1
 480:	59 f7       	brne	.-42     	; 0x458 <UART_voidReceiveNumberSynch+0x3e>
 482:	41 c0       	rjmp	.+130    	; 0x506 <UART_voidReceiveNumberSynch+0xec>
	
	for( ;counter<=numlen/2;counter++){	//swap the buffer element	as it is stored inversely
		temp = Buffer[numlen - counter-1];
 484:	a8 2f       	mov	r26, r24
 486:	b0 e0       	ldi	r27, 0x00	; 0
 488:	f5 01       	movw	r30, r10
 48a:	ea 1b       	sub	r30, r26
 48c:	fb 0b       	sbc	r31, r27
 48e:	31 97       	sbiw	r30, 0x01	; 1
 490:	41 e0       	ldi	r20, 0x01	; 1
 492:	50 e0       	ldi	r21, 0x00	; 0
 494:	4c 0f       	add	r20, r28
 496:	5d 1f       	adc	r21, r29
 498:	e4 0f       	add	r30, r20
 49a:	f5 1f       	adc	r31, r21
 49c:	90 81       	ld	r25, Z
		Buffer[numlen - counter - 1] = Buffer[counter] - '0';
 49e:	a4 0f       	add	r26, r20
 4a0:	b5 1f       	adc	r27, r21
 4a2:	2c 91       	ld	r18, X
 4a4:	20 53       	subi	r18, 0x30	; 48
 4a6:	20 83       	st	Z, r18
		Buffer[counter] = temp - '0';
 4a8:	90 53       	subi	r25, 0x30	; 48
 4aa:	9c 93       	st	X, r25
		UART_u8ReceiveDataSynch(&(Buffer[numlen]));
		UART_voidSendDataSynch(Buffer[numlen]);
		
	}while(Buffer[numlen] != '+' && numlen< 10);		//the last element storing Enter char.
	
	for( ;counter<=numlen/2;counter++){	//swap the buffer element	as it is stored inversely
 4ac:	8f 5f       	subi	r24, 0xFF	; 255
 4ae:	38 17       	cp	r19, r24
 4b0:	48 f7       	brcc	.-46     	; 0x484 <UART_voidReceiveNumberSynch+0x6a>
		temp = Buffer[numlen - counter-1];
		Buffer[numlen - counter - 1] = Buffer[counter] - '0';
		Buffer[counter] = temp - '0';
		
	}
	for(counter = 0; counter<numlen; counter++){
 4b2:	55 20       	and	r5, r5
 4b4:	11 f1       	breq	.+68     	; 0x4fa <UART_voidReceiveNumberSynch+0xe0>
 4b6:	5a 94       	dec	r5
 4b8:	fe 01       	movw	r30, r28
 4ba:	e5 0d       	add	r30, r5
 4bc:	f1 1d       	adc	r31, r1
 4be:	32 96       	adiw	r30, 0x02	; 2
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	20 e0       	ldi	r18, 0x00	; 0
 4c6:	30 e0       	ldi	r19, 0x00	; 0
		number = number + Buffer[counter]*decimal;
 4c8:	d7 01       	movw	r26, r14
 4ca:	6d 91       	ld	r22, X+
 4cc:	7d 01       	movw	r14, r26
 4ce:	68 9f       	mul	r22, r24
 4d0:	a0 01       	movw	r20, r0
 4d2:	69 9f       	mul	r22, r25
 4d4:	50 0d       	add	r21, r0
 4d6:	11 24       	eor	r1, r1
 4d8:	24 0f       	add	r18, r20
 4da:	35 1f       	adc	r19, r21
		decimal *= 10;
 4dc:	ac 01       	movw	r20, r24
 4de:	44 0f       	add	r20, r20
 4e0:	55 1f       	adc	r21, r21
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	84 0f       	add	r24, r20
 4f0:	95 1f       	adc	r25, r21
		temp = Buffer[numlen - counter-1];
		Buffer[numlen - counter - 1] = Buffer[counter] - '0';
		Buffer[counter] = temp - '0';
		
	}
	for(counter = 0; counter<numlen; counter++){
 4f2:	ae 17       	cp	r26, r30
 4f4:	bf 07       	cpc	r27, r31
 4f6:	41 f7       	brne	.-48     	; 0x4c8 <UART_voidReceiveNumberSynch+0xae>
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <UART_voidReceiveNumberSynch+0xe4>
 4fa:	20 e0       	ldi	r18, 0x00	; 0
 4fc:	30 e0       	ldi	r19, 0x00	; 0
		number = number + Buffer[counter]*decimal;
		decimal *= 10;
		//UART_voidSendNumberSynch(number);	
	}
	
	*Copy_pu32Number = number;
 4fe:	f3 01       	movw	r30, r6
 500:	31 83       	std	Z+1, r19	; 0x01
 502:	20 83       	st	Z, r18
	
}
 504:	04 c0       	rjmp	.+8      	; 0x50e <UART_voidReceiveNumberSynch+0xf4>
		UART_u8ReceiveDataSynch(&(Buffer[numlen]));
		UART_voidSendDataSynch(Buffer[numlen]);
		
	}while(Buffer[numlen] != '+' && numlen< 10);		//the last element storing Enter char.
	
	for( ;counter<=numlen/2;counter++){	//swap the buffer element	as it is stored inversely
 506:	35 2d       	mov	r19, r5
 508:	36 95       	lsr	r19
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	bb cf       	rjmp	.-138    	; 0x484 <UART_voidReceiveNumberSynch+0x6a>
		//UART_voidSendNumberSynch(number);	
	}
	
	*Copy_pu32Number = number;
	
}
 50e:	2a 96       	adiw	r28, 0x0a	; 10
 510:	0f b6       	in	r0, 0x3f	; 63
 512:	f8 94       	cli
 514:	de bf       	out	0x3e, r29	; 62
 516:	0f be       	out	0x3f, r0	; 63
 518:	cd bf       	out	0x3d, r28	; 61
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	1f 91       	pop	r17
 520:	0f 91       	pop	r16
 522:	ff 90       	pop	r15
 524:	ef 90       	pop	r14
 526:	df 90       	pop	r13
 528:	cf 90       	pop	r12
 52a:	bf 90       	pop	r11
 52c:	af 90       	pop	r10
 52e:	9f 90       	pop	r9
 530:	8f 90       	pop	r8
 532:	7f 90       	pop	r7
 534:	6f 90       	pop	r6
 536:	5f 90       	pop	r5
 538:	08 95       	ret

0000053a <new>:

void Unlock(){
	DIO_voidSetPortDirection(DIO_PORTC, DIO_OUTPUT);
	DIO_voidSetPinValue(DIO_PORTC, DIO_PIN2, DIO_HIGH);
	_delay_ms(3000);
	DIO_voidSetPinValue(DIO_PORTC, DIO_PIN2, DIO_LOW);
 53a:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <counter>
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	9c 01       	movw	r18, r24
 542:	22 0f       	add	r18, r18
 544:	33 1f       	adc	r19, r19
 546:	f9 01       	movw	r30, r18
 548:	e6 5c       	subi	r30, 0xC6	; 198
 54a:	fc 4f       	sbci	r31, 0xFC	; 252
 54c:	82 0f       	add	r24, r18
 54e:	93 1f       	adc	r25, r19
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	82 55       	subi	r24, 0x52	; 82
 55a:	9d 4f       	sbci	r25, 0xFD	; 253
 55c:	91 83       	std	Z+1, r25	; 0x01
 55e:	80 83       	st	Z, r24
 560:	86 ec       	ldi	r24, 0xC6	; 198
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 568:	e0 91 ad 02 	lds	r30, 0x02AD	; 0x8002ad <counter>
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	ee 0f       	add	r30, r30
 570:	ff 1f       	adc	r31, r31
 572:	e6 5c       	subi	r30, 0xC6	; 198
 574:	fc 4f       	sbci	r31, 0xFC	; 252
 576:	64 e1       	ldi	r22, 0x14	; 20
 578:	80 81       	ld	r24, Z
 57a:	91 81       	ldd	r25, Z+1	; 0x01
 57c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <UART_voidReceiveStringSynch>
 580:	80 e2       	ldi	r24, 0x20	; 32
 582:	0e 94 84 01 	call	0x308	; 0x308 <UART_voidSendDataSynch>
 586:	8d ed       	ldi	r24, 0xDD	; 221
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 58e:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <counter>
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	8a 5d       	subi	r24, 0xDA	; 218
 59a:	9c 4f       	sbci	r25, 0xFC	; 252
 59c:	0e 94 0d 02 	call	0x41a	; 0x41a <UART_voidReceiveNumberSynch>
 5a0:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <counter>
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	9c 01       	movw	r18, r24
 5a8:	22 0f       	add	r18, r18
 5aa:	33 1f       	adc	r19, r19
 5ac:	f9 01       	movw	r30, r18
 5ae:	e8 0f       	add	r30, r24
 5b0:	f9 1f       	adc	r31, r25
 5b2:	ee 0f       	add	r30, r30
 5b4:	ff 1f       	adc	r31, r31
 5b6:	ee 0f       	add	r30, r30
 5b8:	ff 1f       	adc	r31, r31
 5ba:	e2 55       	subi	r30, 0x52	; 82
 5bc:	fd 4f       	sbci	r31, 0xFD	; 253
 5be:	d9 01       	movw	r26, r18
 5c0:	aa 5d       	subi	r26, 0xDA	; 218
 5c2:	bc 4f       	sbci	r27, 0xFC	; 252
 5c4:	8d 91       	ld	r24, X+
 5c6:	9c 91       	ld	r25, X
 5c8:	93 87       	std	Z+11, r25	; 0x0b
 5ca:	82 87       	std	Z+10, r24	; 0x0a
 5cc:	80 e2       	ldi	r24, 0x20	; 32
 5ce:	0e 94 84 01 	call	0x308	; 0x308 <UART_voidSendDataSynch>
 5d2:	83 ef       	ldi	r24, 0xF3	; 243
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 5da:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <counter>
 5de:	80 5d       	subi	r24, 0xD0	; 208
 5e0:	0e 94 84 01 	call	0x308	; 0x308 <UART_voidSendDataSynch>
 5e4:	80 e2       	ldi	r24, 0x20	; 32
 5e6:	0e 94 84 01 	call	0x308	; 0x308 <UART_voidSendDataSynch>
 5ea:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <counter>
 5ee:	8f 5f       	subi	r24, 0xFF	; 255
 5f0:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <counter>
 5f4:	08 95       	ret

000005f6 <SignIn>:
 5f6:	1f 93       	push	r17
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	00 d0       	rcall	.+0      	; 0x5fe <SignIn+0x8>
 5fe:	1f 92       	push	r1
 600:	cd b7       	in	r28, 0x3d	; 61
 602:	de b7       	in	r29, 0x3e	; 62
 604:	8f ef       	ldi	r24, 0xFF	; 255
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 60c:	ce 01       	movw	r24, r28
 60e:	01 96       	adiw	r24, 0x01	; 1
 610:	0e 94 8b 01 	call	0x316	; 0x316 <UART_u8ReceiveDataSynch>
 614:	89 81       	ldd	r24, Y+1	; 0x01
 616:	80 53       	subi	r24, 0x30	; 48
 618:	89 83       	std	Y+1, r24	; 0x01
 61a:	13 e0       	ldi	r17, 0x03	; 3
 61c:	8d ed       	ldi	r24, 0xDD	; 221
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 624:	ce 01       	movw	r24, r28
 626:	02 96       	adiw	r24, 0x02	; 2
 628:	0e 94 0d 02 	call	0x41a	; 0x41a <UART_voidReceiveNumberSynch>
 62c:	89 81       	ldd	r24, Y+1	; 0x01
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	fc 01       	movw	r30, r24
 632:	ee 0f       	add	r30, r30
 634:	ff 1f       	adc	r31, r31
 636:	e8 0f       	add	r30, r24
 638:	f9 1f       	adc	r31, r25
 63a:	ee 0f       	add	r30, r30
 63c:	ff 1f       	adc	r31, r31
 63e:	ee 0f       	add	r30, r30
 640:	ff 1f       	adc	r31, r31
 642:	e2 55       	subi	r30, 0x52	; 82
 644:	fd 4f       	sbci	r31, 0xFD	; 253
 646:	22 85       	ldd	r18, Z+10	; 0x0a
 648:	33 85       	ldd	r19, Z+11	; 0x0b
 64a:	8a 81       	ldd	r24, Y+2	; 0x02
 64c:	9b 81       	ldd	r25, Y+3	; 0x03
 64e:	28 17       	cp	r18, r24
 650:	39 07       	cpc	r19, r25
 652:	41 f4       	brne	.+16     	; 0x664 <SignIn+0x6e>
 654:	84 e1       	ldi	r24, 0x14	; 20
 656:	91 e0       	ldi	r25, 0x01	; 1
 658:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <__data_end>
 662:	26 c0       	rjmp	.+76     	; 0x6b0 <SignIn+0xba>
 664:	8f e2       	ldi	r24, 0x2F	; 47
 666:	91 e0       	ldi	r25, 0x01	; 1
 668:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 66c:	41 e0       	ldi	r20, 0x01	; 1
 66e:	61 e0       	ldi	r22, 0x01	; 1
 670:	82 e0       	ldi	r24, 0x02	; 2
 672:	0e 94 94 00 	call	0x128	; 0x128 <DIO_voidSetPinValue>
 676:	2f ef       	ldi	r18, 0xFF	; 255
 678:	83 ed       	ldi	r24, 0xD3	; 211
 67a:	90 e3       	ldi	r25, 0x30	; 48
 67c:	21 50       	subi	r18, 0x01	; 1
 67e:	80 40       	sbci	r24, 0x00	; 0
 680:	90 40       	sbci	r25, 0x00	; 0
 682:	e1 f7       	brne	.-8      	; 0x67c <SignIn+0x86>
 684:	00 c0       	rjmp	.+0      	; 0x686 <SignIn+0x90>
 686:	00 00       	nop
 688:	40 e0       	ldi	r20, 0x00	; 0
 68a:	61 e0       	ldi	r22, 0x01	; 1
 68c:	82 e0       	ldi	r24, 0x02	; 2
 68e:	0e 94 94 00 	call	0x128	; 0x128 <DIO_voidSetPinValue>
 692:	11 50       	subi	r17, 0x01	; 1
 694:	19 f6       	brne	.-122    	; 0x61c <SignIn+0x26>
 696:	08 c0       	rjmp	.+16     	; 0x6a8 <SignIn+0xb2>
 698:	8d e3       	ldi	r24, 0x3D	; 61
 69a:	91 e0       	ldi	r25, 0x01	; 1
 69c:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 6a0:	82 e0       	ldi	r24, 0x02	; 2
 6a2:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <__data_end>
 6a6:	04 c0       	rjmp	.+8      	; 0x6b0 <SignIn+0xba>
 6a8:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <__data_end>
 6ac:	88 23       	and	r24, r24
 6ae:	a1 f3       	breq	.-24     	; 0x698 <SignIn+0xa2>
 6b0:	0f 90       	pop	r0
 6b2:	0f 90       	pop	r0
 6b4:	0f 90       	pop	r0
 6b6:	df 91       	pop	r29
 6b8:	cf 91       	pop	r28
 6ba:	1f 91       	pop	r17
 6bc:	08 95       	ret

000006be <Edit>:
 6be:	cf 93       	push	r28
 6c0:	df 93       	push	r29
 6c2:	00 d0       	rcall	.+0      	; 0x6c4 <Edit+0x6>
 6c4:	00 d0       	rcall	.+0      	; 0x6c6 <Edit+0x8>
 6c6:	cd b7       	in	r28, 0x3d	; 61
 6c8:	de b7       	in	r29, 0x3e	; 62
 6ca:	8f e5       	ldi	r24, 0x5F	; 95
 6cc:	91 e0       	ldi	r25, 0x01	; 1
 6ce:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 6d2:	ce 01       	movw	r24, r28
 6d4:	01 96       	adiw	r24, 0x01	; 1
 6d6:	0e 94 8b 01 	call	0x316	; 0x316 <UART_u8ReceiveDataSynch>
 6da:	89 81       	ldd	r24, Y+1	; 0x01
 6dc:	80 53       	subi	r24, 0x30	; 48
 6de:	89 83       	std	Y+1, r24	; 0x01
 6e0:	80 e2       	ldi	r24, 0x20	; 32
 6e2:	0e 94 84 01 	call	0x308	; 0x308 <UART_voidSendDataSynch>
 6e6:	99 81       	ldd	r25, Y+1	; 0x01
 6e8:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <counter>
 6ec:	98 17       	cp	r25, r24
 6ee:	08 f0       	brcs	.+2      	; 0x6f2 <Edit+0x34>
 6f0:	7e c0       	rjmp	.+252    	; 0x7ee <Edit+0x130>
 6f2:	8e e6       	ldi	r24, 0x6E	; 110
 6f4:	91 e0       	ldi	r25, 0x01	; 1
 6f6:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 6fa:	ce 01       	movw	r24, r28
 6fc:	03 96       	adiw	r24, 0x03	; 3
 6fe:	0e 94 0d 02 	call	0x41a	; 0x41a <UART_voidReceiveNumberSynch>
 702:	80 e2       	ldi	r24, 0x20	; 32
 704:	0e 94 84 01 	call	0x308	; 0x308 <UART_voidSendDataSynch>
 708:	89 81       	ldd	r24, Y+1	; 0x01
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	fc 01       	movw	r30, r24
 70e:	ee 0f       	add	r30, r30
 710:	ff 1f       	adc	r31, r31
 712:	e8 0f       	add	r30, r24
 714:	f9 1f       	adc	r31, r25
 716:	ee 0f       	add	r30, r30
 718:	ff 1f       	adc	r31, r31
 71a:	ee 0f       	add	r30, r30
 71c:	ff 1f       	adc	r31, r31
 71e:	e2 55       	subi	r30, 0x52	; 82
 720:	fd 4f       	sbci	r31, 0xFD	; 253
 722:	22 85       	ldd	r18, Z+10	; 0x0a
 724:	33 85       	ldd	r19, Z+11	; 0x0b
 726:	8b 81       	ldd	r24, Y+3	; 0x03
 728:	9c 81       	ldd	r25, Y+4	; 0x04
 72a:	28 17       	cp	r18, r24
 72c:	39 07       	cpc	r19, r25
 72e:	09 f0       	breq	.+2      	; 0x732 <Edit+0x74>
 730:	59 c0       	rjmp	.+178    	; 0x7e4 <Edit+0x126>
 732:	83 e8       	ldi	r24, 0x83	; 131
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 73a:	84 eb       	ldi	r24, 0xB4	; 180
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 742:	ce 01       	movw	r24, r28
 744:	02 96       	adiw	r24, 0x02	; 2
 746:	0e 94 8b 01 	call	0x316	; 0x316 <UART_u8ReceiveDataSynch>
 74a:	80 e2       	ldi	r24, 0x20	; 32
 74c:	0e 94 84 01 	call	0x308	; 0x308 <UART_voidSendDataSynch>
 750:	8a 81       	ldd	r24, Y+2	; 0x02
 752:	82 33       	cpi	r24, 0x32	; 50
 754:	51 f1       	breq	.+84     	; 0x7aa <Edit+0xec>
 756:	83 33       	cpi	r24, 0x33	; 51
 758:	09 f4       	brne	.+2      	; 0x75c <Edit+0x9e>
 75a:	4d c0       	rjmp	.+154    	; 0x7f6 <Edit+0x138>
 75c:	81 33       	cpi	r24, 0x31	; 49
 75e:	49 f7       	brne	.-46     	; 0x732 <Edit+0x74>
 760:	89 81       	ldd	r24, Y+1	; 0x01
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	9c 01       	movw	r18, r24
 766:	22 0f       	add	r18, r18
 768:	33 1f       	adc	r19, r19
 76a:	f9 01       	movw	r30, r18
 76c:	e6 5c       	subi	r30, 0xC6	; 198
 76e:	fc 4f       	sbci	r31, 0xFC	; 252
 770:	82 0f       	add	r24, r18
 772:	93 1f       	adc	r25, r19
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	88 0f       	add	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	82 55       	subi	r24, 0x52	; 82
 77e:	9d 4f       	sbci	r25, 0xFD	; 253
 780:	91 83       	std	Z+1, r25	; 0x01
 782:	80 83       	st	Z, r24
 784:	86 ec       	ldi	r24, 0xC6	; 198
 786:	91 e0       	ldi	r25, 0x01	; 1
 788:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 78c:	e9 81       	ldd	r30, Y+1	; 0x01
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	ee 0f       	add	r30, r30
 792:	ff 1f       	adc	r31, r31
 794:	e6 5c       	subi	r30, 0xC6	; 198
 796:	fc 4f       	sbci	r31, 0xFC	; 252
 798:	64 e1       	ldi	r22, 0x14	; 20
 79a:	80 81       	ld	r24, Z
 79c:	91 81       	ldd	r25, Z+1	; 0x01
 79e:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <UART_voidReceiveStringSynch>
 7a2:	80 e2       	ldi	r24, 0x20	; 32
 7a4:	0e 94 84 01 	call	0x308	; 0x308 <UART_voidSendDataSynch>
 7a8:	c4 cf       	rjmp	.-120    	; 0x732 <Edit+0x74>
 7aa:	81 ee       	ldi	r24, 0xE1	; 225
 7ac:	91 e0       	ldi	r25, 0x01	; 1
 7ae:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 7b2:	ce 01       	movw	r24, r28
 7b4:	03 96       	adiw	r24, 0x03	; 3
 7b6:	0e 94 0d 02 	call	0x41a	; 0x41a <UART_voidReceiveNumberSynch>
 7ba:	89 81       	ldd	r24, Y+1	; 0x01
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	fc 01       	movw	r30, r24
 7c0:	ee 0f       	add	r30, r30
 7c2:	ff 1f       	adc	r31, r31
 7c4:	e8 0f       	add	r30, r24
 7c6:	f9 1f       	adc	r31, r25
 7c8:	ee 0f       	add	r30, r30
 7ca:	ff 1f       	adc	r31, r31
 7cc:	ee 0f       	add	r30, r30
 7ce:	ff 1f       	adc	r31, r31
 7d0:	e2 55       	subi	r30, 0x52	; 82
 7d2:	fd 4f       	sbci	r31, 0xFD	; 253
 7d4:	8b 81       	ldd	r24, Y+3	; 0x03
 7d6:	9c 81       	ldd	r25, Y+4	; 0x04
 7d8:	93 87       	std	Z+11, r25	; 0x0b
 7da:	82 87       	std	Z+10, r24	; 0x0a
 7dc:	80 e2       	ldi	r24, 0x20	; 32
 7de:	0e 94 84 01 	call	0x308	; 0x308 <UART_voidSendDataSynch>
 7e2:	a7 cf       	rjmp	.-178    	; 0x732 <Edit+0x74>
 7e4:	8b ef       	ldi	r24, 0xFB	; 251
 7e6:	91 e0       	ldi	r25, 0x01	; 1
 7e8:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <Edit+0x138>
 7ee:	8b e0       	ldi	r24, 0x0B	; 11
 7f0:	92 e0       	ldi	r25, 0x02	; 2
 7f2:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 7f6:	0f 90       	pop	r0
 7f8:	0f 90       	pop	r0
 7fa:	0f 90       	pop	r0
 7fc:	0f 90       	pop	r0
 7fe:	df 91       	pop	r29
 800:	cf 91       	pop	r28
 802:	08 95       	ret

00000804 <Show>:
 804:	cf 93       	push	r28
 806:	df 93       	push	r29
 808:	1f 92       	push	r1
 80a:	cd b7       	in	r28, 0x3d	; 61
 80c:	de b7       	in	r29, 0x3e	; 62
 80e:	8f e5       	ldi	r24, 0x5F	; 95
 810:	91 e0       	ldi	r25, 0x01	; 1
 812:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 816:	ce 01       	movw	r24, r28
 818:	01 96       	adiw	r24, 0x01	; 1
 81a:	0e 94 8b 01 	call	0x316	; 0x316 <UART_u8ReceiveDataSynch>
 81e:	89 81       	ldd	r24, Y+1	; 0x01
 820:	80 53       	subi	r24, 0x30	; 48
 822:	89 83       	std	Y+1, r24	; 0x01
 824:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <counter>
 828:	89 17       	cp	r24, r25
 82a:	90 f5       	brcc	.+100    	; 0x890 <__stack+0x31>
 82c:	80 e2       	ldi	r24, 0x20	; 32
 82e:	0e 94 84 01 	call	0x308	; 0x308 <UART_voidSendDataSynch>
 832:	8c ec       	ldi	r24, 0xCC	; 204
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 83a:	89 81       	ldd	r24, Y+1	; 0x01
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	9c 01       	movw	r18, r24
 840:	22 0f       	add	r18, r18
 842:	33 1f       	adc	r19, r19
 844:	82 0f       	add	r24, r18
 846:	93 1f       	adc	r25, r19
 848:	88 0f       	add	r24, r24
 84a:	99 1f       	adc	r25, r25
 84c:	88 0f       	add	r24, r24
 84e:	99 1f       	adc	r25, r25
 850:	82 55       	subi	r24, 0x52	; 82
 852:	9d 4f       	sbci	r25, 0xFD	; 253
 854:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 858:	80 e2       	ldi	r24, 0x20	; 32
 85a:	0e 94 84 01 	call	0x308	; 0x308 <UART_voidSendDataSynch>
 85e:	83 ee       	ldi	r24, 0xE3	; 227
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 866:	89 81       	ldd	r24, Y+1	; 0x01
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	fc 01       	movw	r30, r24
 86c:	ee 0f       	add	r30, r30
 86e:	ff 1f       	adc	r31, r31
 870:	e8 0f       	add	r30, r24
 872:	f9 1f       	adc	r31, r25
 874:	ee 0f       	add	r30, r30
 876:	ff 1f       	adc	r31, r31
 878:	ee 0f       	add	r30, r30
 87a:	ff 1f       	adc	r31, r31
 87c:	e2 55       	subi	r30, 0x52	; 82
 87e:	fd 4f       	sbci	r31, 0xFD	; 253
 880:	82 85       	ldd	r24, Z+10	; 0x0a
 882:	93 85       	ldd	r25, Z+11	; 0x0b
 884:	0e 94 a8 01 	call	0x350	; 0x350 <UART_voidSendNumberSynch>
 888:	80 e2       	ldi	r24, 0x20	; 32
 88a:	0e 94 84 01 	call	0x308	; 0x308 <UART_voidSendDataSynch>
 88e:	04 c0       	rjmp	.+8      	; 0x898 <__stack+0x39>
 890:	83 e2       	ldi	r24, 0x23	; 35
 892:	92 e0       	ldi	r25, 0x02	; 2
 894:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
 898:	0f 90       	pop	r0
 89a:	df 91       	pop	r29
 89c:	cf 91       	pop	r28
 89e:	08 95       	ret

000008a0 <Light>:
}

void Light(){
 8a0:	cf 93       	push	r28
 8a2:	df 93       	push	r29
 8a4:	1f 92       	push	r1
 8a6:	cd b7       	in	r28, 0x3d	; 61
 8a8:	de b7       	in	r29, 0x3e	; 62
	u8 choose;
	DIO_voidSetPortDirection(DIO_PORTA, DIO_OUTPUT);
 8aa:	61 e0       	ldi	r22, 0x01	; 1
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	0e 94 41 01 	call	0x282	; 0x282 <DIO_voidSetPortDirection>
	
	UART_voidSendStringSynch("Welcome to our system! ");
 8b2:	8a e3       	ldi	r24, 0x3A	; 58
 8b4:	92 e0       	ldi	r25, 0x02	; 2
 8b6:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
	while(1)
	{
		UART_voidSendStringSynch("1. Toggle Red Light.		2. Toggle Blue Light.		3. Toggle the Fan.		4. Exit. ");
 8ba:	82 e5       	ldi	r24, 0x52	; 82
 8bc:	92 e0       	ldi	r25, 0x02	; 2
 8be:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
		UART_voidSendStringSynch("Your Choice: ");
 8c2:	8d e9       	ldi	r24, 0x9D	; 157
 8c4:	92 e0       	ldi	r25, 0x02	; 2
 8c6:	0e 94 92 01 	call	0x324	; 0x324 <UART_voidSendStringSynch>
		UART_u8ReceiveDataSynch(&choose);
 8ca:	ce 01       	movw	r24, r28
 8cc:	01 96       	adiw	r24, 0x01	; 1
 8ce:	0e 94 8b 01 	call	0x316	; 0x316 <UART_u8ReceiveDataSynch>

		switch(choose){
 8d2:	89 81       	ldd	r24, Y+1	; 0x01
 8d4:	82 33       	cpi	r24, 0x32	; 50
 8d6:	79 f0       	breq	.+30     	; 0x8f6 <Light+0x56>
 8d8:	18 f4       	brcc	.+6      	; 0x8e0 <Light+0x40>
 8da:	81 33       	cpi	r24, 0x31	; 49
 8dc:	31 f0       	breq	.+12     	; 0x8ea <Light+0x4a>
 8de:	ed cf       	rjmp	.-38     	; 0x8ba <Light+0x1a>
 8e0:	83 33       	cpi	r24, 0x33	; 51
 8e2:	79 f0       	breq	.+30     	; 0x902 <Light+0x62>
 8e4:	84 33       	cpi	r24, 0x34	; 52
 8e6:	99 f0       	breq	.+38     	; 0x90e <Light+0x6e>
 8e8:	e8 cf       	rjmp	.-48     	; 0x8ba <Light+0x1a>
	
			case '1':	
				DIO_voidSetPinValue(LED_PORT,RED_LED, DIO_TOGGLE);
 8ea:	42 e0       	ldi	r20, 0x02	; 2
 8ec:	63 e0       	ldi	r22, 0x03	; 3
 8ee:	80 e0       	ldi	r24, 0x00	; 0
 8f0:	0e 94 94 00 	call	0x128	; 0x128 <DIO_voidSetPinValue>
				break;
 8f4:	e2 cf       	rjmp	.-60     	; 0x8ba <Light+0x1a>
			case '2':
				DIO_voidSetPinValue(LED_PORT,BLUE_LED, DIO_TOGGLE);
 8f6:	42 e0       	ldi	r20, 0x02	; 2
 8f8:	64 e0       	ldi	r22, 0x04	; 4
 8fa:	80 e0       	ldi	r24, 0x00	; 0
 8fc:	0e 94 94 00 	call	0x128	; 0x128 <DIO_voidSetPinValue>
				break;
 900:	dc cf       	rjmp	.-72     	; 0x8ba <Light+0x1a>
			case '3':
				DIO_voidSetPinValue(LED_PORT,FAN, DIO_TOGGLE);
 902:	42 e0       	ldi	r20, 0x02	; 2
 904:	62 e0       	ldi	r22, 0x02	; 2
 906:	80 e0       	ldi	r24, 0x00	; 0
 908:	0e 94 94 00 	call	0x128	; 0x128 <DIO_voidSetPinValue>
				break;
 90c:	d6 cf       	rjmp	.-84     	; 0x8ba <Light+0x1a>
			case '4':	
				DIO_voidSetPortValue(LED_PORT, 0x00);
 90e:	60 e0       	ldi	r22, 0x00	; 0
 910:	70 e0       	ldi	r23, 0x00	; 0
 912:	80 e0       	ldi	r24, 0x00	; 0
 914:	90 e0       	ldi	r25, 0x00	; 0
 916:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <DIO_voidSetPortValue>
				return;
		}
	}
	
 91a:	0f 90       	pop	r0
 91c:	df 91       	pop	r29
 91e:	cf 91       	pop	r28
 920:	08 95       	ret

00000922 <__udivmodhi4>:
 922:	aa 1b       	sub	r26, r26
 924:	bb 1b       	sub	r27, r27
 926:	51 e1       	ldi	r21, 0x11	; 17
 928:	07 c0       	rjmp	.+14     	; 0x938 <__udivmodhi4_ep>

0000092a <__udivmodhi4_loop>:
 92a:	aa 1f       	adc	r26, r26
 92c:	bb 1f       	adc	r27, r27
 92e:	a6 17       	cp	r26, r22
 930:	b7 07       	cpc	r27, r23
 932:	10 f0       	brcs	.+4      	; 0x938 <__udivmodhi4_ep>
 934:	a6 1b       	sub	r26, r22
 936:	b7 0b       	sbc	r27, r23

00000938 <__udivmodhi4_ep>:
 938:	88 1f       	adc	r24, r24
 93a:	99 1f       	adc	r25, r25
 93c:	5a 95       	dec	r21
 93e:	a9 f7       	brne	.-22     	; 0x92a <__udivmodhi4_loop>
 940:	80 95       	com	r24
 942:	90 95       	com	r25
 944:	bc 01       	movw	r22, r24
 946:	cd 01       	movw	r24, r26
 948:	08 95       	ret

0000094a <__umulhisi3>:
 94a:	a2 9f       	mul	r26, r18
 94c:	b0 01       	movw	r22, r0
 94e:	b3 9f       	mul	r27, r19
 950:	c0 01       	movw	r24, r0
 952:	a3 9f       	mul	r26, r19
 954:	70 0d       	add	r23, r0
 956:	81 1d       	adc	r24, r1
 958:	11 24       	eor	r1, r1
 95a:	91 1d       	adc	r25, r1
 95c:	b2 9f       	mul	r27, r18
 95e:	70 0d       	add	r23, r0
 960:	81 1d       	adc	r24, r1
 962:	11 24       	eor	r1, r1
 964:	91 1d       	adc	r25, r1
 966:	08 95       	ret

00000968 <_exit>:
 968:	f8 94       	cli

0000096a <__stop_program>:
 96a:	ff cf       	rjmp	.-2      	; 0x96a <__stop_program>
