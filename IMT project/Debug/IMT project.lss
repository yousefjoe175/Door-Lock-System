
IMT_Project 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000282  00800060  00000d0a  00000d9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000107  008002e2  008002e2  00001020  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001020  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001050  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e69  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bfd  00000000  00000000  000030cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001171  00000000  00000000  00003cca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a0  00000000  00000000  00004e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000824  00000000  00000000  000052dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000129f  00000000  00000000  00005b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00006d9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3e       	cpi	r26, 0xE2	; 226
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	a2 ee       	ldi	r26, 0xE2	; 226
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a9 3e       	cpi	r26, 0xE9	; 233
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  8a:	0c 94 83 06 	jmp	0xd06	; 0xd06 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <EEPROM_voidInit>:
#include "I2C.h"
#include <util/delay.h>

void EEPROM_voidInit(void)
{
	i2c_init_master();
  92:	0e 94 89 00 	call	0x112	; 0x112 <i2c_init_master>
  96:	08 95       	ret

00000098 <EEPROM_voidSendDataByte>:
}



void EEPROM_voidSendDataByte(unsigned short address, unsigned char data)
{
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	d8 2f       	mov	r29, r24
  9e:	c6 2f       	mov	r28, r22
    i2c_start();
  a0:	0e 94 91 00 	call	0x122	; 0x122 <i2c_start>
	i2c_send_slave_address_with_write_req( 0b01010000 /*| ((address & 0x0700)>>8) */);
  a4:	80 e5       	ldi	r24, 0x50	; 80
  a6:	0e 94 a5 00 	call	0x14a	; 0x14a <i2c_send_slave_address_with_write_req>
	i2c_write_byte((unsigned char)address);
  aa:	8d 2f       	mov	r24, r29
  ac:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_write_byte>
	i2c_write_byte(data);
  b0:	8c 2f       	mov	r24, r28
  b2:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_write_byte>
	i2c_stop();
  b6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <i2c_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	80 e7       	ldi	r24, 0x70	; 112
  be:	92 e0       	ldi	r25, 0x02	; 2
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <EEPROM_voidSendDataByte+0x28>
  c8:	00 c0       	rjmp	.+0      	; 0xca <EEPROM_voidSendDataByte+0x32>
  ca:	00 00       	nop
	_delay_ms(100);
    return;
}
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <EEPROM_u8ReadDataByte>:



unsigned char EEPROM_u8ReadDataByte(unsigned short address)
{
  d2:	cf 93       	push	r28
  d4:	c8 2f       	mov	r28, r24
	unsigned char data;
	i2c_start();
  d6:	0e 94 91 00 	call	0x122	; 0x122 <i2c_start>
	i2c_send_slave_address_with_write_req( 0b01010000 /*| ((address & 0x07)>>8) */);
  da:	80 e5       	ldi	r24, 0x50	; 80
  dc:	0e 94 a5 00 	call	0x14a	; 0x14a <i2c_send_slave_address_with_write_req>
    i2c_write_byte((unsigned char)address);
  e0:	8c 2f       	mov	r24, r28
  e2:	0e 94 be 00 	call	0x17c	; 0x17c <i2c_write_byte>
	i2c_repeated_start();
  e6:	0e 94 9b 00 	call	0x136	; 0x136 <i2c_repeated_start>
	i2c_send_slave_address_with_read_req( 0b01010000 /*| ((address & 0x07)>>8)*/ );
  ea:	80 e5       	ldi	r24, 0x50	; 80
  ec:	0e 94 b1 00 	call	0x162	; 0x162 <i2c_send_slave_address_with_read_req>
	data = i2c_read_byte();
  f0:	0e 94 c9 00 	call	0x192	; 0x192 <i2c_read_byte>
  f4:	c8 2f       	mov	r28, r24
	i2c_stop();
  f6:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <i2c_stop>
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	80 e7       	ldi	r24, 0x70	; 112
  fe:	92 e0       	ldi	r25, 0x02	; 2
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <EEPROM_u8ReadDataByte+0x2e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <EEPROM_u8ReadDataByte+0x38>
 10a:	00 00       	nop
	_delay_ms(100);
    return data;
}
 10c:	8c 2f       	mov	r24, r28
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <i2c_init_master>:
}

void i2c_init_slave(void)
{
	TWAR = (1<< 1);          // my address = 0x01
	TWCR = (1<< TWEN);       //enable I2C
 112:	87 e0       	ldi	r24, 0x07	; 7
 114:	80 b9       	out	0x00, r24	; 0
 116:	81 b1       	in	r24, 0x01	; 1
 118:	8c 7f       	andi	r24, 0xFC	; 252
 11a:	81 b9       	out	0x01, r24	; 1
 11c:	84 e0       	ldi	r24, 0x04	; 4
 11e:	86 bf       	out	0x36, r24	; 54
 120:	08 95       	ret

00000122 <i2c_start>:
}


void i2c_start(void)
{
	TWCR = (1<< TWINT) | (1<< TWSTA) | (1<< TWEN);   // Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
 122:	84 ea       	ldi	r24, 0xA4	; 164
 124:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<<TWINT)));                     // Wait till start condition is transmitted
 126:	06 b6       	in	r0, 0x36	; 54
 128:	07 fe       	sbrs	r0, 7
 12a:	fd cf       	rjmp	.-6      	; 0x126 <i2c_start+0x4>
	while((TWSR & 0xF8) != START_ACK);               // Check for the acknowledgment
 12c:	81 b1       	in	r24, 0x01	; 1
 12e:	88 7f       	andi	r24, 0xF8	; 248
 130:	88 30       	cpi	r24, 0x08	; 8
 132:	e1 f7       	brne	.-8      	; 0x12c <i2c_start+0xa>
	return;
}
 134:	08 95       	ret

00000136 <i2c_repeated_start>:



void i2c_repeated_start(void)
{
	TWCR = (1<< TWINT) | (1<< TWSTA) | (1<< TWEN);      // Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
 136:	84 ea       	ldi	r24, 0xA4	; 164
 138:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<< TWINT)));                       // wait till restart condition is transmitted
 13a:	06 b6       	in	r0, 0x36	; 54
 13c:	07 fe       	sbrs	r0, 7
 13e:	fd cf       	rjmp	.-6      	; 0x13a <i2c_repeated_start+0x4>
	while((TWSR & 0xF8) != REP_START_ACK);              // Check for the acknowledgment
 140:	81 b1       	in	r24, 0x01	; 1
 142:	88 7f       	andi	r24, 0xF8	; 248
 144:	80 31       	cpi	r24, 0x10	; 16
 146:	e1 f7       	brne	.-8      	; 0x140 <i2c_repeated_start+0xa>
	return;
}
 148:	08 95       	ret

0000014a <i2c_send_slave_address_with_write_req>:



void i2c_send_slave_address_with_write_req(unsigned char slave_address)
{
	TWDR = (slave_address<< 1);                    //Address and write instruction
 14a:	88 0f       	add	r24, r24
 14c:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWINT) | (1<<TWEN);                 // Clear TWI interrupt flag, Enable TWI
 14e:	84 e8       	ldi	r24, 0x84	; 132
 150:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));                  // Wait till complete TWDR byte transmitted
 152:	06 b6       	in	r0, 0x36	; 54
 154:	07 fe       	sbrs	r0, 7
 156:	fd cf       	rjmp	.-6      	; 0x152 <i2c_send_slave_address_with_write_req+0x8>
	while((TWSR & 0xF8) != SLAVE_ADD_AND_WR_ACK);  // Check for the acknowledgment
 158:	81 b1       	in	r24, 0x01	; 1
 15a:	88 7f       	andi	r24, 0xF8	; 248
 15c:	88 31       	cpi	r24, 0x18	; 24
 15e:	e1 f7       	brne	.-8      	; 0x158 <i2c_send_slave_address_with_write_req+0xe>
	return;
}
 160:	08 95       	ret

00000162 <i2c_send_slave_address_with_read_req>:



void i2c_send_slave_address_with_read_req(unsigned char slave_address)
{
	TWDR = (slave_address<< 1);                     // Address
 162:	88 0f       	add	r24, r24
 164:	83 b9       	out	0x03, r24	; 3
	TWDR |= (1<< 0);                                // read instruction
 166:	18 9a       	sbi	0x03, 0	; 3
	TWCR = (1<< TWINT) | (1<< TWEN);                // Clear TWI interrupt flag,Enable TWI
 168:	84 e8       	ldi	r24, 0x84	; 132
 16a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<< TWINT)));                  // Wait till complete TWDR byte received
 16c:	06 b6       	in	r0, 0x36	; 54
 16e:	07 fe       	sbrs	r0, 7
 170:	fd cf       	rjmp	.-6      	; 0x16c <i2c_send_slave_address_with_read_req+0xa>
	while((TWSR & 0xF8) != SLAVE_ADD_AND_RD_ACK);   // Check for the acknowledgment
 172:	81 b1       	in	r24, 0x01	; 1
 174:	88 7f       	andi	r24, 0xF8	; 248
 176:	80 34       	cpi	r24, 0x40	; 64
 178:	e1 f7       	brne	.-8      	; 0x172 <i2c_send_slave_address_with_read_req+0x10>
}
 17a:	08 95       	ret

0000017c <i2c_write_byte>:



void i2c_write_byte(unsigned char byte)
{
	TWDR = byte;                            // put data in TWDR
 17c:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<< TWINT) | (1<< TWEN);        // Clear TWI interrupt flag,Enable TWI
 17e:	84 e8       	ldi	r24, 0x84	; 132
 180:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<< TWINT)));          // Wait till complete TWDR byte transmitted
 182:	06 b6       	in	r0, 0x36	; 54
 184:	07 fe       	sbrs	r0, 7
 186:	fd cf       	rjmp	.-6      	; 0x182 <i2c_write_byte+0x6>
	while((TWSR & 0xF8) != WR_BYTE_ACK);    // Check for the acknowledgment
 188:	81 b1       	in	r24, 0x01	; 1
 18a:	88 7f       	andi	r24, 0xF8	; 248
 18c:	88 32       	cpi	r24, 0x28	; 40
 18e:	e1 f7       	brne	.-8      	; 0x188 <i2c_write_byte+0xc>
	return;
}
 190:	08 95       	ret

00000192 <i2c_read_byte>:



unsigned char i2c_read_byte(void)
{
	TWCR = (1<< TWINT) | (1<< TWEN);             // Clear TWI interrupt flag,Enable TWI
 192:	84 e8       	ldi	r24, 0x84	; 132
 194:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR & (1<< TWINT)));                // Wait till complete TWDR byte transmitted
 196:	06 b6       	in	r0, 0x36	; 54
 198:	07 fe       	sbrs	r0, 7
 19a:	fd cf       	rjmp	.-6      	; 0x196 <i2c_read_byte+0x4>
	while((TWSR & 0xF8) != RD_BYTE_WITH_NACK);   // Check for the acknowledgment
 19c:	81 b1       	in	r24, 0x01	; 1
 19e:	88 7f       	andi	r24, 0xF8	; 248
 1a0:	88 35       	cpi	r24, 0x58	; 88
 1a2:	e1 f7       	brne	.-8      	; 0x19c <i2c_read_byte+0xa>
	return TWDR;
 1a4:	83 b1       	in	r24, 0x03	; 3
}
 1a6:	08 95       	ret

000001a8 <i2c_stop>:



void i2c_stop(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);  // Clear TWI interrupt flag, Put stop condition on SDA,Enable TWI
 1a8:	84 e9       	ldi	r24, 0x94	; 148
 1aa:	86 bf       	out	0x36, r24	; 54
 1ac:	08 95       	ret

000001ae <main>:
#include <util/delay.h>



int main (void)
{
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	1f 92       	push	r1
 1b4:	cd b7       	in	r28, 0x3d	; 61
 1b6:	de b7       	in	r29, 0x3e	; 62
	u8 choose;
	extern address;
	UART_voidInit();
 1b8:	0e 94 45 02 	call	0x48a	; 0x48a <UART_voidInit>
	DIO_voidSetPortDirection(DIO_PORTC, DIO_OUTPUT);
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DIO_voidSetPortDirection>
	EEPROM_voidInit();
 1c4:	0e 94 49 00 	call	0x92	; 0x92 <EEPROM_voidInit>
	
	//check for previous data
	if(EEPROM_u8ReadDataByte(0) == 0){	//if there's a user stored in eeprom then get the number of users from the last address
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 69 00 	call	0xd2	; 0xd2 <EEPROM_u8ReadDataByte>
 1d0:	89 2b       	or	r24, r25
 1d2:	31 f4       	brne	.+12     	; 0x1e0 <main+0x32>
		counter = EEPROM_u8ReadDataByte(0x03FF);
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	93 e0       	ldi	r25, 0x03	; 3
 1d8:	0e 94 69 00 	call	0xd2	; 0xd2 <EEPROM_u8ReadDataByte>
 1dc:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <counter>
	}
	
	
	UART_voidSendStringSynch("***** ");
 1e0:	80 e6       	ldi	r24, 0x60	; 96
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
	UART_voidSendStringSynch("The number of current users: ");
 1e8:	87 e6       	ldi	r24, 0x67	; 103
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
	UART_voidSendNumberSynch(counter);
 1f0:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <counter>
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <UART_voidSendNumberSynch>
	UART_voidSendDataSynch(' ');
 1fa:	80 e2       	ldi	r24, 0x20	; 32
 1fc:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
	while(1){
		UART_voidSendStringSynch("1. Enter new user name. ");
 200:	85 e8       	ldi	r24, 0x85	; 133
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
		UART_voidSendStringSynch("2. Sign In. ");
 208:	8e e9       	ldi	r24, 0x9E	; 158
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
		UART_voidSendStringSynch("3. Edit current data. ");
 210:	8b ea       	ldi	r24, 0xAB	; 171
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
		UART_voidSendStringSynch("4. Show current data. ");
 218:	82 ec       	ldi	r24, 0xC2	; 194
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
		UART_voidSendStringSynch("Choose a choice: ");
 220:	89 ed       	ldi	r24, 0xD9	; 217
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
		UART_u8ReceiveDataSynch(&choose);			//enter '+' after you insert your choice
 228:	ce 01       	movw	r24, r28
 22a:	01 96       	adiw	r24, 0x01	; 1
 22c:	0e 94 53 02 	call	0x4a6	; 0x4a6 <UART_u8ReceiveDataSynch>
		UART_voidSendDataSynch(choose);
 230:	89 81       	ldd	r24, Y+1	; 0x01
 232:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
		UART_voidSendDataSynch(' ');
 236:	80 e2       	ldi	r24, 0x20	; 32
 238:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
		switch(choose){
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	82 33       	cpi	r24, 0x32	; 50
 240:	61 f0       	breq	.+24     	; 0x25a <main+0xac>
 242:	18 f4       	brcc	.+6      	; 0x24a <main+0x9c>
 244:	81 33       	cpi	r24, 0x31	; 49
 246:	31 f0       	breq	.+12     	; 0x254 <main+0xa6>
 248:	db cf       	rjmp	.-74     	; 0x200 <main+0x52>
 24a:	83 33       	cpi	r24, 0x33	; 51
 24c:	89 f0       	breq	.+34     	; 0x270 <main+0xc2>
 24e:	84 33       	cpi	r24, 0x34	; 52
 250:	91 f0       	breq	.+36     	; 0x276 <main+0xc8>
 252:	d6 cf       	rjmp	.-84     	; 0x200 <main+0x52>
			case '1':
				new();
 254:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <new>
				break;
 258:	d3 cf       	rjmp	.-90     	; 0x200 <main+0x52>
			case '2':
				SignIn();
 25a:	0e 94 b2 04 	call	0x964	; 0x964 <SignIn>
				if(lock == 2)
 25e:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <lock>
 262:	82 30       	cpi	r24, 0x02	; 2
 264:	59 f0       	breq	.+22     	; 0x27c <main+0xce>
					return 0;
				if(lock == 1)
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	59 f6       	brne	.-106    	; 0x200 <main+0x52>
					Light();
 26a:	0e 94 21 06 	call	0xc42	; 0xc42 <Light>
 26e:	c8 cf       	rjmp	.-112    	; 0x200 <main+0x52>
				break;
			case '3':
				Edit();
 270:	0e 94 15 05 	call	0xa2a	; 0xa2a <Edit>
				break;
 274:	c5 cf       	rjmp	.-118    	; 0x200 <main+0x52>
			case '4':
				Show();
 276:	0e 94 c5 05 	call	0xb8a	; 0xb8a <Show>
 27a:	c2 cf       	rjmp	.-124    	; 0x200 <main+0x52>
			
		}
	}
	return 0;

}
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0f 90       	pop	r0
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	08 95       	ret

00000288 <DIO_voidSetPinValue>:
		}

		return Local_u8PinValue;

	}
}
 288:	84 30       	cpi	r24, 0x04	; 4
 28a:	08 f0       	brcs	.+2      	; 0x28e <DIO_voidSetPinValue+0x6>
 28c:	a9 c0       	rjmp	.+338    	; 0x3e0 <DIO_voidSetPinValue+0x158>
 28e:	68 30       	cpi	r22, 0x08	; 8
 290:	08 f0       	brcs	.+2      	; 0x294 <DIO_voidSetPinValue+0xc>
 292:	a6 c0       	rjmp	.+332    	; 0x3e0 <DIO_voidSetPinValue+0x158>
 294:	41 30       	cpi	r20, 0x01	; 1
 296:	e9 f1       	breq	.+122    	; 0x312 <DIO_voidSetPinValue+0x8a>
 298:	20 f0       	brcs	.+8      	; 0x2a2 <DIO_voidSetPinValue+0x1a>
 29a:	42 30       	cpi	r20, 0x02	; 2
 29c:	09 f4       	brne	.+2      	; 0x2a0 <DIO_voidSetPinValue+0x18>
 29e:	6d c0       	rjmp	.+218    	; 0x37a <DIO_voidSetPinValue+0xf2>
 2a0:	08 95       	ret
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	91 f0       	breq	.+36     	; 0x2ca <DIO_voidSetPinValue+0x42>
 2a6:	28 f0       	brcs	.+10     	; 0x2b2 <DIO_voidSetPinValue+0x2a>
 2a8:	82 30       	cpi	r24, 0x02	; 2
 2aa:	d9 f0       	breq	.+54     	; 0x2e2 <DIO_voidSetPinValue+0x5a>
 2ac:	83 30       	cpi	r24, 0x03	; 3
 2ae:	29 f1       	breq	.+74     	; 0x2fa <DIO_voidSetPinValue+0x72>
 2b0:	08 95       	ret
 2b2:	2b b3       	in	r18, 0x1b	; 27
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	02 c0       	rjmp	.+4      	; 0x2be <DIO_voidSetPinValue+0x36>
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	6a 95       	dec	r22
 2c0:	e2 f7       	brpl	.-8      	; 0x2ba <DIO_voidSetPinValue+0x32>
 2c2:	80 95       	com	r24
 2c4:	82 23       	and	r24, r18
 2c6:	8b bb       	out	0x1b, r24	; 27
 2c8:	08 95       	ret
 2ca:	28 b3       	in	r18, 0x18	; 24
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_voidSetPinValue+0x4e>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_voidSetPinValue+0x4a>
 2da:	80 95       	com	r24
 2dc:	82 23       	and	r24, r18
 2de:	88 bb       	out	0x18, r24	; 24
 2e0:	08 95       	ret
 2e2:	25 b3       	in	r18, 0x15	; 21
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <DIO_voidSetPinValue+0x66>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	6a 95       	dec	r22
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <DIO_voidSetPinValue+0x62>
 2f2:	80 95       	com	r24
 2f4:	82 23       	and	r24, r18
 2f6:	85 bb       	out	0x15, r24	; 21
 2f8:	08 95       	ret
 2fa:	22 b3       	in	r18, 0x12	; 18
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 c0       	rjmp	.+4      	; 0x306 <DIO_voidSetPinValue+0x7e>
 302:	88 0f       	add	r24, r24
 304:	99 1f       	adc	r25, r25
 306:	6a 95       	dec	r22
 308:	e2 f7       	brpl	.-8      	; 0x302 <DIO_voidSetPinValue+0x7a>
 30a:	80 95       	com	r24
 30c:	82 23       	and	r24, r18
 30e:	82 bb       	out	0x12, r24	; 18
 310:	08 95       	ret
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	89 f0       	breq	.+34     	; 0x338 <DIO_voidSetPinValue+0xb0>
 316:	28 f0       	brcs	.+10     	; 0x322 <DIO_voidSetPinValue+0x9a>
 318:	82 30       	cpi	r24, 0x02	; 2
 31a:	c9 f0       	breq	.+50     	; 0x34e <DIO_voidSetPinValue+0xc6>
 31c:	83 30       	cpi	r24, 0x03	; 3
 31e:	11 f1       	breq	.+68     	; 0x364 <DIO_voidSetPinValue+0xdc>
 320:	08 95       	ret
 322:	2b b3       	in	r18, 0x1b	; 27
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_voidSetPinValue+0xa6>
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	6a 95       	dec	r22
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_voidSetPinValue+0xa2>
 332:	82 2b       	or	r24, r18
 334:	8b bb       	out	0x1b, r24	; 27
 336:	08 95       	ret
 338:	28 b3       	in	r18, 0x18	; 24
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_voidSetPinValue+0xbc>
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_voidSetPinValue+0xb8>
 348:	82 2b       	or	r24, r18
 34a:	88 bb       	out	0x18, r24	; 24
 34c:	08 95       	ret
 34e:	25 b3       	in	r18, 0x15	; 21
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	90 e0       	ldi	r25, 0x00	; 0
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_voidSetPinValue+0xd2>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	6a 95       	dec	r22
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_voidSetPinValue+0xce>
 35e:	82 2b       	or	r24, r18
 360:	85 bb       	out	0x15, r24	; 21
 362:	08 95       	ret
 364:	22 b3       	in	r18, 0x12	; 18
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_voidSetPinValue+0xe8>
 36c:	88 0f       	add	r24, r24
 36e:	99 1f       	adc	r25, r25
 370:	6a 95       	dec	r22
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_voidSetPinValue+0xe4>
 374:	82 2b       	or	r24, r18
 376:	82 bb       	out	0x12, r24	; 18
 378:	08 95       	ret
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	89 f0       	breq	.+34     	; 0x3a0 <DIO_voidSetPinValue+0x118>
 37e:	28 f0       	brcs	.+10     	; 0x38a <DIO_voidSetPinValue+0x102>
 380:	82 30       	cpi	r24, 0x02	; 2
 382:	c9 f0       	breq	.+50     	; 0x3b6 <DIO_voidSetPinValue+0x12e>
 384:	83 30       	cpi	r24, 0x03	; 3
 386:	11 f1       	breq	.+68     	; 0x3cc <DIO_voidSetPinValue+0x144>
 388:	08 95       	ret
 38a:	2b b3       	in	r18, 0x1b	; 27
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	02 c0       	rjmp	.+4      	; 0x396 <DIO_voidSetPinValue+0x10e>
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	6a 95       	dec	r22
 398:	e2 f7       	brpl	.-8      	; 0x392 <DIO_voidSetPinValue+0x10a>
 39a:	82 27       	eor	r24, r18
 39c:	8b bb       	out	0x1b, r24	; 27
 39e:	08 95       	ret
 3a0:	28 b3       	in	r18, 0x18	; 24
 3a2:	81 e0       	ldi	r24, 0x01	; 1
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_voidSetPinValue+0x124>
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	6a 95       	dec	r22
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_voidSetPinValue+0x120>
 3b0:	82 27       	eor	r24, r18
 3b2:	88 bb       	out	0x18, r24	; 24
 3b4:	08 95       	ret
 3b6:	25 b3       	in	r18, 0x15	; 21
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_voidSetPinValue+0x13a>
 3be:	88 0f       	add	r24, r24
 3c0:	99 1f       	adc	r25, r25
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_voidSetPinValue+0x136>
 3c6:	82 27       	eor	r24, r18
 3c8:	85 bb       	out	0x15, r24	; 21
 3ca:	08 95       	ret
 3cc:	22 b3       	in	r18, 0x12	; 18
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <DIO_voidSetPinValue+0x150>
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	6a 95       	dec	r22
 3da:	e2 f7       	brpl	.-8      	; 0x3d4 <DIO_voidSetPinValue+0x14c>
 3dc:	82 27       	eor	r24, r18
 3de:	82 bb       	out	0x12, r24	; 18
 3e0:	08 95       	ret

000003e2 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8PortNB,u8 Copy_u8PortDirection){
	/* input validation */
	if(Copy_u8PortNB>DIO_PORTD ){
 3e2:	84 30       	cpi	r24, 0x04	; 4
 3e4:	38 f5       	brcc	.+78     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		#warning "You Entered invalid inputs"
		return;
	}
	else
	{
		switch(Copy_u8PortDirection){
 3e6:	66 23       	and	r22, r22
 3e8:	b1 f0       	breq	.+44     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3ea:	61 30       	cpi	r22, 0x01	; 1
 3ec:	19 f5       	brne	.+70     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
			case DIO_OUTPUT:
			switch (Copy_u8PortNB){
 3ee:	81 30       	cpi	r24, 0x01	; 1
 3f0:	49 f0       	breq	.+18     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3f2:	28 f0       	brcs	.+10     	; 0x3fe <DIO_voidSetPortDirection+0x1c>
 3f4:	82 30       	cpi	r24, 0x02	; 2
 3f6:	49 f0       	breq	.+18     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3f8:	83 30       	cpi	r24, 0x03	; 3
 3fa:	51 f0       	breq	.+20     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3fc:	08 95       	ret
				case DIO_PORTA: DDRA = 0xff; break;
 3fe:	8f ef       	ldi	r24, 0xFF	; 255
 400:	8a bb       	out	0x1a, r24	; 26
 402:	08 95       	ret
				case DIO_PORTB: DDRB = 0xff; break;
 404:	8f ef       	ldi	r24, 0xFF	; 255
 406:	87 bb       	out	0x17, r24	; 23
 408:	08 95       	ret
				case DIO_PORTC: DDRC = 0xff; break;
 40a:	8f ef       	ldi	r24, 0xFF	; 255
 40c:	84 bb       	out	0x14, r24	; 20
 40e:	08 95       	ret
				case DIO_PORTD: DDRD = 0xff; break;
 410:	8f ef       	ldi	r24, 0xFF	; 255
 412:	81 bb       	out	0x11, r24	; 17
 414:	08 95       	ret
			}
			break;

			case  DIO_INPUT:
			switch (Copy_u8PortNB){
 416:	81 30       	cpi	r24, 0x01	; 1
 418:	41 f0       	breq	.+16     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 41a:	28 f0       	brcs	.+10     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 41c:	82 30       	cpi	r24, 0x02	; 2
 41e:	39 f0       	breq	.+14     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 420:	83 30       	cpi	r24, 0x03	; 3
 422:	39 f0       	breq	.+14     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 424:	08 95       	ret
				case DIO_PORTA: DDRA = 0x00; break;
 426:	1a ba       	out	0x1a, r1	; 26
 428:	08 95       	ret
				case DIO_PORTB: DDRB = 0x00; break;
 42a:	17 ba       	out	0x17, r1	; 23
 42c:	08 95       	ret
				case DIO_PORTC: DDRC = 0x00; break;
 42e:	14 ba       	out	0x14, r1	; 20
 430:	08 95       	ret
				case DIO_PORTD: DDRD = 0x00; break;
 432:	11 ba       	out	0x11, r1	; 17
 434:	08 95       	ret

00000436 <DIO_voidSetPortValue>:
}

/* set the value of a port chosen by the user */
void DIO_voidSetPortValue(u8 Copy_u8PortNB, u8 Copy_u8Value){
/* input validation */
	if(Copy_u8PortNB>DIO_PORTD ){
 436:	84 30       	cpi	r24, 0x04	; 4
 438:	38 f5       	brcc	.+78     	; 0x488 <DIO_voidSetPortValue+0x52>
		#warning "You Entered invalid inputs"
		return;
	}
	else
	{
		switch(Copy_u8Value){
 43a:	66 23       	and	r22, r22
 43c:	b1 f0       	breq	.+44     	; 0x46a <DIO_voidSetPortValue+0x34>
 43e:	61 30       	cpi	r22, 0x01	; 1
 440:	19 f5       	brne	.+70     	; 0x488 <DIO_voidSetPortValue+0x52>
			case DIO_HIGH:
			switch (Copy_u8PortNB){
 442:	81 30       	cpi	r24, 0x01	; 1
 444:	49 f0       	breq	.+18     	; 0x458 <DIO_voidSetPortValue+0x22>
 446:	28 f0       	brcs	.+10     	; 0x452 <DIO_voidSetPortValue+0x1c>
 448:	82 30       	cpi	r24, 0x02	; 2
 44a:	49 f0       	breq	.+18     	; 0x45e <DIO_voidSetPortValue+0x28>
 44c:	83 30       	cpi	r24, 0x03	; 3
 44e:	51 f0       	breq	.+20     	; 0x464 <DIO_voidSetPortValue+0x2e>
 450:	08 95       	ret
				case DIO_PORTA: PORTA = 0xff; break;
 452:	8f ef       	ldi	r24, 0xFF	; 255
 454:	8b bb       	out	0x1b, r24	; 27
 456:	08 95       	ret
				case DIO_PORTB: PORTB = 0xff; break;
 458:	8f ef       	ldi	r24, 0xFF	; 255
 45a:	88 bb       	out	0x18, r24	; 24
 45c:	08 95       	ret
				case DIO_PORTC: PORTC = 0xff; break;
 45e:	8f ef       	ldi	r24, 0xFF	; 255
 460:	85 bb       	out	0x15, r24	; 21
 462:	08 95       	ret
				case DIO_PORTD: PORTD = 0xff; break;
 464:	8f ef       	ldi	r24, 0xFF	; 255
 466:	82 bb       	out	0x12, r24	; 18
 468:	08 95       	ret
			}
			break;

			case  DIO_LOW:
			switch (Copy_u8PortNB){
 46a:	81 30       	cpi	r24, 0x01	; 1
 46c:	41 f0       	breq	.+16     	; 0x47e <DIO_voidSetPortValue+0x48>
 46e:	28 f0       	brcs	.+10     	; 0x47a <DIO_voidSetPortValue+0x44>
 470:	82 30       	cpi	r24, 0x02	; 2
 472:	39 f0       	breq	.+14     	; 0x482 <DIO_voidSetPortValue+0x4c>
 474:	83 30       	cpi	r24, 0x03	; 3
 476:	39 f0       	breq	.+14     	; 0x486 <DIO_voidSetPortValue+0x50>
 478:	08 95       	ret
				case DIO_PORTA: PORTA = 0x00; break;
 47a:	1b ba       	out	0x1b, r1	; 27
 47c:	08 95       	ret
				case DIO_PORTB: PORTB = 0x00; break;
 47e:	18 ba       	out	0x18, r1	; 24
 480:	08 95       	ret
				case DIO_PORTC: PORTC = 0x00; break;
 482:	15 ba       	out	0x15, r1	; 21
 484:	08 95       	ret
				case DIO_PORTD: PORTD = 0x00; break;
 486:	12 ba       	out	0x12, r1	; 18
 488:	08 95       	ret

0000048a <UART_voidInit>:
void UART_voidInit(void){
	u8  ucsrb, ucsrc;	
	ucsrb = ucsrb |(1<<TXEN | 1<<RXEN);		//Enable TX and RX.    //we didn't set the interrupts yet
	ucsrc = ucsrc |(1<<URSEL| 3<<UCSZ);		//select UCSRC and set the character size to 8 bit.
	
	UBRRL = 51;		//baudrate 9600 for 8MHz
 48a:	83 e3       	ldi	r24, 0x33	; 51
 48c:	89 b9       	out	0x09, r24	; 9
	
	UCSRB = ucsrb;	//Enable RX , TX only without interrupts
 48e:	88 e1       	ldi	r24, 0x18	; 24
 490:	8a b9       	out	0x0a, r24	; 10
	UCSRC = ucsrc;	//8-bit data
 492:	86 e8       	ldi	r24, 0x86	; 134
 494:	80 bd       	out	0x20, r24	; 32
 496:	08 95       	ret

00000498 <UART_voidSendDataSynch>:


//For Polling transmission and reception
void UART_voidSendDataSynch(u8 Copy_u8Data){
	
	while(GET_BIT(UCSRA,UDRE) == 0);	//wait until the Data Registe Embty is set
 498:	5d 9b       	sbis	0x0b, 5	; 11
 49a:	fe cf       	rjmp	.-4      	; 0x498 <UART_voidSendDataSynch>
	UDR = Copy_u8Data;
 49c:	8c b9       	out	0x0c, r24	; 12
	while(GET_BIT(UCSRA,TXC) == 0);	//wait until data is transmitted
 49e:	5e 9b       	sbis	0x0b, 6	; 11
 4a0:	fe cf       	rjmp	.-4      	; 0x49e <UART_voidSendDataSynch+0x6>
	SET_BIT(UCSRA,TXC);	//clear the flag of TX complete
 4a2:	5e 9a       	sbi	0x0b, 6	; 11
 4a4:	08 95       	ret

000004a6 <UART_u8ReceiveDataSynch>:
}

void UART_u8ReceiveDataSynch(u8 *Copy_pu8Data){
	while(GET_BIT(UCSRA,RXC)==0);	//wait until there's data to be read in the receive buffer
 4a6:	5f 9b       	sbis	0x0b, 7	; 11
 4a8:	fe cf       	rjmp	.-4      	; 0x4a6 <UART_u8ReceiveDataSynch>
	SET_BIT(UCSRA,RXC);				//clear the receive flag 
 4aa:	5f 9a       	sbi	0x0b, 7	; 11
	*Copy_pu8Data = UDR;			//send the received character to the addressed variable
 4ac:	2c b1       	in	r18, 0x0c	; 12
 4ae:	fc 01       	movw	r30, r24
 4b0:	20 83       	st	Z, r18
 4b2:	08 95       	ret

000004b4 <UART_voidSendStringSynch>:
}

void UART_voidSendStringSynch(u8* Copy_pu8String){
 4b4:	0f 93       	push	r16
 4b6:	1f 93       	push	r17
 4b8:	cf 93       	push	r28
 4ba:	fc 01       	movw	r30, r24
	u8 counter = 0;
		while(Copy_pu8String[counter] != '\0'){
 4bc:	80 81       	ld	r24, Z
 4be:	88 23       	and	r24, r24
 4c0:	59 f0       	breq	.+22     	; 0x4d8 <UART_voidSendStringSynch+0x24>
 4c2:	8f 01       	movw	r16, r30
 4c4:	c0 e0       	ldi	r28, 0x00	; 0
			
			UART_voidSendDataSynch(Copy_pu8String[counter]);
 4c6:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
			counter++;
 4ca:	cf 5f       	subi	r28, 0xFF	; 255
	*Copy_pu8Data = UDR;			//send the received character to the addressed variable
}

void UART_voidSendStringSynch(u8* Copy_pu8String){
	u8 counter = 0;
		while(Copy_pu8String[counter] != '\0'){
 4cc:	f8 01       	movw	r30, r16
 4ce:	ec 0f       	add	r30, r28
 4d0:	f1 1d       	adc	r31, r1
 4d2:	80 81       	ld	r24, Z
 4d4:	81 11       	cpse	r24, r1
 4d6:	f7 cf       	rjmp	.-18     	; 0x4c6 <UART_voidSendStringSynch+0x12>
			UART_voidSendDataSynch(Copy_pu8String[counter]);
			counter++;
		}
		
	
}
 4d8:	cf 91       	pop	r28
 4da:	1f 91       	pop	r17
 4dc:	0f 91       	pop	r16
 4de:	08 95       	ret

000004e0 <UART_voidSendNumberSynch>:

void UART_voidSendNumberSynch(u32 Copy_u32Number){
 4e0:	0f 93       	push	r16
 4e2:	1f 93       	push	r17
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	fc 01       	movw	r30, r24
	u8 SentChar;
	u32 y = 1;
	if(Copy_u32Number == 0){
 4ea:	89 2b       	or	r24, r25
 4ec:	21 f4       	brne	.+8      	; 0x4f6 <UART_voidSendNumberSynch+0x16>
		UART_voidSendDataSynch('0');
 4ee:	80 e3       	ldi	r24, 0x30	; 48
 4f0:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
 4f4:	30 c0       	rjmp	.+96     	; 0x556 <UART_voidSendNumberSynch+0x76>
 4f6:	c1 e0       	ldi	r28, 0x01	; 1
 4f8:	d0 e0       	ldi	r29, 0x00	; 0
 4fa:	01 c0       	rjmp	.+2      	; 0x4fe <UART_voidSendNumberSynch+0x1e>
	}
	while(Copy_u32Number/(10*y) !=0){
 4fc:	e9 01       	movw	r28, r18
 4fe:	ce 01       	movw	r24, r28
 500:	88 0f       	add	r24, r24
 502:	99 1f       	adc	r25, r25
 504:	88 0f       	add	r24, r24
 506:	99 1f       	adc	r25, r25
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	9e 01       	movw	r18, r28
 50e:	22 0f       	add	r18, r18
 510:	33 1f       	adc	r19, r19
 512:	28 0f       	add	r18, r24
 514:	39 1f       	adc	r19, r25
 516:	cf 01       	movw	r24, r30
 518:	b9 01       	movw	r22, r18
 51a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__udivmodhi4>
 51e:	67 2b       	or	r22, r23
 520:	69 f7       	brne	.-38     	; 0x4fc <UART_voidSendNumberSynch+0x1c>
		y*=10;
	}
	while(Copy_u32Number !=0){
		SentChar = (Copy_u32Number/y)+'0';
		UART_voidSendDataSynch(SentChar);
 522:	cf 01       	movw	r24, r30
 524:	be 01       	movw	r22, r28
 526:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__udivmodhi4>
 52a:	08 2f       	mov	r16, r24
 52c:	19 2f       	mov	r17, r25
 52e:	80 e3       	ldi	r24, 0x30	; 48
 530:	86 0f       	add	r24, r22
 532:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
		Copy_u32Number %=y;
 536:	e0 2f       	mov	r30, r16
 538:	f1 2f       	mov	r31, r17
		y/=10;
 53a:	9e 01       	movw	r18, r28
 53c:	ad ec       	ldi	r26, 0xCD	; 205
 53e:	bc ec       	ldi	r27, 0xCC	; 204
 540:	0e 94 74 06 	call	0xce8	; 0xce8 <__umulhisi3>
 544:	ec 01       	movw	r28, r24
 546:	d6 95       	lsr	r29
 548:	c7 95       	ror	r28
 54a:	d6 95       	lsr	r29
 54c:	c7 95       	ror	r28
 54e:	d6 95       	lsr	r29
 550:	c7 95       	ror	r28
		UART_voidSendDataSynch('0');
	}
	while(Copy_u32Number/(10*y) !=0){
		y*=10;
	}
	while(Copy_u32Number !=0){
 552:	30 97       	sbiw	r30, 0x00	; 0
 554:	31 f7       	brne	.-52     	; 0x522 <UART_voidSendNumberSynch+0x42>
		UART_voidSendDataSynch(SentChar);
		Copy_u32Number %=y;
		y/=10;
	}
	
}
 556:	df 91       	pop	r29
 558:	cf 91       	pop	r28
 55a:	1f 91       	pop	r17
 55c:	0f 91       	pop	r16
 55e:	08 95       	ret

00000560 <UART_voidReceiveStringSynch>:

void UART_voidReceiveStringSynch(u8* Copy_pu8Data , u8 BufferSize){
 560:	cf 92       	push	r12
 562:	df 92       	push	r13
 564:	ef 92       	push	r14
 566:	ff 92       	push	r15
 568:	1f 93       	push	r17
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	6c 01       	movw	r12, r24
	
	u8 counter = -1;
 570:	1f ef       	ldi	r17, 0xFF	; 255
	do{
		counter++;
		UART_u8ReceiveDataSynch(Copy_pu8Data+counter);
		UART_voidSendDataSynch(Copy_pu8Data[counter]);
	}while(Copy_pu8Data[counter] != '+' && counter < BufferSize-1 );				//loop until Enter is pressed and is less than the last element of the buffer
 572:	e6 2e       	mov	r14, r22
 574:	f1 2c       	mov	r15, r1
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	e8 1a       	sub	r14, r24
 57a:	f1 08       	sbc	r15, r1

void UART_voidReceiveStringSynch(u8* Copy_pu8Data , u8 BufferSize){
	
	u8 counter = -1;
	do{
		counter++;
 57c:	1f 5f       	subi	r17, 0xFF	; 255
		UART_u8ReceiveDataSynch(Copy_pu8Data+counter);
 57e:	e6 01       	movw	r28, r12
 580:	c1 0f       	add	r28, r17
 582:	d1 1d       	adc	r29, r1
 584:	ce 01       	movw	r24, r28
 586:	0e 94 53 02 	call	0x4a6	; 0x4a6 <UART_u8ReceiveDataSynch>
		UART_voidSendDataSynch(Copy_pu8Data[counter]);
 58a:	88 81       	ld	r24, Y
 58c:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
	}while(Copy_pu8Data[counter] != '+' && counter < BufferSize-1 );				//loop until Enter is pressed and is less than the last element of the buffer
 590:	88 81       	ld	r24, Y
 592:	8b 32       	cpi	r24, 0x2B	; 43
 594:	29 f0       	breq	.+10     	; 0x5a0 <UART_voidReceiveStringSynch+0x40>
 596:	81 2f       	mov	r24, r17
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	8e 15       	cp	r24, r14
 59c:	9f 05       	cpc	r25, r15
 59e:	74 f3       	brlt	.-36     	; 0x57c <UART_voidReceiveStringSynch+0x1c>
	Copy_pu8Data[counter] = '\0';			//put the null character at the last element of the buffer
 5a0:	18 82       	st	Y, r1
}
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	1f 91       	pop	r17
 5a8:	ff 90       	pop	r15
 5aa:	ef 90       	pop	r14
 5ac:	df 90       	pop	r13
 5ae:	cf 90       	pop	r12
 5b0:	08 95       	ret

000005b2 <UART_voidReceiveNumberSynch>:

void UART_voidReceiveNumberSynch(u32 *Copy_pu32Number){
 5b2:	5f 92       	push	r5
 5b4:	6f 92       	push	r6
 5b6:	7f 92       	push	r7
 5b8:	8f 92       	push	r8
 5ba:	9f 92       	push	r9
 5bc:	af 92       	push	r10
 5be:	bf 92       	push	r11
 5c0:	cf 92       	push	r12
 5c2:	df 92       	push	r13
 5c4:	ef 92       	push	r14
 5c6:	ff 92       	push	r15
 5c8:	0f 93       	push	r16
 5ca:	1f 93       	push	r17
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	cd b7       	in	r28, 0x3d	; 61
 5d2:	de b7       	in	r29, 0x3e	; 62
 5d4:	2a 97       	sbiw	r28, 0x0a	; 10
 5d6:	0f b6       	in	r0, 0x3f	; 63
 5d8:	f8 94       	cli
 5da:	de bf       	out	0x3e, r29	; 62
 5dc:	0f be       	out	0x3f, r0	; 63
 5de:	cd bf       	out	0x3d, r28	; 61
 5e0:	3c 01       	movw	r6, r24
 5e2:	ae 01       	movw	r20, r28
 5e4:	4f 5f       	subi	r20, 0xFF	; 255
 5e6:	5f 4f       	sbci	r21, 0xFF	; 255
 5e8:	7a 01       	movw	r14, r20
 5ea:	6a 01       	movw	r12, r20
 5ec:	00 e0       	ldi	r16, 0x00	; 0
 5ee:	10 e0       	ldi	r17, 0x00	; 0
	u8 counter = 0;
	u32 number = 0;
	u32 decimal = 1;
	u8 temp;
	do{		//receive the number and put it into a buffer
		numlen++;
 5f0:	50 2e       	mov	r5, r16
		UART_u8ReceiveDataSynch(&(Buffer[numlen]));
 5f2:	58 01       	movw	r10, r16
 5f4:	46 01       	movw	r8, r12
 5f6:	c6 01       	movw	r24, r12
 5f8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <UART_u8ReceiveDataSynch>
		UART_voidSendDataSynch(Buffer[numlen]);
 5fc:	d6 01       	movw	r26, r12
 5fe:	8d 91       	ld	r24, X+
 600:	6d 01       	movw	r12, r26
 602:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
		
	}while(Buffer[numlen] != '+' && numlen< 10);		//the last element storing Enter char.
 606:	f4 01       	movw	r30, r8
 608:	80 81       	ld	r24, Z
 60a:	8b 32       	cpi	r24, 0x2B	; 43
 60c:	09 f4       	brne	.+2      	; 0x610 <UART_voidReceiveNumberSynch+0x5e>
 60e:	47 c0       	rjmp	.+142    	; 0x69e <UART_voidReceiveNumberSynch+0xec>
 610:	0f 5f       	subi	r16, 0xFF	; 255
 612:	1f 4f       	sbci	r17, 0xFF	; 255
 614:	0b 30       	cpi	r16, 0x0B	; 11
 616:	11 05       	cpc	r17, r1
 618:	59 f7       	brne	.-42     	; 0x5f0 <UART_voidReceiveNumberSynch+0x3e>
 61a:	41 c0       	rjmp	.+130    	; 0x69e <UART_voidReceiveNumberSynch+0xec>
	
	for( ;counter<=numlen/2;counter++){	//swap the buffer element	as it is stored inversely
		temp = Buffer[numlen - counter-1];
 61c:	a8 2f       	mov	r26, r24
 61e:	b0 e0       	ldi	r27, 0x00	; 0
 620:	f5 01       	movw	r30, r10
 622:	ea 1b       	sub	r30, r26
 624:	fb 0b       	sbc	r31, r27
 626:	31 97       	sbiw	r30, 0x01	; 1
 628:	41 e0       	ldi	r20, 0x01	; 1
 62a:	50 e0       	ldi	r21, 0x00	; 0
 62c:	4c 0f       	add	r20, r28
 62e:	5d 1f       	adc	r21, r29
 630:	e4 0f       	add	r30, r20
 632:	f5 1f       	adc	r31, r21
 634:	90 81       	ld	r25, Z
		Buffer[numlen - counter - 1] = Buffer[counter] - '0';
 636:	a4 0f       	add	r26, r20
 638:	b5 1f       	adc	r27, r21
 63a:	2c 91       	ld	r18, X
 63c:	20 53       	subi	r18, 0x30	; 48
 63e:	20 83       	st	Z, r18
		Buffer[counter] = temp - '0';
 640:	90 53       	subi	r25, 0x30	; 48
 642:	9c 93       	st	X, r25
		UART_u8ReceiveDataSynch(&(Buffer[numlen]));
		UART_voidSendDataSynch(Buffer[numlen]);
		
	}while(Buffer[numlen] != '+' && numlen< 10);		//the last element storing Enter char.
	
	for( ;counter<=numlen/2;counter++){	//swap the buffer element	as it is stored inversely
 644:	8f 5f       	subi	r24, 0xFF	; 255
 646:	38 17       	cp	r19, r24
 648:	48 f7       	brcc	.-46     	; 0x61c <UART_voidReceiveNumberSynch+0x6a>
		temp = Buffer[numlen - counter-1];
		Buffer[numlen - counter - 1] = Buffer[counter] - '0';
		Buffer[counter] = temp - '0';
		
	}
	for(counter = 0; counter<numlen; counter++){
 64a:	55 20       	and	r5, r5
 64c:	11 f1       	breq	.+68     	; 0x692 <UART_voidReceiveNumberSynch+0xe0>
 64e:	5a 94       	dec	r5
 650:	fe 01       	movw	r30, r28
 652:	e5 0d       	add	r30, r5
 654:	f1 1d       	adc	r31, r1
 656:	32 96       	adiw	r30, 0x02	; 2
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	20 e0       	ldi	r18, 0x00	; 0
 65e:	30 e0       	ldi	r19, 0x00	; 0
		number = number + Buffer[counter]*decimal;
 660:	d7 01       	movw	r26, r14
 662:	6d 91       	ld	r22, X+
 664:	7d 01       	movw	r14, r26
 666:	68 9f       	mul	r22, r24
 668:	a0 01       	movw	r20, r0
 66a:	69 9f       	mul	r22, r25
 66c:	50 0d       	add	r21, r0
 66e:	11 24       	eor	r1, r1
 670:	24 0f       	add	r18, r20
 672:	35 1f       	adc	r19, r21
		decimal *= 10;
 674:	ac 01       	movw	r20, r24
 676:	44 0f       	add	r20, r20
 678:	55 1f       	adc	r21, r21
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	88 0f       	add	r24, r24
 684:	99 1f       	adc	r25, r25
 686:	84 0f       	add	r24, r20
 688:	95 1f       	adc	r25, r21
		temp = Buffer[numlen - counter-1];
		Buffer[numlen - counter - 1] = Buffer[counter] - '0';
		Buffer[counter] = temp - '0';
		
	}
	for(counter = 0; counter<numlen; counter++){
 68a:	ae 17       	cp	r26, r30
 68c:	bf 07       	cpc	r27, r31
 68e:	41 f7       	brne	.-48     	; 0x660 <UART_voidReceiveNumberSynch+0xae>
 690:	02 c0       	rjmp	.+4      	; 0x696 <UART_voidReceiveNumberSynch+0xe4>
 692:	20 e0       	ldi	r18, 0x00	; 0
 694:	30 e0       	ldi	r19, 0x00	; 0
		number = number + Buffer[counter]*decimal;
		decimal *= 10;
		//UART_voidSendNumberSynch(number);	
	}
	
	*Copy_pu32Number = number;
 696:	f3 01       	movw	r30, r6
 698:	31 83       	std	Z+1, r19	; 0x01
 69a:	20 83       	st	Z, r18
	
}
 69c:	04 c0       	rjmp	.+8      	; 0x6a6 <UART_voidReceiveNumberSynch+0xf4>
		UART_u8ReceiveDataSynch(&(Buffer[numlen]));
		UART_voidSendDataSynch(Buffer[numlen]);
		
	}while(Buffer[numlen] != '+' && numlen< 10);		//the last element storing Enter char.
	
	for( ;counter<=numlen/2;counter++){	//swap the buffer element	as it is stored inversely
 69e:	35 2d       	mov	r19, r5
 6a0:	36 95       	lsr	r19
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	bb cf       	rjmp	.-138    	; 0x61c <UART_voidReceiveNumberSynch+0x6a>
		//UART_voidSendNumberSynch(number);	
	}
	
	*Copy_pu32Number = number;
	
}
 6a6:	2a 96       	adiw	r28, 0x0a	; 10
 6a8:	0f b6       	in	r0, 0x3f	; 63
 6aa:	f8 94       	cli
 6ac:	de bf       	out	0x3e, r29	; 62
 6ae:	0f be       	out	0x3f, r0	; 63
 6b0:	cd bf       	out	0x3d, r28	; 61
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	1f 91       	pop	r17
 6b8:	0f 91       	pop	r16
 6ba:	ff 90       	pop	r15
 6bc:	ef 90       	pop	r14
 6be:	df 90       	pop	r13
 6c0:	cf 90       	pop	r12
 6c2:	bf 90       	pop	r11
 6c4:	af 90       	pop	r10
 6c6:	9f 90       	pop	r9
 6c8:	8f 90       	pop	r8
 6ca:	7f 90       	pop	r7
 6cc:	6f 90       	pop	r6
 6ce:	5f 90       	pop	r5
 6d0:	08 95       	ret

000006d2 <EEPROM_voidWriteName>:


void Unlock(){
	DIO_voidSetPinValue(DIO_PORTC, DIO_PIN2, DIO_HIGH);
	_delay_ms(3000);
	DIO_voidSetPinValue(DIO_PORTC, DIO_PIN2, DIO_LOW);
 6d2:	ef 92       	push	r14
 6d4:	ff 92       	push	r15
 6d6:	0f 93       	push	r16
 6d8:	1f 93       	push	r17
 6da:	cf 93       	push	r28
 6dc:	df 93       	push	r29
 6de:	7c 01       	movw	r14, r24
 6e0:	d6 2f       	mov	r29, r22
 6e2:	fc 01       	movw	r30, r24
 6e4:	60 81       	ld	r22, Z
 6e6:	66 23       	and	r22, r22
 6e8:	c9 f0       	breq	.+50     	; 0x71c <EEPROM_voidWriteName+0x4a>
 6ea:	f2 e3       	ldi	r31, 0x32	; 50
 6ec:	df 9f       	mul	r29, r31
 6ee:	80 01       	movw	r16, r0
 6f0:	11 24       	eor	r1, r1
 6f2:	0b 5f       	subi	r16, 0xFB	; 251
 6f4:	1f 4f       	sbci	r17, 0xFF	; 255
 6f6:	c0 e0       	ldi	r28, 0x00	; 0
 6f8:	c8 01       	movw	r24, r16
 6fa:	8c 0f       	add	r24, r28
 6fc:	91 1d       	adc	r25, r1
 6fe:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_voidSendDataByte>
 702:	cf 5f       	subi	r28, 0xFF	; 255
 704:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <__data_end>
 708:	8f 5f       	subi	r24, 0xFF	; 255
 70a:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <__data_end>
 70e:	f7 01       	movw	r30, r14
 710:	ec 0f       	add	r30, r28
 712:	f1 1d       	adc	r31, r1
 714:	60 81       	ld	r22, Z
 716:	61 11       	cpse	r22, r1
 718:	ef cf       	rjmp	.-34     	; 0x6f8 <EEPROM_voidWriteName+0x26>
 71a:	01 c0       	rjmp	.+2      	; 0x71e <EEPROM_voidWriteName+0x4c>
 71c:	c0 e0       	ldi	r28, 0x00	; 0
 71e:	22 e3       	ldi	r18, 0x32	; 50
 720:	d2 9f       	mul	r29, r18
 722:	c0 01       	movw	r24, r0
 724:	11 24       	eor	r1, r1
 726:	05 96       	adiw	r24, 0x05	; 5
 728:	60 e0       	ldi	r22, 0x00	; 0
 72a:	8c 0f       	add	r24, r28
 72c:	91 1d       	adc	r25, r1
 72e:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_voidSendDataByte>
 732:	df 91       	pop	r29
 734:	cf 91       	pop	r28
 736:	1f 91       	pop	r17
 738:	0f 91       	pop	r16
 73a:	ff 90       	pop	r15
 73c:	ef 90       	pop	r14
 73e:	08 95       	ret

00000740 <EEPROM_voidWriteId>:
 740:	68 2f       	mov	r22, r24
 742:	22 e3       	ldi	r18, 0x32	; 50
 744:	82 9f       	mul	r24, r18
 746:	c0 01       	movw	r24, r0
 748:	11 24       	eor	r1, r1
 74a:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_voidSendDataByte>
 74e:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <__data_end>
 752:	8f 5f       	subi	r24, 0xFF	; 255
 754:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <__data_end>
 758:	08 95       	ret

0000075a <EEPROM_voidWritePassword>:
 75a:	ef 92       	push	r14
 75c:	ff 92       	push	r15
 75e:	0f 93       	push	r16
 760:	1f 93       	push	r17
 762:	cf 93       	push	r28
 764:	df 93       	push	r29
 766:	7c 01       	movw	r14, r24
 768:	82 e3       	ldi	r24, 0x32	; 50
 76a:	68 9f       	mul	r22, r24
 76c:	80 01       	movw	r16, r0
 76e:	11 24       	eor	r1, r1
 770:	0f 5f       	subi	r16, 0xFF	; 255
 772:	1f 4f       	sbci	r17, 0xFF	; 255
 774:	c0 e0       	ldi	r28, 0x00	; 0
 776:	d0 e0       	ldi	r29, 0x00	; 0
 778:	b7 01       	movw	r22, r14
 77a:	0c 2e       	mov	r0, r28
 77c:	02 c0       	rjmp	.+4      	; 0x782 <EEPROM_voidWritePassword+0x28>
 77e:	76 95       	lsr	r23
 780:	67 95       	ror	r22
 782:	0a 94       	dec	r0
 784:	e2 f7       	brpl	.-8      	; 0x77e <EEPROM_voidWritePassword+0x24>
 786:	c8 01       	movw	r24, r16
 788:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_voidSendDataByte>
 78c:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <__data_end>
 790:	8f 5f       	subi	r24, 0xFF	; 255
 792:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <__data_end>
 796:	28 96       	adiw	r28, 0x08	; 8
 798:	0f 5f       	subi	r16, 0xFF	; 255
 79a:	1f 4f       	sbci	r17, 0xFF	; 255
 79c:	c0 32       	cpi	r28, 0x20	; 32
 79e:	d1 05       	cpc	r29, r1
 7a0:	59 f7       	brne	.-42     	; 0x778 <EEPROM_voidWritePassword+0x1e>
 7a2:	df 91       	pop	r29
 7a4:	cf 91       	pop	r28
 7a6:	1f 91       	pop	r17
 7a8:	0f 91       	pop	r16
 7aa:	ff 90       	pop	r15
 7ac:	ef 90       	pop	r14
 7ae:	08 95       	ret

000007b0 <new>:
 7b0:	cf 93       	push	r28
 7b2:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <counter>
 7b6:	8a 30       	cpi	r24, 0x0A	; 10
 7b8:	08 f0       	brcs	.+2      	; 0x7bc <new+0xc>
 7ba:	76 c0       	rjmp	.+236    	; 0x8a8 <__stack+0x49>
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	fc 01       	movw	r30, r24
 7c0:	ee 0f       	add	r30, r30
 7c2:	ff 1f       	adc	r31, r31
 7c4:	eb 52       	subi	r30, 0x2B	; 43
 7c6:	fc 4f       	sbci	r31, 0xFC	; 252
 7c8:	c6 e1       	ldi	r28, 0x16	; 22
 7ca:	c8 9f       	mul	r28, r24
 7cc:	90 01       	movw	r18, r0
 7ce:	c9 9f       	mul	r28, r25
 7d0:	30 0d       	add	r19, r0
 7d2:	11 24       	eor	r1, r1
 7d4:	c9 01       	movw	r24, r18
 7d6:	8b 51       	subi	r24, 0x1B	; 27
 7d8:	9d 4f       	sbci	r25, 0xFD	; 253
 7da:	91 83       	std	Z+1, r25	; 0x01
 7dc:	80 83       	st	Z, r24
 7de:	8b ee       	ldi	r24, 0xEB	; 235
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 7e6:	e0 91 e4 02 	lds	r30, 0x02E4	; 0x8002e4 <counter>
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	ee 0f       	add	r30, r30
 7ee:	ff 1f       	adc	r31, r31
 7f0:	eb 52       	subi	r30, 0x2B	; 43
 7f2:	fc 4f       	sbci	r31, 0xFC	; 252
 7f4:	64 e1       	ldi	r22, 0x14	; 20
 7f6:	80 81       	ld	r24, Z
 7f8:	91 81       	ldd	r25, Z+1	; 0x01
 7fa:	0e 94 b0 02 	call	0x560	; 0x560 <UART_voidReceiveStringSynch>
 7fe:	80 e2       	ldi	r24, 0x20	; 32
 800:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
 804:	82 e0       	ldi	r24, 0x02	; 2
 806:	91 e0       	ldi	r25, 0x01	; 1
 808:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 80c:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <counter>
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	88 0f       	add	r24, r24
 814:	99 1f       	adc	r25, r25
 816:	8f 53       	subi	r24, 0x3F	; 63
 818:	9c 4f       	sbci	r25, 0xFC	; 252
 81a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <UART_voidReceiveNumberSynch>
 81e:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <counter>
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	c8 9f       	mul	r28, r24
 826:	d0 01       	movw	r26, r0
 828:	c9 9f       	mul	r28, r25
 82a:	b0 0d       	add	r27, r0
 82c:	11 24       	eor	r1, r1
 82e:	ab 51       	subi	r26, 0x1B	; 27
 830:	bd 4f       	sbci	r27, 0xFD	; 253
 832:	88 0f       	add	r24, r24
 834:	99 1f       	adc	r25, r25
 836:	fc 01       	movw	r30, r24
 838:	ef 53       	subi	r30, 0x3F	; 63
 83a:	fc 4f       	sbci	r31, 0xFC	; 252
 83c:	80 81       	ld	r24, Z
 83e:	91 81       	ldd	r25, Z+1	; 0x01
 840:	55 96       	adiw	r26, 0x15	; 21
 842:	9c 93       	st	X, r25
 844:	8e 93       	st	-X, r24
 846:	54 97       	sbiw	r26, 0x14	; 20
 848:	80 e2       	ldi	r24, 0x20	; 32
 84a:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
 84e:	88 e1       	ldi	r24, 0x18	; 24
 850:	91 e0       	ldi	r25, 0x01	; 1
 852:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 856:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <counter>
 85a:	80 5d       	subi	r24, 0xD0	; 208
 85c:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
 860:	80 e2       	ldi	r24, 0x20	; 32
 862:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
 866:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <counter>
 86a:	0e 94 a0 03 	call	0x740	; 0x740 <EEPROM_voidWriteId>
 86e:	60 91 e4 02 	lds	r22, 0x02E4	; 0x8002e4 <counter>
 872:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <Buffer>
 876:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <Buffer+0x1>
 87a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <EEPROM_voidWriteName>
 87e:	60 91 e4 02 	lds	r22, 0x02E4	; 0x8002e4 <counter>
 882:	e6 2f       	mov	r30, r22
 884:	f0 e0       	ldi	r31, 0x00	; 0
 886:	ee 0f       	add	r30, r30
 888:	ff 1f       	adc	r31, r31
 88a:	ef 53       	subi	r30, 0x3F	; 63
 88c:	fc 4f       	sbci	r31, 0xFC	; 252
 88e:	80 81       	ld	r24, Z
 890:	91 81       	ldd	r25, Z+1	; 0x01
 892:	0e 94 ad 03 	call	0x75a	; 0x75a <EEPROM_voidWritePassword>
 896:	60 91 e4 02 	lds	r22, 0x02E4	; 0x8002e4 <counter>
 89a:	6f 5f       	subi	r22, 0xFF	; 255
 89c:	60 93 e4 02 	sts	0x02E4, r22	; 0x8002e4 <counter>
 8a0:	8f ef       	ldi	r24, 0xFF	; 255
 8a2:	93 e0       	ldi	r25, 0x03	; 3
 8a4:	0e 94 4c 00 	call	0x98	; 0x98 <EEPROM_voidSendDataByte>
 8a8:	cf 91       	pop	r28
 8aa:	08 95       	ret

000008ac <EEPROM_u8SearchForPassword>:
 8ac:	ff 92       	push	r15
 8ae:	0f 93       	push	r16
 8b0:	1f 93       	push	r17
 8b2:	cf 93       	push	r28
 8b4:	df 93       	push	r29
 8b6:	22 e3       	ldi	r18, 0x32	; 50
 8b8:	82 9f       	mul	r24, r18
 8ba:	c0 01       	movw	r24, r0
 8bc:	11 24       	eor	r1, r1
 8be:	01 96       	adiw	r24, 0x01	; 1
 8c0:	c8 2f       	mov	r28, r24
 8c2:	68 94       	set
 8c4:	ff 24       	eor	r15, r15
 8c6:	f2 f8       	bld	r15, 2
 8c8:	f8 0e       	add	r15, r24
 8ca:	f8 16       	cp	r15, r24
 8cc:	c0 f0       	brcs	.+48     	; 0x8fe <EEPROM_u8SearchForPassword+0x52>
 8ce:	d0 e0       	ldi	r29, 0x00	; 0
 8d0:	00 e0       	ldi	r16, 0x00	; 0
 8d2:	10 e0       	ldi	r17, 0x00	; 0
 8d4:	8c 2f       	mov	r24, r28
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 69 00 	call	0xd2	; 0xd2 <EEPROM_u8ReadDataByte>
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	2d 2f       	mov	r18, r29
 8e0:	22 0f       	add	r18, r18
 8e2:	22 0f       	add	r18, r18
 8e4:	22 0f       	add	r18, r18
 8e6:	02 c0       	rjmp	.+4      	; 0x8ec <EEPROM_u8SearchForPassword+0x40>
 8e8:	88 0f       	add	r24, r24
 8ea:	99 1f       	adc	r25, r25
 8ec:	2a 95       	dec	r18
 8ee:	e2 f7       	brpl	.-8      	; 0x8e8 <EEPROM_u8SearchForPassword+0x3c>
 8f0:	08 0f       	add	r16, r24
 8f2:	19 1f       	adc	r17, r25
 8f4:	df 5f       	subi	r29, 0xFF	; 255
 8f6:	cf 5f       	subi	r28, 0xFF	; 255
 8f8:	fc 16       	cp	r15, r28
 8fa:	60 f7       	brcc	.-40     	; 0x8d4 <EEPROM_u8SearchForPassword+0x28>
 8fc:	02 c0       	rjmp	.+4      	; 0x902 <EEPROM_u8SearchForPassword+0x56>
 8fe:	00 e0       	ldi	r16, 0x00	; 0
 900:	10 e0       	ldi	r17, 0x00	; 0
 902:	c8 01       	movw	r24, r16
 904:	df 91       	pop	r29
 906:	cf 91       	pop	r28
 908:	1f 91       	pop	r17
 90a:	0f 91       	pop	r16
 90c:	ff 90       	pop	r15
 90e:	08 95       	ret

00000910 <EEPROM_u8SearchForName>:
 910:	0f 93       	push	r16
 912:	1f 93       	push	r17
 914:	cf 93       	push	r28
 916:	df 93       	push	r29
 918:	8c 01       	movw	r16, r24
 91a:	c2 e3       	ldi	r28, 0x32	; 50
 91c:	6c 9f       	mul	r22, r28
 91e:	c0 2d       	mov	r28, r0
 920:	11 24       	eor	r1, r1
 922:	cb 5f       	subi	r28, 0xFB	; 251
 924:	8c 2f       	mov	r24, r28
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	0e 94 69 00 	call	0xd2	; 0xd2 <EEPROM_u8ReadDataByte>
 92c:	88 23       	and	r24, r24
 92e:	79 f0       	breq	.+30     	; 0x94e <EEPROM_u8SearchForName+0x3e>
 930:	d0 e0       	ldi	r29, 0x00	; 0
 932:	f8 01       	movw	r30, r16
 934:	ed 0f       	add	r30, r29
 936:	f1 1d       	adc	r31, r1
 938:	80 83       	st	Z, r24
 93a:	8c 2f       	mov	r24, r28
 93c:	90 e0       	ldi	r25, 0x00	; 0
 93e:	01 96       	adiw	r24, 0x01	; 1
 940:	0e 94 69 00 	call	0xd2	; 0xd2 <EEPROM_u8ReadDataByte>
 944:	df 5f       	subi	r29, 0xFF	; 255
 946:	cf 5f       	subi	r28, 0xFF	; 255
 948:	81 11       	cpse	r24, r1
 94a:	f3 cf       	rjmp	.-26     	; 0x932 <EEPROM_u8SearchForName+0x22>
 94c:	01 c0       	rjmp	.+2      	; 0x950 <EEPROM_u8SearchForName+0x40>
 94e:	d0 e0       	ldi	r29, 0x00	; 0
 950:	f8 01       	movw	r30, r16
 952:	ed 0f       	add	r30, r29
 954:	f1 1d       	adc	r31, r1
 956:	10 82       	st	Z, r1
 958:	8d 2f       	mov	r24, r29
 95a:	df 91       	pop	r29
 95c:	cf 91       	pop	r28
 95e:	1f 91       	pop	r17
 960:	0f 91       	pop	r16
 962:	08 95       	ret

00000964 <SignIn>:
 964:	0f 93       	push	r16
 966:	1f 93       	push	r17
 968:	cf 93       	push	r28
 96a:	df 93       	push	r29
 96c:	00 d0       	rcall	.+0      	; 0x96e <SignIn+0xa>
 96e:	1f 92       	push	r1
 970:	cd b7       	in	r28, 0x3d	; 61
 972:	de b7       	in	r29, 0x3e	; 62
 974:	84 e2       	ldi	r24, 0x24	; 36
 976:	91 e0       	ldi	r25, 0x01	; 1
 978:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 97c:	ce 01       	movw	r24, r28
 97e:	01 96       	adiw	r24, 0x01	; 1
 980:	0e 94 53 02 	call	0x4a6	; 0x4a6 <UART_u8ReceiveDataSynch>
 984:	89 81       	ldd	r24, Y+1	; 0x01
 986:	80 53       	subi	r24, 0x30	; 48
 988:	89 83       	std	Y+1, r24	; 0x01
 98a:	13 e0       	ldi	r17, 0x03	; 3
 98c:	06 e1       	ldi	r16, 0x16	; 22
 98e:	82 e0       	ldi	r24, 0x02	; 2
 990:	91 e0       	ldi	r25, 0x01	; 1
 992:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 996:	ce 01       	movw	r24, r28
 998:	02 96       	adiw	r24, 0x02	; 2
 99a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <UART_voidReceiveNumberSynch>
 99e:	89 81       	ldd	r24, Y+1	; 0x01
 9a0:	0e 94 56 04 	call	0x8ac	; 0x8ac <EEPROM_u8SearchForPassword>
 9a4:	e9 81       	ldd	r30, Y+1	; 0x01
 9a6:	0e 9f       	mul	r16, r30
 9a8:	f0 01       	movw	r30, r0
 9aa:	11 24       	eor	r1, r1
 9ac:	eb 51       	subi	r30, 0x1B	; 27
 9ae:	fd 4f       	sbci	r31, 0xFD	; 253
 9b0:	24 89       	ldd	r18, Z+20	; 0x14
 9b2:	35 89       	ldd	r19, Z+21	; 0x15
 9b4:	8a 81       	ldd	r24, Y+2	; 0x02
 9b6:	9b 81       	ldd	r25, Y+3	; 0x03
 9b8:	28 17       	cp	r18, r24
 9ba:	39 07       	cpc	r19, r25
 9bc:	41 f4       	brne	.+16     	; 0x9ce <SignIn+0x6a>
 9be:	89 e3       	ldi	r24, 0x39	; 57
 9c0:	91 e0       	ldi	r25, 0x01	; 1
 9c2:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 9c6:	81 e0       	ldi	r24, 0x01	; 1
 9c8:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <lock>
 9cc:	26 c0       	rjmp	.+76     	; 0xa1a <SignIn+0xb6>
 9ce:	84 e5       	ldi	r24, 0x54	; 84
 9d0:	91 e0       	ldi	r25, 0x01	; 1
 9d2:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 9d6:	41 e0       	ldi	r20, 0x01	; 1
 9d8:	61 e0       	ldi	r22, 0x01	; 1
 9da:	82 e0       	ldi	r24, 0x02	; 2
 9dc:	0e 94 44 01 	call	0x288	; 0x288 <DIO_voidSetPinValue>
 9e0:	2f ef       	ldi	r18, 0xFF	; 255
 9e2:	83 ed       	ldi	r24, 0xD3	; 211
 9e4:	90 e3       	ldi	r25, 0x30	; 48
 9e6:	21 50       	subi	r18, 0x01	; 1
 9e8:	80 40       	sbci	r24, 0x00	; 0
 9ea:	90 40       	sbci	r25, 0x00	; 0
 9ec:	e1 f7       	brne	.-8      	; 0x9e6 <SignIn+0x82>
 9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <SignIn+0x8c>
 9f0:	00 00       	nop
 9f2:	40 e0       	ldi	r20, 0x00	; 0
 9f4:	61 e0       	ldi	r22, 0x01	; 1
 9f6:	82 e0       	ldi	r24, 0x02	; 2
 9f8:	0e 94 44 01 	call	0x288	; 0x288 <DIO_voidSetPinValue>
 9fc:	11 50       	subi	r17, 0x01	; 1
 9fe:	39 f6       	brne	.-114    	; 0x98e <SignIn+0x2a>
 a00:	08 c0       	rjmp	.+16     	; 0xa12 <SignIn+0xae>
 a02:	82 e6       	ldi	r24, 0x62	; 98
 a04:	91 e0       	ldi	r25, 0x01	; 1
 a06:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 a0a:	82 e0       	ldi	r24, 0x02	; 2
 a0c:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <lock>
 a10:	04 c0       	rjmp	.+8      	; 0xa1a <SignIn+0xb6>
 a12:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <lock>
 a16:	88 23       	and	r24, r24
 a18:	a1 f3       	breq	.-24     	; 0xa02 <SignIn+0x9e>
 a1a:	0f 90       	pop	r0
 a1c:	0f 90       	pop	r0
 a1e:	0f 90       	pop	r0
 a20:	df 91       	pop	r29
 a22:	cf 91       	pop	r28
 a24:	1f 91       	pop	r17
 a26:	0f 91       	pop	r16
 a28:	08 95       	ret

00000a2a <Edit>:
 a2a:	1f 93       	push	r17
 a2c:	cf 93       	push	r28
 a2e:	df 93       	push	r29
 a30:	00 d0       	rcall	.+0      	; 0xa32 <Edit+0x8>
 a32:	00 d0       	rcall	.+0      	; 0xa34 <Edit+0xa>
 a34:	cd b7       	in	r28, 0x3d	; 61
 a36:	de b7       	in	r29, 0x3e	; 62
 a38:	84 e8       	ldi	r24, 0x84	; 132
 a3a:	91 e0       	ldi	r25, 0x01	; 1
 a3c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 a40:	ce 01       	movw	r24, r28
 a42:	01 96       	adiw	r24, 0x01	; 1
 a44:	0e 94 53 02 	call	0x4a6	; 0x4a6 <UART_u8ReceiveDataSynch>
 a48:	89 81       	ldd	r24, Y+1	; 0x01
 a4a:	80 53       	subi	r24, 0x30	; 48
 a4c:	89 83       	std	Y+1, r24	; 0x01
 a4e:	80 e2       	ldi	r24, 0x20	; 32
 a50:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
 a54:	99 81       	ldd	r25, Y+1	; 0x01
 a56:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <counter>
 a5a:	98 17       	cp	r25, r24
 a5c:	08 f0       	brcs	.+2      	; 0xa60 <Edit+0x36>
 a5e:	89 c0       	rjmp	.+274    	; 0xb72 <Edit+0x148>
 a60:	83 e9       	ldi	r24, 0x93	; 147
 a62:	91 e0       	ldi	r25, 0x01	; 1
 a64:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 a68:	ce 01       	movw	r24, r28
 a6a:	03 96       	adiw	r24, 0x03	; 3
 a6c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <UART_voidReceiveNumberSynch>
 a70:	80 e2       	ldi	r24, 0x20	; 32
 a72:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
 a76:	19 81       	ldd	r17, Y+1	; 0x01
 a78:	81 2f       	mov	r24, r17
 a7a:	0e 94 56 04 	call	0x8ac	; 0x8ac <EEPROM_u8SearchForPassword>
 a7e:	26 e1       	ldi	r18, 0x16	; 22
 a80:	21 9f       	mul	r18, r17
 a82:	f0 01       	movw	r30, r0
 a84:	11 24       	eor	r1, r1
 a86:	eb 51       	subi	r30, 0x1B	; 27
 a88:	fd 4f       	sbci	r31, 0xFD	; 253
 a8a:	95 8b       	std	Z+21, r25	; 0x15
 a8c:	84 8b       	std	Z+20, r24	; 0x14
 a8e:	e9 81       	ldd	r30, Y+1	; 0x01
 a90:	2e 9f       	mul	r18, r30
 a92:	f0 01       	movw	r30, r0
 a94:	11 24       	eor	r1, r1
 a96:	eb 51       	subi	r30, 0x1B	; 27
 a98:	fd 4f       	sbci	r31, 0xFD	; 253
 a9a:	24 89       	ldd	r18, Z+20	; 0x14
 a9c:	35 89       	ldd	r19, Z+21	; 0x15
 a9e:	8b 81       	ldd	r24, Y+3	; 0x03
 aa0:	9c 81       	ldd	r25, Y+4	; 0x04
 aa2:	28 17       	cp	r18, r24
 aa4:	39 07       	cpc	r19, r25
 aa6:	09 f0       	breq	.+2      	; 0xaaa <Edit+0x80>
 aa8:	5f c0       	rjmp	.+190    	; 0xb68 <Edit+0x13e>
 aaa:	16 e1       	ldi	r17, 0x16	; 22
 aac:	88 ea       	ldi	r24, 0xA8	; 168
 aae:	91 e0       	ldi	r25, 0x01	; 1
 ab0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 ab4:	89 ed       	ldi	r24, 0xD9	; 217
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 abc:	ce 01       	movw	r24, r28
 abe:	02 96       	adiw	r24, 0x02	; 2
 ac0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <UART_u8ReceiveDataSynch>
 ac4:	80 e2       	ldi	r24, 0x20	; 32
 ac6:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
 aca:	8a 81       	ldd	r24, Y+2	; 0x02
 acc:	82 33       	cpi	r24, 0x32	; 50
 ace:	a1 f1       	breq	.+104    	; 0xb38 <Edit+0x10e>
 ad0:	83 33       	cpi	r24, 0x33	; 51
 ad2:	09 f4       	brne	.+2      	; 0xad6 <Edit+0xac>
 ad4:	52 c0       	rjmp	.+164    	; 0xb7a <Edit+0x150>
 ad6:	81 33       	cpi	r24, 0x31	; 49
 ad8:	49 f7       	brne	.-46     	; 0xaac <Edit+0x82>
 ada:	89 81       	ldd	r24, Y+1	; 0x01
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	fc 01       	movw	r30, r24
 ae0:	ee 0f       	add	r30, r30
 ae2:	ff 1f       	adc	r31, r31
 ae4:	eb 52       	subi	r30, 0x2B	; 43
 ae6:	fc 4f       	sbci	r31, 0xFC	; 252
 ae8:	18 9f       	mul	r17, r24
 aea:	90 01       	movw	r18, r0
 aec:	19 9f       	mul	r17, r25
 aee:	30 0d       	add	r19, r0
 af0:	11 24       	eor	r1, r1
 af2:	c9 01       	movw	r24, r18
 af4:	8b 51       	subi	r24, 0x1B	; 27
 af6:	9d 4f       	sbci	r25, 0xFD	; 253
 af8:	91 83       	std	Z+1, r25	; 0x01
 afa:	80 83       	st	Z, r24
 afc:	8b ee       	ldi	r24, 0xEB	; 235
 afe:	91 e0       	ldi	r25, 0x01	; 1
 b00:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 b04:	e9 81       	ldd	r30, Y+1	; 0x01
 b06:	f0 e0       	ldi	r31, 0x00	; 0
 b08:	ee 0f       	add	r30, r30
 b0a:	ff 1f       	adc	r31, r31
 b0c:	eb 52       	subi	r30, 0x2B	; 43
 b0e:	fc 4f       	sbci	r31, 0xFC	; 252
 b10:	64 e1       	ldi	r22, 0x14	; 20
 b12:	80 81       	ld	r24, Z
 b14:	91 81       	ldd	r25, Z+1	; 0x01
 b16:	0e 94 b0 02 	call	0x560	; 0x560 <UART_voidReceiveStringSynch>
 b1a:	69 81       	ldd	r22, Y+1	; 0x01
 b1c:	e6 2f       	mov	r30, r22
 b1e:	f0 e0       	ldi	r31, 0x00	; 0
 b20:	ee 0f       	add	r30, r30
 b22:	ff 1f       	adc	r31, r31
 b24:	eb 52       	subi	r30, 0x2B	; 43
 b26:	fc 4f       	sbci	r31, 0xFC	; 252
 b28:	80 81       	ld	r24, Z
 b2a:	91 81       	ldd	r25, Z+1	; 0x01
 b2c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <EEPROM_voidWriteName>
 b30:	80 e2       	ldi	r24, 0x20	; 32
 b32:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
 b36:	ba cf       	rjmp	.-140    	; 0xaac <Edit+0x82>
 b38:	86 e0       	ldi	r24, 0x06	; 6
 b3a:	92 e0       	ldi	r25, 0x02	; 2
 b3c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 b40:	ce 01       	movw	r24, r28
 b42:	03 96       	adiw	r24, 0x03	; 3
 b44:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <UART_voidReceiveNumberSynch>
 b48:	69 81       	ldd	r22, Y+1	; 0x01
 b4a:	8b 81       	ldd	r24, Y+3	; 0x03
 b4c:	9c 81       	ldd	r25, Y+4	; 0x04
 b4e:	16 9f       	mul	r17, r22
 b50:	f0 01       	movw	r30, r0
 b52:	11 24       	eor	r1, r1
 b54:	eb 51       	subi	r30, 0x1B	; 27
 b56:	fd 4f       	sbci	r31, 0xFD	; 253
 b58:	95 8b       	std	Z+21, r25	; 0x15
 b5a:	84 8b       	std	Z+20, r24	; 0x14
 b5c:	0e 94 ad 03 	call	0x75a	; 0x75a <EEPROM_voidWritePassword>
 b60:	80 e2       	ldi	r24, 0x20	; 32
 b62:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
 b66:	a2 cf       	rjmp	.-188    	; 0xaac <Edit+0x82>
 b68:	80 e2       	ldi	r24, 0x20	; 32
 b6a:	92 e0       	ldi	r25, 0x02	; 2
 b6c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 b70:	04 c0       	rjmp	.+8      	; 0xb7a <Edit+0x150>
 b72:	80 e3       	ldi	r24, 0x30	; 48
 b74:	92 e0       	ldi	r25, 0x02	; 2
 b76:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 b7a:	0f 90       	pop	r0
 b7c:	0f 90       	pop	r0
 b7e:	0f 90       	pop	r0
 b80:	0f 90       	pop	r0
 b82:	df 91       	pop	r29
 b84:	cf 91       	pop	r28
 b86:	1f 91       	pop	r17
 b88:	08 95       	ret

00000b8a <Show>:
 b8a:	0f 93       	push	r16
 b8c:	1f 93       	push	r17
 b8e:	cf 93       	push	r28
 b90:	df 93       	push	r29
 b92:	1f 92       	push	r1
 b94:	cd b7       	in	r28, 0x3d	; 61
 b96:	de b7       	in	r29, 0x3e	; 62
 b98:	84 e8       	ldi	r24, 0x84	; 132
 b9a:	91 e0       	ldi	r25, 0x01	; 1
 b9c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 ba0:	ce 01       	movw	r24, r28
 ba2:	01 96       	adiw	r24, 0x01	; 1
 ba4:	0e 94 53 02 	call	0x4a6	; 0x4a6 <UART_u8ReceiveDataSynch>
 ba8:	89 81       	ldd	r24, Y+1	; 0x01
 baa:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
 bae:	89 81       	ldd	r24, Y+1	; 0x01
 bb0:	80 53       	subi	r24, 0x30	; 48
 bb2:	89 83       	std	Y+1, r24	; 0x01
 bb4:	80 e2       	ldi	r24, 0x20	; 32
 bb6:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
 bba:	99 81       	ldd	r25, Y+1	; 0x01
 bbc:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <counter>
 bc0:	98 17       	cp	r25, r24
 bc2:	a8 f5       	brcc	.+106    	; 0xc2e <Show+0xa4>
 bc4:	88 e4       	ldi	r24, 0x48	; 72
 bc6:	92 e0       	ldi	r25, 0x02	; 2
 bc8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 bcc:	69 81       	ldd	r22, Y+1	; 0x01
 bce:	16 e1       	ldi	r17, 0x16	; 22
 bd0:	16 9f       	mul	r17, r22
 bd2:	c0 01       	movw	r24, r0
 bd4:	11 24       	eor	r1, r1
 bd6:	8b 51       	subi	r24, 0x1B	; 27
 bd8:	9d 4f       	sbci	r25, 0xFD	; 253
 bda:	0e 94 88 04 	call	0x910	; 0x910 <EEPROM_u8SearchForName>
 bde:	89 81       	ldd	r24, Y+1	; 0x01
 be0:	18 9f       	mul	r17, r24
 be2:	c0 01       	movw	r24, r0
 be4:	11 24       	eor	r1, r1
 be6:	8b 51       	subi	r24, 0x1B	; 27
 be8:	9d 4f       	sbci	r25, 0xFD	; 253
 bea:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 bee:	80 e2       	ldi	r24, 0x20	; 32
 bf0:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
 bf4:	88 e0       	ldi	r24, 0x08	; 8
 bf6:	91 e0       	ldi	r25, 0x01	; 1
 bf8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 bfc:	09 81       	ldd	r16, Y+1	; 0x01
 bfe:	80 2f       	mov	r24, r16
 c00:	0e 94 56 04 	call	0x8ac	; 0x8ac <EEPROM_u8SearchForPassword>
 c04:	10 9f       	mul	r17, r16
 c06:	f0 01       	movw	r30, r0
 c08:	11 24       	eor	r1, r1
 c0a:	eb 51       	subi	r30, 0x1B	; 27
 c0c:	fd 4f       	sbci	r31, 0xFD	; 253
 c0e:	95 8b       	std	Z+21, r25	; 0x15
 c10:	84 8b       	std	Z+20, r24	; 0x14
 c12:	e9 81       	ldd	r30, Y+1	; 0x01
 c14:	1e 9f       	mul	r17, r30
 c16:	f0 01       	movw	r30, r0
 c18:	11 24       	eor	r1, r1
 c1a:	eb 51       	subi	r30, 0x1B	; 27
 c1c:	fd 4f       	sbci	r31, 0xFD	; 253
 c1e:	84 89       	ldd	r24, Z+20	; 0x14
 c20:	95 89       	ldd	r25, Z+21	; 0x15
 c22:	0e 94 70 02 	call	0x4e0	; 0x4e0 <UART_voidSendNumberSynch>
 c26:	80 e2       	ldi	r24, 0x20	; 32
 c28:	0e 94 4c 02 	call	0x498	; 0x498 <UART_voidSendDataSynch>
 c2c:	04 c0       	rjmp	.+8      	; 0xc36 <Show+0xac>
 c2e:	89 e5       	ldi	r24, 0x59	; 89
 c30:	92 e0       	ldi	r25, 0x02	; 2
 c32:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
 c36:	0f 90       	pop	r0
 c38:	df 91       	pop	r29
 c3a:	cf 91       	pop	r28
 c3c:	1f 91       	pop	r17
 c3e:	0f 91       	pop	r16
 c40:	08 95       	ret

00000c42 <Light>:





void Light(){
 c42:	cf 93       	push	r28
 c44:	df 93       	push	r29
 c46:	1f 92       	push	r1
 c48:	cd b7       	in	r28, 0x3d	; 61
 c4a:	de b7       	in	r29, 0x3e	; 62
	u8 choose;
	DIO_voidSetPortDirection(DIO_PORTA, DIO_OUTPUT);
 c4c:	61 e0       	ldi	r22, 0x01	; 1
 c4e:	80 e0       	ldi	r24, 0x00	; 0
 c50:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DIO_voidSetPortDirection>
	
	UART_voidSendStringSynch("Welcome to our system! ");
 c54:	80 e7       	ldi	r24, 0x70	; 112
 c56:	92 e0       	ldi	r25, 0x02	; 2
 c58:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
	while(1)
	{
		UART_voidSendStringSynch("1. Toggle Red Light.		2. Toggle Blue Light.		3. Toggle the Fan.		4. Exit. ");
 c5c:	88 e8       	ldi	r24, 0x88	; 136
 c5e:	92 e0       	ldi	r25, 0x02	; 2
 c60:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
		UART_voidSendStringSynch("Your Choice: ");
 c64:	83 ed       	ldi	r24, 0xD3	; 211
 c66:	92 e0       	ldi	r25, 0x02	; 2
 c68:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <UART_voidSendStringSynch>
		UART_u8ReceiveDataSynch(&choose);
 c6c:	ce 01       	movw	r24, r28
 c6e:	01 96       	adiw	r24, 0x01	; 1
 c70:	0e 94 53 02 	call	0x4a6	; 0x4a6 <UART_u8ReceiveDataSynch>

		switch(choose){
 c74:	89 81       	ldd	r24, Y+1	; 0x01
 c76:	82 33       	cpi	r24, 0x32	; 50
 c78:	79 f0       	breq	.+30     	; 0xc98 <Light+0x56>
 c7a:	18 f4       	brcc	.+6      	; 0xc82 <Light+0x40>
 c7c:	81 33       	cpi	r24, 0x31	; 49
 c7e:	31 f0       	breq	.+12     	; 0xc8c <Light+0x4a>
 c80:	ed cf       	rjmp	.-38     	; 0xc5c <Light+0x1a>
 c82:	83 33       	cpi	r24, 0x33	; 51
 c84:	79 f0       	breq	.+30     	; 0xca4 <Light+0x62>
 c86:	84 33       	cpi	r24, 0x34	; 52
 c88:	99 f0       	breq	.+38     	; 0xcb0 <Light+0x6e>
 c8a:	e8 cf       	rjmp	.-48     	; 0xc5c <Light+0x1a>
	
			case '1':	
				DIO_voidSetPinValue(LED_PORT,RED_LED, DIO_TOGGLE);
 c8c:	42 e0       	ldi	r20, 0x02	; 2
 c8e:	63 e0       	ldi	r22, 0x03	; 3
 c90:	80 e0       	ldi	r24, 0x00	; 0
 c92:	0e 94 44 01 	call	0x288	; 0x288 <DIO_voidSetPinValue>
				break;
 c96:	e2 cf       	rjmp	.-60     	; 0xc5c <Light+0x1a>
			case '2':
				DIO_voidSetPinValue(LED_PORT,BLUE_LED, DIO_TOGGLE);
 c98:	42 e0       	ldi	r20, 0x02	; 2
 c9a:	64 e0       	ldi	r22, 0x04	; 4
 c9c:	80 e0       	ldi	r24, 0x00	; 0
 c9e:	0e 94 44 01 	call	0x288	; 0x288 <DIO_voidSetPinValue>
				break;
 ca2:	dc cf       	rjmp	.-72     	; 0xc5c <Light+0x1a>
			case '3':
				DIO_voidSetPinValue(LED_PORT,FAN, DIO_TOGGLE);
 ca4:	42 e0       	ldi	r20, 0x02	; 2
 ca6:	62 e0       	ldi	r22, 0x02	; 2
 ca8:	80 e0       	ldi	r24, 0x00	; 0
 caa:	0e 94 44 01 	call	0x288	; 0x288 <DIO_voidSetPinValue>
				break;
 cae:	d6 cf       	rjmp	.-84     	; 0xc5c <Light+0x1a>
			case '4':	
				DIO_voidSetPortValue(LED_PORT, 0x00);
 cb0:	60 e0       	ldi	r22, 0x00	; 0
 cb2:	80 e0       	ldi	r24, 0x00	; 0
 cb4:	0e 94 1b 02 	call	0x436	; 0x436 <DIO_voidSetPortValue>
				return;
		}
	}
	
}
 cb8:	0f 90       	pop	r0
 cba:	df 91       	pop	r29
 cbc:	cf 91       	pop	r28
 cbe:	08 95       	ret

00000cc0 <__udivmodhi4>:
 cc0:	aa 1b       	sub	r26, r26
 cc2:	bb 1b       	sub	r27, r27
 cc4:	51 e1       	ldi	r21, 0x11	; 17
 cc6:	07 c0       	rjmp	.+14     	; 0xcd6 <__udivmodhi4_ep>

00000cc8 <__udivmodhi4_loop>:
 cc8:	aa 1f       	adc	r26, r26
 cca:	bb 1f       	adc	r27, r27
 ccc:	a6 17       	cp	r26, r22
 cce:	b7 07       	cpc	r27, r23
 cd0:	10 f0       	brcs	.+4      	; 0xcd6 <__udivmodhi4_ep>
 cd2:	a6 1b       	sub	r26, r22
 cd4:	b7 0b       	sbc	r27, r23

00000cd6 <__udivmodhi4_ep>:
 cd6:	88 1f       	adc	r24, r24
 cd8:	99 1f       	adc	r25, r25
 cda:	5a 95       	dec	r21
 cdc:	a9 f7       	brne	.-22     	; 0xcc8 <__udivmodhi4_loop>
 cde:	80 95       	com	r24
 ce0:	90 95       	com	r25
 ce2:	bc 01       	movw	r22, r24
 ce4:	cd 01       	movw	r24, r26
 ce6:	08 95       	ret

00000ce8 <__umulhisi3>:
 ce8:	a2 9f       	mul	r26, r18
 cea:	b0 01       	movw	r22, r0
 cec:	b3 9f       	mul	r27, r19
 cee:	c0 01       	movw	r24, r0
 cf0:	a3 9f       	mul	r26, r19
 cf2:	70 0d       	add	r23, r0
 cf4:	81 1d       	adc	r24, r1
 cf6:	11 24       	eor	r1, r1
 cf8:	91 1d       	adc	r25, r1
 cfa:	b2 9f       	mul	r27, r18
 cfc:	70 0d       	add	r23, r0
 cfe:	81 1d       	adc	r24, r1
 d00:	11 24       	eor	r1, r1
 d02:	91 1d       	adc	r25, r1
 d04:	08 95       	ret

00000d06 <_exit>:
 d06:	f8 94       	cli

00000d08 <__stop_program>:
 d08:	ff cf       	rjmp	.-2      	; 0xd08 <__stop_program>
